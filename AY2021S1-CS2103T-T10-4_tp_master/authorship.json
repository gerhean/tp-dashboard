[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-4/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-4/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "## Tutor\u0027s Pet"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Tutor\u0027s Pet is a student management application that aims to reduce the workload of tutors. It provides a one stop"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "platform for tutors to handle all of their administrative matters."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "- Tutor\u0027s Pet allows you to keep track of all your classes, students and lessons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "- Tutor\u0027s Pet allows you to mark your students\u0027 attendance and participation for each lesson."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "- Tutor\u0027s Pet displays your upcoming lessons so that you will never forget about them again."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "To find out more about Tutor\u0027s Pet, visit **[Tutor\u0027s Pet Product Website](https://ay2021s1-cs2103t-t10-4.github.io/tp/)**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003ch4\u003eAcknowledgements\u003c/h4\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "samlsm": 12,
      "dextertanyj": 1,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "run {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    archiveName \u003d \u0027tutorspet.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "dextertanyj": 4,
      "ypinhsuan": 1,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "You can reach us at the following emails"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Low Shu Min Samantha - `e0424934@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Tan Rui Xuan - `e0425237@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Tan Ying Jie, Dexter - `e0014706@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Wong Jun Long - `e0415698@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Yen Pin Hsuan - `e0425443@u.nus.edu`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "### Low Shu Min Samantha"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003cimg src\u003d\"./images/samlsm.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "[[github](https://github.com/samlsm)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "[[portfolio](team/samlsm.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Tan Rui Xuan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cimg src\u003d\"images/ruixuantan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "[[github](http://github.com/ruixuantan)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "[[portfolio](team/ruixuantan.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Responsibilities: Testing, Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Tan Ying Jie, Dexter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003cimg src\u003d\"images/dextertanyj.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[[github](http://github.com/dextertanyj)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[[portfolio](team/dextertanyj.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Role: Lead Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Responsibilities: Integration, Model, Git Expert"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Wong Jun Long"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "\u003cimg src\u003d\"images/junlong4321.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "[[github](http://github.com/junlong4321)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "[[portfolio](team/junlong4321.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Responsibilities: Code Quality, Scheduling + Tracking, Storage"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Yen Pin Hsuan"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "\u003cimg src\u003d\"images/ypinhsuan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "[[github](http://github.com/ypinhsuan)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "[[portfolio](team/ypinhsuan.md)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* Responsibilities: Documentation, Deliverables and Deadlines, Logic"
      }
    ],
    "authorContributionMap": {
      "samlsm": 6,
      "ruixuantan": 3,
      "dextertanyj": 4,
      "ypinhsuan": 4,
      "junlong4321": 17,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* has a need to manage students enrolled in classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**Value proposition**: manage students and classes faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samlsm"
        },
        "content": "| Priority | As a …​ | I want to... | So that I can... |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| --- | --- | --- | --- |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* * *` | Tutor with many students | Store my students\u0027 contact info/emails | Contact them easily |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* * *` | Tutor with many classes | Create classes | Put my students in the appropriate classes |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* * *` | Tutor with many classes | Insert my students into the appropriate classes | Organise my students via classes"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* * *` | New Tutor | View the help menu | Be familiar with app usage |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| `* * *` | Tutor | Delete student entries | Update my list of students if a student were to drop the class |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | View my students\u0027 test scores easily | Gauge my teaching efficiency |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Mark my student\u0027s attendance and participation | Gauge each student\u0027s participation level |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor teaching CS modules | View my students\u0027 GitHub | Gauge my student\u0027s progress in their coding assignment |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | View all my lessons | Manage my time more efficiently |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Record my feedback for my students | Give participation points |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Forgetful Tutor | Track all my tasks | Know which is of greater urgency |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Busy Tutor | Store zoom links | Retrieve these zoom links for my lessons, consultations, etc. |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Busy Tutor | Store class rooms | Be reminded of my lesson venues |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor with many students | Keep notes on each student\u0027s performance | Track their progress over time |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Careless tutor | Undo my commands | Correct any errors when I input things wrongly |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Set recurring events (eg. lessons for every week) | Avoid typing the same events |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Calculate the mean, median, mode of my students\u0027 scores | Gauge the overall performance of my class |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Store the questions asked by students | Provide students with answers immediately, for questions that were asked before |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Be reminded of my lessons | Attend them |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Update the information of my students | Update my understanding of the progress of my students |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Tutor | Categorise my students into how well they are doing | Dedicate more time towards the weaker students |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `* *` | Careless Tutor | Redo my undone actions | Easily reverse my accidental undos. |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Caring tutor | Take note of student\u0027s special needs, if any | Cater my teaching toward them |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor for many semesters | Archive my past semesters | Avoid cluttering the app |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Store teaching feedback given by my students | Improve my teaching |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Prioritise my tasks | Work on important tasks first |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Keep track of the hours I have spent teaching/preparing for class | Be aware of how much time I have spent on teaching |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Store teaching feedback given by Professors | Improve my teaching |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Forgetful Tutor | Set an alert for task deadlines | Complete my tasks on time |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Forgetful Tutor | Store picture of my students | Easily match their faces to their names |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor with many classes | See all tasks related to a class | Easily tell which task belongs to which class |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor teaching modules that require many written assignments | View my student\u0027s written submissions | Mark/review their homework |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Manage my teaching materials | Find them easily |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| `*` | Tutor | Find free time | Provide consultation for students |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| Use Case ID | Description                               |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "|-------------|-------------------------------------------|"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC01        | Add a student                             |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC02        | List students                             |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC03        | Edit a student                            |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC04        | Find a student                            |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC05        | Delete a student                          |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC06        | Clear all students                        |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC07        | Add a class                               |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| UC08        | List classes                              |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| UC09        | List students within a class              |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC10        | Edit a class                              |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC11        | Find a class                              |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC12        | Delete a class                            |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC13        | Clear all classes                         |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC14        | List students and classes                 |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC15        | Link a student to a class                 |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| UC16        | Unlink a student from a class             |"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC17        | Add a lesson                              |"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC18        | Edit a lesson                             |"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC19        | Delete a lesson                           |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC20        | Add an attendance record of a student     |"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC21        | Edit the attendance record of a student   |"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC22        | Find the attendance record of a student   |"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| UC23        | Delete the attendance record of a student |"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "(For all use cases below, the **System** is `Tutor\u0027s Pet` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC01 - Add a student**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to add a student."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters to be added."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet adds the student."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC02 - List students**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to list students."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of students."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC03 - Edit a student**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list students."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of students."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to edit a specific student in the list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  User provides the parameters that are to be edited."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "5.  Tutor\u0027s Pet edits the student\u0027s information."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 4a. The parameters provided are invalid."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * 4a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC04 - Find a student**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to find a student."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters to find student."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet finds the student."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "4.  Tutor\u0027s Pet displays all matching students found."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 3a. No students found."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 3a1. Tutor\u0027s Pet displays a message that no students are found."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC05 - Delete a student**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list students."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of students."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to delete a specific student in the list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  Tutor\u0027s Pet removes the student from its associated class."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "5.  Tutor\u0027s Pet deletes the student."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 4a. The student is not in a class."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  Use case skips to step 5."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC06 - Clear all students**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1. User requests to clear all students."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2. Tutor\u0027s Pet clears all students."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC07 - Add a class**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "samlsm"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1. User requests to add a class."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2. User provides the parameters of the class."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3. Tutor\u0027s Pet adds the class."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 3a. The class already exists."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**Use case: UC08 - List classes**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "1.  User requests to list classes."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of classes."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "**Use case: UC09 - List students within a class**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to list students within a class."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  User specifies the class."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet shows a list of students in the class."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* 2a. The given class index is invalid."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC10 - Edit a class**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list classes."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of classes."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to edit a specific class in the list."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  User provides the parameters that are to be edited."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "5.  Tutor\u0027s Pet edits the class\u0027s information."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "samlsm"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 4a. The parameters provided are invalid."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * 4a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC11 - Find a class**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to find a class."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters to find class."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet finds the class."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "4.  Tutor\u0027s Pet displays all matching classes found."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 3a. No classes found."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 3a1. Tutor\u0027s Pet displays a message that no classes are found."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC12 - Delete a class**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list classes."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of classes."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to delete a specific class in the list."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  Tutor\u0027s Pet deletes the class."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC13 - Clear all classes**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1. User requests to clear all classes."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2. Tutor\u0027s Pet clears all classes."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC14 - List students and classes**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list students and classes."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of students and a list of classes."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC15 - Link a student to a class**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list classes."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of classes."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to list students."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  Tutor\u0027s Pet shows a list of students."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "5.  User requests to link a specific student to a specific class in the list."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "6.  Tutor\u0027s Pet links the specified student to the specified class."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 5a. At least one of the given indexes is invalid."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * 5a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "**Use case: UC16 - Unlink a student from a class**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "samlsm"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "1.  User requests to list classes."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "2.  Tutor\u0027s Pet shows a list of classes."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "3.  User requests to list students."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "4.  Tutor\u0027s Pet shows a list of students."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "5.  User requests to unlink a specific student from a specific class in the list."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "6.  Tutor\u0027s Pet unlinks the specified student from the specified class."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "samlsm"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* 4a. The list is empty."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 5a. At least one of the given indexes is invalid."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * 5a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      Use case resumes at step 4."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* 5b. The specified student is not linked to the specified class."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * 5b1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC17 - Add a lesson**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1. User requests to add a lesson."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2. User provides the parameters of the lesson."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3. Tutor\u0027s Pet adds the lesson."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 3a. The lesson already exists."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC18 - Edit a lesson**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to edit a specific lesson."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters that are to be edited."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet edits the lesson\u0027s information."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 1a. One or more of the given indexes are invalid."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 1a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC19 - Delete a lesson**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to delete a specific lesson."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  Tutor\u0027s Pet deletes the lesson."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 1a. One or more of the given indexes are invalid."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 1a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC20 - Add an attendance record of a student**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1. User requests to add an attendance record of a student."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2. User provides the parameters of the attendance record."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3. Tutor\u0027s Pet adds the attendance record."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 3a. The attendance record already exists."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 3a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC21 - Edit the attendance record of a student**"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to edit a specific attendance record."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters that are to be edited."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet edits the attendance record\u0027s information."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 1a. One or more of the given indexes are invalid."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 1a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 2a. The parameters provided are invalid."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 2a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC22 - Find the attendance record of a student**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to find an attendance record."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  User provides the parameters to find attendance record."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3.  Tutor\u0027s Pet finds the attendance record."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "4.  Tutor\u0027s Pet displays matching attendance record found."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 3a. No attendance records found."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 3a1. Tutor\u0027s Pet displays a message that no attendance records are found."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Use case: UC23 - Delete the attendance record of a student**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "1.  User requests to delete a specific attendance record."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2.  Tutor\u0027s Pet deletes the attendance record."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* 1a. One or more of the given indexes are invalid."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * 1a1. Tutor\u0027s Pet shows an error message."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "2.  Should be able to hold up to 1000 students and classes without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "samlsm": 48,
      "ruixuantan": 76,
      "dextertanyj": 51,
      "ypinhsuan": 59,
      "junlong4321": 263,
      "-": 352
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "As a Computer Science teaching assistant, the traditional approach of managing students within your class would be to "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "manually record their learning progress and attendance. However, as you will notice after some time, manual students "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "tracking is unnecessarily time-consuming. This is why we have created Tutor\u0027s Pet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Tutor’s Pet is a desktop application that helps you reduce the amount of time you spend on administrative tasks as a "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "teaching assistant. It allows you to keep track of the students in your classes, and record both their attendance and "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "participation scores."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "2. Download the latest `tutorspet.jar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your Tutor\u0027s Pet."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "   * **`list`** : Lists all students."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "   * **`add-student`**`n/John Doe t/johndoe e/johnd@example.com tag/student` : Adds a student named `John Doe` to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "   * **`delete-student`**`3` : Deletes the 3rd student shown in the current list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "   * **`clear-student`** : Deletes all students."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  e.g. in `add-student n/NAME`, `NAME` is a parameter which can be used as `add-student n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  e.g `n/NAME [tag/TAG]` can be used as `n/John Doe tag/student` or as `n/John Doe`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Items with `…​` after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  e.g. `[tag/TAG]…​` can be used as ` ` (i.e. 0 times), `tag/student`, `tag/average tag/TA candidate` etc."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  e.g. if the command specifies `n/NAME t/TELEGRAM_USERNAME`, `t/TELEGRAM_USERNAME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "## Command overview"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| Action                            | Format, Examples                                                                                                                                                          |"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "|-----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Help**                          | `help`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| **Add Student**                   | `add-student n/NAME t/TELEGRAM_USERNAME e/EMAIL [tag/TAG]…​` \u003cbr\u003e e.g., `add-student n/John Doe t/johndoe e/johnd@example.com tag/student`                             |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| **List All Students**             | `list-student`                                                                                                                                                            |"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| **Edit Student**                  | `edit-student INDEX [n/NAME] [t/TELEGRAM_USERNAME] [e/EMAIL] [tag/TAG]…​`\u003cbr\u003e e.g., `edit-student 2 n/James Lee e/jameslee@example.com`                                |"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Find Student**                  | `find-student KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find-student James Jake`                                                                                                |"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Delete Student**                | `delete-student INDEX`\u003cbr\u003e e.g., `delete-student 3`                                                                                                                       |"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Clear All Students**            | `clear-student`                                                                                                                                                           |"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Add Class**                     | `add-class n/CLASS_NAME`\u003cbr\u003e e.g., `add-class n/CS2103T Tutorial T10`                                                                                                     |"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "| **List All Classes**              | `list-class`                                                                                                                                                              |"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **List Students In A Class**      | `list-students c/INDEX`\u003cbr\u003e e.g., `list-students c/3`                                                                                                                     |"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| **Edit Class**                    | `edit-class INDEX n/CLASS_NAME` \u003cbr\u003e e.g., `edit-class 1 n/CS2103T Tutorial T10`                                                                                          |"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Find Class**                    | `find-class KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find-class CS2103T`                                                                                                       |"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Delete Class**                  | `delete-class INDEX` \u003cbr\u003e e.g., `delete-class 2`                                                                                                                          |"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Clear All Classes**             | `clear-class`                                                                                                                                                             |"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| **List All Students And Classes** | `list`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Linking Student To A Class**    | `link s/STUDENT_INDEX c/CLASS_INDEX`\u003cbr\u003e e.g., `link s/1 c/2`                                                                                                             |"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Unlink Student From A Class**   | `unlink s/STUDENT_INDEX c/CLASS_INDEX` \u003cbr\u003e e.g., `unlink s/1 c/2`                                                                                                        |"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Add Lesson**                    | `add-lesson c/CLASS_INDEX d/DAY st/START_TIME et/END_TIME v/VENUE r/NO_OF_TIMES` \u003cbr\u003e e.g., `add-lesson c/1 d/MONDAY st/0800 et/1000 v/COM1 #01-01 r/13`                  |"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Edit Lesson**                   | `edit-lesson c/CLASS_INDEX l/LESSON_INDEX [d/DAY] [st/START_TIME] [et/END_TIME] [v/VENUE]` \u003cbr\u003e e.g., `edit-lesson c/1 l/1 d/TUESDAY st/1000 et/1200 v/COM2 #02-02`       |"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Delete Lesson**                 | `delete-lesson c/CLASS_INDEX l/LESSON_INDEX` \u003cbr\u003e e.g., `delete-lesson c/1 l/1`                                                                                           |"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Add Attendance Record**         | `add-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK p/PARTICIPATION_SCORE` \u003cbr\u003e e.g., `add-attendance c/1 l/1 s/1 w/1 p/1`                                |"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Edit Attendance Record**        | `edit-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK p/PARTICIPATION_SCORE` \u003cbr\u003e e.g., `edit-attendance c/1 l/1 s/1 w/1 p/10`                             |"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Find Attendance Record**        | `find-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK` \u003cbr\u003e e.g., `find-attendance c/1 l/1 s/1 w/1`                                                        |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Delete Attendance Record**      | `delete-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK` \u003cbr\u003e e.g., `delete-attendance c/1 l/1 s/1 w/1`                                                    |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Undo**                          | `undo`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Redo**                          | `redo`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **View Action History**           | `view-history`                                                                                                                                                            |"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "| **Exit**                          | `exit`                                                                                                                                                                    |"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "| **Reset**                         | `reset`                                                                                                                                                                   |"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "### Managing Students"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Adding a student : `add-student`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Adds a student to the list of students."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Format: `add-student n/NAME t/TELEGRAM_USERNAME e/EMAIL [tag/TAG]…​`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "A student can have any number of tags (including 0)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* `add-student n/John Doe t/johndoe e/johnd@example.com`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* `add-student n/Betsy Crowe t/betsycrowe e/betsycrowe@example.com tag/student`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "#### Listing all students : `list-student`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Shows a list of all students in the application."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Format: `list-student`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Editing a student : `edit-student`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Edits an existing student in the application."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Format: `edit-student INDEX [n/NAME] [t/TELEGRAM_USERNAME] [e/EMAIL] [tag/TAG]…​`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Edits the student at the specified `INDEX`. The index refers to the index number shown in the displayed student list. The index **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* When editing tags, the existing tags of the student will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* You can remove all the student’s tags by typing `tag/` without"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "*  `edit-student 1 t/johndoe e/johndoe@example.com` Edits the telegram username and email address of the 1st student to be `johndoe` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "*  `edit-student 2 n/Betsy Crower tag/` Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Finding student by name : `find-student`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Finds students whose names contain any of the given keywords."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `find-student KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-student John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-student alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Deleting a student : `delete-student`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Deletes the specified student from the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `delete-student INDEX`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Deletes the student at the specified `INDEX`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* The index refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The index **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `list` followed by `delete-student 2` deletes the 2nd student in the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-student Betsy` followed by `delete-student 1` deletes the 1st student in the results of the `find-student` command."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Clearing all students : `clear-student`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Clears all students from the application."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `clear-student`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Managing Classes"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Adding a class : `add-class`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Adds a class to the application."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `add-class n/CLASS_NAME`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `add-class n/CS2103T Tutorial T10`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "#### Listing all classes : `list-class`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Shows a list of all classes in the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Format: `list-class`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Listing all students within a class : `list-students`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Shows a list of all students within a particular class in the application."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Format: `list-students c/INDEX`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* The index refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* `list-students c/3`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Editing a class : `edit-class`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Edits an existing class in the application."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Format: `edit-class INDEX n/CLASS_NAME`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* Edits the class at the specified `INDEX`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* The index refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The index **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* A new class name must be provided."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "*  `edit-class 1 n/CS2103T Tutorial T10` Edits the class name of the 1st class to be `CS2103T Tutorial T10`."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Finding class by name : `find-class`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Finds classes whose names contain any of the given keywords."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `find-class KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* The search is case-insensitive. e.g `cs2103t` will match `CS2103T`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* The order of the keywords does not matter. e.g. `lab CS2100` will match `CS2100 lab`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* Only full words will be matched e.g. `CS` will not match `CS2100`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* Students matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  e.g. `CS2103T lab` will return `CS2103T tut`, `CS2100 lab`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-class CS2100` returns `CS2100 tut` and `CS2100 lab`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-class tut CS2030` returns `CS2103T tut`, `CS2030 lab`\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Deleting a class : `delete-class`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Deletes the specified class from the application."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Format: `delete-class INDEX`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* Deletes the class at the specified `INDEX`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* The index refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The index **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* `delete-class 2` deletes the 2nd class in the application."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Clearing all classes : `clear-class`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Clears all classes from the application."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `clear-class`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "#### Listing all students and classes : `list`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Shows a list of all students and classes in the application."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Linking a student to a class : `link`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Links an existing student to an existing class in the application."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Format: `link s/STUDENT_INDEX c/CLASS_INDEX`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* Links the student at the specified `STUDENT_INDEX` to the class at the specified `CLASS_INDEX`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* `STUDENT_INDEX` refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* `CLASS_INDEX` refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* `list` followed by `link s/1 c/2` links the 1st student in the application to the 2nd class in the application."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* `find-student Betsy` followed by `link s/1 c/2` links the 1st student in the results of the `find-student` command to the 2nd class in the application."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Unlinking a student from a class : `unlink`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Unlinks an existing student from an existing class in the application."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `unlink s/STUDENT_INDEX c/CLASS_INDEX`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Unlinks the student at the specified `STUDENT_INDEX` from the class at the specified `CLASS_INDEX`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `STUDENT_INDEX` refers to the index number shown in the displayed student list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `CLASS_INDEX` refers to the index number shown in the displayed class list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "*  `unlink s/1 c/2` Unlinks the 1st student from the 2nd class in the respective lists."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Managing Lessons"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Adding a lesson : `add-lesson`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Adds a lesson to the application."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `add-lesson c/CLASS_INDEX d/DAY st/START_TIME et/END_TIME v/VENUE r/NO_OF_TIMES`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `add-lesson c/1 d/MONDAY st/0800 et/1000 v/COM1 #01-01 r/13`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Editing a lesson : `edit-lesson`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Edits an existing lesson in the application."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `edit-lesson c/CLASS_INDEX l/LESSON_INDEX [d/DAY] [st/START_TIME] [et/END_TIME] [v/VENUE]`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Edits the lesson at the specified `CLASS_INDEX` + `LESSON_INDEX`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* User has to specify at least 1 field (DAY/START_TIME/END_TIME/VENUE) to be changed."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "*  `edit-lesson c/1 l/1 d/TUESDAY st/1000 et/1200 v/COM2 #02-02` Edits the 1st lesson of the 1st class to be held on Tuesdays, 10.00AM to 12.00PM at COM2 #02-02."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Deleting a lesson : `delete-lesson`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Deletes the specified lesson from the application."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `delete-lesson c/CLASS_INDEX l/LESSON_INDEX`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Deletes the lesson at the specified `CLASS_INDEX` + `LESSON_INDEX`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Managing Attendance Records"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Adding an attendance record : `add-attendance`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Adds an attendance record to the application."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `add-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK p/PARTICIPATION_SCORE`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `add-attendance c/1 l/1 s/1 w/1 p/1`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Editing an attendance record : `edit-attendance`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Edits an existing attendance record in the application."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `edit-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK p/PARTICIPATION_SCORE`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Edits the participation score of the attendance record at the specified `CLASS_INDEX` + `LESSON_INDEX` + `STUDENT_INDEX` + `WEEK`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The `WEEK` must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The `PARTICIPATION_SCORE` **must be a non-negative whole number** 0, 1, 2, …​"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "*  `edit-attendance c/1 l/1 s/1 w/1 p/10` Edits the 1st week\u0027s participation score of the 1st student of the 1st lesson of the 1st class to 10 points."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Finding attendance record by indexes: `find-attendance`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Finds an attendance record at the specified `CLASS_INDEX` + `LESSON_INDEX` + `STUDENT_INDEX` + `WEEK`. "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `find-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Finds the attendance record at the specified `CLASS_INDEX` + `LESSON_INDEX` + `STUDENT_INDEX` + `WEEK`."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The `WEEK` **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `find-attendance c/1 l/1 s/1 w/1` Finds the 1st week\u0027s attendance record of the 1st student of the 1st lesson of the 1st class."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "#### Deleting an attendance record : `delete-attendance`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Deletes the specified attendance record from the application."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `delete-attendance c/CLASS_INDEX l/LESSON_INDEX s/STUDENT_INDEX w/WEEK`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* Deletes the attendance record at the specified `CLASS_INDEX` + `LESSON_INDEX` + `STUDENT_INDEX` + `WEEK`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The indexes **must be positive whole numbers** 1, 2, 3, …​"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* The `WEEK` **must be a positive whole number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* `delete-attendance c/1 l/1 s/1 w/1` Deletes the 1st week\u0027s attendance record of the 1st student of the 1st lesson of the 1st class."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Undo previous command : `undo`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Undo most recent command."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### Redo an undo : `redo`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Redo the most recent undo command."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format : `redo`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "### View action history : `view-history`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "View a list of actions that can be undone or redone."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Format : `view-history` "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "### Resetting the program : `reset`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Resets the program and clears all the data."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Format: `reset`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Tutor\u0027s Pet automatically saves your data to your hard disk after any changes are made."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Tutor\u0027s Pet home folder."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "samlsm": 11,
      "dextertanyj": 35,
      "ruixuantan": 31,
      "ypinhsuan": 43,
      "junlong4321": 182,
      "-": 120
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "title: Tutor\u0027s Pet"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-4/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-4/tp)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "**Tutor\u0027s Pet is a desktop application for managing your students and classes.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* If you are interested in using Tutor\u0027s Pet, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* If you are interested about developing Tutor\u0027s Pet, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 7,
      "-": 11
    }
  },
  {
    "path": "docs/team/dextertanyj.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "title: Dexter Tan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "## Project: Tutor\u0027s Pet"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Tutor\u0027s Pet is a **desktop application for managing students and classes, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "If you can type fast, Tutor\u0027s pet can get your class management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  * Project Website:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * Updated website header: [\\#22]()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * Updated project badges: [\\#22]()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * Updated documentation to new project direction: [\\#22]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * Added documentation for the features `add-class` and `delete-class`: [\\#22]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    * Added use cases for the features `add-class` and `unlink-student` (Work In Progress)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#37]()"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 24
    }
  },
  {
    "path": "docs/team/junlong4321.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "title: Jun Long\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "## Project: Tutor\u0027s Pet"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Tutor\u0027s Pet is a **desktop application for managing students and classes, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "If you can type fast, Tutor\u0027s pet can get your class management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  * About Us :"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Set up base template AboutUs for team\u0027s usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Reformatted User Guide and tailored it to Tutor\u0027s Pet Project (E.g Changed entries -\u003e students, /t to /tag, Changed tag description, Removed address, etc)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Added documentation for `list-students` and `clear-class` related commands"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Consolidated and organised all commands into a table and also to follow a certain action sequence"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Added use cases `find` and `clear` related commands - UC04, UC06, UC10, UC12"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    * Consolidated and organised all use cases into a table and also to follow a certain action sequence"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 25
    }
  },
  {
    "path": "docs/team/ruixuantan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "title: Rui Xuan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 46
    }
  },
  {
    "path": "docs/team/samlsm.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "title: Samantha Low\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "## Project: Tutor\u0027s Pet"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Tutor\u0027s Pet is a **desktop application for managing students and classes, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "If you can type fast, Tutor\u0027s pet can get your class management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * Added use case details for `edit module class` and `link student to module class` feature"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  * README:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * Added description of project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    * Designed the UI for the project"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      }
    ],
    "authorContributionMap": {
      "samlsm": 23
    }
  },
  {
    "path": "docs/team/ypinhsuan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "title: Yen Pin Hsuan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "## Project: Tutor\u0027s Pet"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Tutor\u0027s Pet is a **desktop application for managing students and classes, optimised for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "If you can type fast, Tutor\u0027s pet can get your class management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    * Added use case details for `add a student`, `list students` and `list students within a class`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    * Update commands related to students"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 22
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    \"telegram\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.storage.JsonTutorsPetStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.storage.TutorsPetStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TutorsPet ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPetStorage tutorsPetStorage \u003d new JsonTutorsPetStorage(userPrefs.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        storage \u003d new StorageManager(tutorsPetStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Tutor\u0027s Pet and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The data from the sample Tutor\u0027s Pet will be used instead if {@code storage}\u0027s Tutor\u0027s Pet is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * or an empty Tutor\u0027s Pet will be used instead if errors occur when reading {@code storage}\u0027s Tutor\u0027s Pet."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Optional\u003cReadOnlyTutorsPet\u003e tutorsPetOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ReadOnlyTutorsPet initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            tutorsPetOptional \u003d storage.readTutorsPet();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            if (!tutorsPetOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TutorsPet\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            initialData \u003d tutorsPetOptional.orElseGet(SampleDataUtil::getSampleTutorsPet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TutorsPet\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            initialData \u003d new TutorsPet();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorsPet\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            initialData \u003d new TutorsPet();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorsPet\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        logger.info(\"Starting TutorsPet \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Tutor\u0027s Pet ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "ypinhsuan": 23,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Config values used by the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String LOG_FILE \u003d \"tutorspet.log\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "ypinhsuan": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX \u003d \"The student index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_STUDENTS_LISTED_OVERVIEW \u003d \"%1$d students listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX \u003d \"The class index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_MODULE_CLASS_LISTED_OVERVIEW \u003d \"%1$d classes listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK \u003d \"The week provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS \u003d \"Student does not exist in class\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_MISSING_STUDENT_ATTENDANCE \u003d \"Student\u0027s attendance does not exist\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 9,
      "ypinhsuan": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.stream.Collectors.toCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.function.UnaryOperator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deep copies a {@code List}, along with deep copies of its elements."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param list the list to be copied."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param deepCopyElement the function that deep copies the elements of the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param \u003cT\u003e type of the element of the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the deep copied list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static \u003cT\u003e List\u003cT\u003e deepCopyList(List\u003cT\u003e list, UnaryOperator\u003cT\u003e deepCopyElement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return list.stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .map(element -\u003e deepCopyElement.apply(element))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .collect(toCollection(ArrayList::new));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deep copies a {@code Map}, along with deep copies of its keys and values."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param map the map to be copied."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param deepCopyKey the function that deep copies the key."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param deepCopyValue the function that deep copies the value."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param \u003cT\u003e type of the key."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param \u003cU\u003e type of the value."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @return the deep copied map."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static \u003cT, U\u003e Map\u003cT, U\u003e deepCopyMap("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Map\u003cT, U\u003e map, UnaryOperator\u003cT\u003e deepCopyKey, UnaryOperator\u003cU\u003e deepCopyValue) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        HashMap\u003cT, U\u003e copyMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (T key : map.keySet()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            T copiedKey \u003d deepCopyKey.apply(key);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            U copiedValue \u003d deepCopyValue.apply(map.get(key));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            copyMap.put(copiedKey, copiedValue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return copyMap;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 41,
      "junlong4321": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the TutorsPet."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @see seedu.address.model.Model#getTutorsPet()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ReadOnlyTutorsPet getTutorsPet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of students."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    ObservableList\u003cModuleClass\u003e getFilteredModuleClassList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the user prefs\u0027 Tutor\u0027s Pet file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Path getTutorsPetFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 6,
      "dextertanyj": 3,
      "ypinhsuan": 8,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.parser.TutorsPetParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final TutorsPetParser tutorsPetParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPetParser \u003d new TutorsPetParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Command command \u003d tutorsPetParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            storage.saveTutorsPet(model.getTutorsPet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ReadOnlyTutorsPet getTutorsPet() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return model.getTutorsPet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return model.getFilteredStudentList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public ObservableList\u003cModuleClass\u003e getFilteredModuleClassList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return model.getTutorsPetFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "dextertanyj": 1,
      "ypinhsuan": 13,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.LessonModificationUtil.addLessonToAttendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.ModuleClassModificationUtil.addModifiedLessonToModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Adds a student\u0027s attendance to the specified {@code Lesson} in the student manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-attendance\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student\u0027s attendance to the specified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"lesson in the student manager. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Note: All indexes and numbers must be positive integers.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"LESSON_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_WEEK + \"WEEK_NUMBER\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_PARTICIPATION_SCORE + \"PARTICIPATION_SCORE (must be an integer between 0 and 100)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New attendance added: %1$s attended week %2$s lesson with \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"participation score of %3$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE \u003d \"Attendance have been recorded previously.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index moduleCLassIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index lessonIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Week week;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Attendance toAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates an AddAttendanceCommand to add the specified {@code Attendance}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public AddAttendanceCommand(Index moduleCLassIndex, Index lessonIndex, Index studentIndex,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                                Week week, Attendance toAdd) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireAllNonNull(moduleCLassIndex, lessonIndex, studentIndex, week, toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.moduleCLassIndex \u003d moduleCLassIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.lessonIndex \u003d lessonIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (moduleCLassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student targetStudent \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass targetModuleClass \u003d lastShownModuleClassList.get(moduleCLassIndex.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!targetModuleClass.hasStudentUuid(targetStudent.getUuid())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (lessonIndex.getZeroBased() \u003e\u003d targetModuleClass.getLessons().size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson targetLesson \u003d targetModuleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!targetLesson.getAttendanceRecordList().isWeekContained(week)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d addLessonToAttendance(targetLesson, targetStudent, week, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                addModifiedLessonToModuleClass(targetModuleClass, lessonIndex, modifiedLesson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.setModuleClass(targetModuleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, targetStudent.getName(), week, toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || (other instanceof AddAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 moduleCLassIndex.equals(((AddAttendanceCommand) other).moduleCLassIndex)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 lessonIndex.equals(((AddAttendanceCommand) other).lessonIndex)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((AddAttendanceCommand) other).studentIndex)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 week.equals(((AddAttendanceCommand) other).week)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAttendanceCommand) other).toAdd));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 111,
      "junlong4321": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_OCCURRENCES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.ModuleClassModificationUtil.addLessonToModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Adds a lesson to the student manager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-lesson\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to the student manager. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_NUMBER_OF_OCCURRENCES + \"NO_OF_OCCURRENCES\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_DAY + \"TUESDAY \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_START_TIME + \"08:00 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_END_TIME + \"10:00 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_VENUE + \"COM1-0211 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_NUMBER_OF_OCCURRENCES + \"13\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_EXISTING_LESSON \u003d \"This lesson already exists\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Creates an AddLessonCommand to add the specified {@code Lesson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public AddLessonCommand(Index moduleClassIndex, Lesson lesson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(moduleClassIndex, lesson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.toAdd \u003d lesson;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // add lesson to moduleClass"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClassToAddTo \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d addLessonToModuleClass(moduleClassToAddTo, toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.setModuleClass(moduleClassToAddTo, modifiedModuleClass);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                || (other instanceof AddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((AddLessonCommand) other).moduleClassIndex))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLessonCommand) other).toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Adds a class to the student manager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-class\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a class to the student manager. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_NAME + \"CS2103T Tutorial\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New class added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_CLASS \u003d \"This class already exists.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final ModuleClass toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates an AddModuleClassCommand to add the specified {@code ModuleClass}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AddModuleClassCommand(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        toAdd \u003d moduleClass;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (model.hasModuleClass(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.addModuleClass(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof AddModuleClassCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleClassCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 56,
      "junlong4321": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Adds a student to the student manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class AddStudentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-student\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a student to the student manager. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_TELEGRAM + \"TELEGRAM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_TELEGRAM + \"johnDO3 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + PREFIX_TAG + \"CS2103 Tutorial \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + PREFIX_TAG + \"Experienced\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New student added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final Student toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates an AddStudentCommand to add the specified {@code Student}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public AddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        toAdd \u003d student;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (model.hasStudent(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.addStudent(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof AddStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddStudentCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3,
      "dextertanyj": 4,
      "ypinhsuan": 18,
      "junlong4321": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Clears all classes in the student manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ClearModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-class\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All classes in Tutor\u0027s Pet have been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.deleteAllModuleClasses();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 22,
      "dextertanyj": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Clears all students in the student manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class ClearStudentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-student\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All students in Tutor\u0027s Pet have been cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model.deleteAllStudents();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "dextertanyj": 1,
      "ypinhsuan": 4,
      "junlong4321": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.LessonModificationUtil.deleteAttendanceFromLesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.ModuleClassModificationUtil.addModifiedLessonToModuleClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Deletes an attendance of a student for a specific week identified using it\u0027s"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * displayed index in the displayed module class list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class DeleteAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-attendance\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \": Deletes the attendance record of a student in a specific week identified by the \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"index number used in the displayed class list, student list, and lesson list respectively. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Note: All indexes must be positive integers.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"LESSON_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_WEEK + \"WEEK NUMBER (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            + PREFIX_WEEK + \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTENDANCE_SUCCESS \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \"Deleted week %1$s attendance of student %2$s from lesson %3$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_MISSING_ATTENDANCE \u003d \"Attendance of this student does not exist!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Index lessonIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Week week;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @param moduleClassIndex in the filtered class list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @param lessonIndex in the filtered lesson list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @param studentIndex in the filtered student list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @param week in the specified attendance list to be deleted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public DeleteAttendanceCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Index moduleClassIndex, Index lessonIndex, Index studentIndex, Week week) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(moduleClassIndex, lessonIndex, studentIndex, week);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.lessonIndex \u003d lessonIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Student targetStudent \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass targetModuleClass \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!targetModuleClass.hasStudentUuid(targetStudent.getUuid())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (lessonIndex.getZeroBased() \u003e\u003d targetModuleClass.getLessons().size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson targetLesson \u003d targetModuleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!targetLesson.getAttendanceRecordList().isWeekContained(week)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d deleteAttendanceFromLesson(targetLesson, targetStudent, week);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                addModifiedLessonToModuleClass(targetModuleClass, lessonIndex, modifiedLesson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.setModuleClass(targetModuleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String message \u003d String.format(MESSAGE_DELETE_ATTENDANCE_SUCCESS, week, targetStudent.getName(), targetLesson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                || (other instanceof DeleteAttendanceCommand // instance of handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((DeleteAttendanceCommand) other).moduleClassIndex)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 lessonIndex.equals(((DeleteAttendanceCommand) other).lessonIndex))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((DeleteAttendanceCommand) other).studentIndex)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 week.equals(((DeleteAttendanceCommand) other).week);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.ModuleClassModificationUtil.deleteLessonFromModuleClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index in the displayed module class list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-lesson\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \": Deletes the lesson in a specific class identified by the \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"by the index number used in the displayed class list \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"and index number in the lesson list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"LESSON_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted lesson %1$s from %2$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index lessonIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param moduleClassIndex in the filtered class list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param lessonIndex in the specified class list to be deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DeleteLessonCommand(Index moduleClassIndex, Index lessonIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireAllNonNull(moduleClassIndex, lessonIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.lessonIndex \u003d lessonIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass targetModuleClass \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (lessonIndex.getZeroBased() \u003e\u003d targetModuleClass.getLessons().size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lessonToDelete \u003d targetModuleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d deleteLessonFromModuleClass(targetModuleClass, lessonToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.setModuleClass(targetModuleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete, targetModuleClass);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || (other instanceof DeleteLessonCommand // instance of handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((DeleteLessonCommand) other).moduleClassIndex)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 lessonIndex.equals(((DeleteLessonCommand) other).lessonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 80,
      "ruixuantan": 2,
      "junlong4321": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Deletes a class identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-class\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \": Deletes the class identified by the index number used in the displayed class list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_CLASS_SUCCESS \u003d \"Deleted Class: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DeleteModuleClassCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e lastShownList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.deleteModuleClass(moduleClassToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_DELETE_MODULE_CLASS_SUCCESS, moduleClassToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof DeleteModuleClassCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteModuleClassCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 55,
      "junlong4321": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Deletes a student identified using it\u0027s displayed index from the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DeleteStudentCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-student\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + \": Deletes the student identified by the index number used in the displayed student list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public DeleteStudentCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student studentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof DeleteStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteStudentCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 3,
      "ypinhsuan": 13,
      "junlong4321": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.util.ModuleClassModificationUtil.addEditedLessonToModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Edits the details of an existing lesson in a module class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-lesson\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \": Edits the details of the lesson, identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"by the index number used in the displayed class list \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"and index number in the lesson list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"LESSON_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"[\" + PREFIX_DAY + \"DAY] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END_TIME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \"VENUE]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1 \" + PREFIX_LESSON_INDEX + \"1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_DAY + \"WEDNESDAY \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_END_TIME + \"18:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Index lessonIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final EditLessonCommand.EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param moduleClassIndex in the filtered class list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param lessonIndex in the specified class list to be edited."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param editLessonDescriptor details to edit the class with."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Index moduleClassIndex, Index lessonIndex, EditLessonCommand.EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireAllNonNull(moduleClassIndex, lessonIndex, editLessonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.lessonIndex \u003d lessonIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonCommand.EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass targetModuleClass \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (lessonIndex.getZeroBased() \u003e\u003d targetModuleClass.getLessons().size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson lessonToEdit \u003d targetModuleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d addEditedLessonToModuleClass("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                targetModuleClass, lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model.setModuleClass(targetModuleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String message \u003d String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * {@code NumberOfOccurrences} and {@code AttendanceRecordList} remain unchanged."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static Lesson createEditedLesson("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalTime updatedStartTime \u003d editLessonDescriptor.getStartTime().orElse(lessonToEdit.getStartTime());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LocalTime updatedEndTime \u003d editLessonDescriptor.getEndTime().orElse(lessonToEdit.getEndTime());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Day updatedDay \u003d editLessonDescriptor.getDay().orElse(lessonToEdit.getDay());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Venue updatedVenue \u003d editLessonDescriptor.getVenue().orElse(lessonToEdit.getVenue());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        NumberOfOccurrences originalNumberOfOccurrences \u003d lessonToEdit.getNumberOfOccurrences();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d lessonToEdit.getAttendanceRecordList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Lesson(updatedStartTime, updatedEndTime, updatedDay, originalNumberOfOccurrences,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                updatedVenue, attendanceRecordList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!(other instanceof EditLessonCommand)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand e \u003d (EditLessonCommand) other;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return moduleClassIndex.equals(e.moduleClassIndex)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 lessonIndex.equals(e.lessonIndex)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private LocalTime startTime;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private LocalTime endTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private Day day;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public EditLessonDescriptor(EditLessonCommand.EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            setDay(toCopy.day);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(startTime, endTime, day, venue);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public void setStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public Optional\u003cLocalTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public void setEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public Optional\u003cLocalTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public void setDay(Day day) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.day \u003d day;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public Optional\u003cDay\u003e getDay() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Optional.ofNullable(day);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (!(other instanceof EditLessonCommand.EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            EditLessonCommand.EditLessonDescriptor e \u003d (EditLessonCommand.EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return getStartTime().equals(e.getStartTime())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 getEndTime().equals(e.getEndTime())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 getDay().equals(e.getDay())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 221,
      "junlong4321": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Edits the details of an existing class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-class\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the class identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"by the index number used in the displayed class list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME]\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_NAME + \"CS2103T Tutorial T10\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_CLASS_SUCCESS \u003d \"Edited Class: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_CLASS \u003d \"This class already exists.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final EditModuleClassDescriptor editModuleClassDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index of the class in the filtered class list to edit."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param editModuleClassDescriptor details to edit the class with."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassCommand(Index index, EditModuleClassDescriptor editModuleClassDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireAllNonNull(index, editModuleClassDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.editModuleClassDescriptor \u003d new EditModuleClassDescriptor(editModuleClassDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cModuleClass\u003e lastShownList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClassToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass editedModuleClass \u003d createEditedModuleClass(moduleClassToEdit, editModuleClassDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!moduleClassToEdit.isSameModuleClass(editedModuleClass) \u0026\u0026 model.hasModuleClass(editedModuleClass)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.setModuleClass(moduleClassToEdit, editedModuleClass);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_EDIT_MODULE_CLASS_SUCCESS, editedModuleClass);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates and returns a {@code ModuleClass} with the details of {@code moduleClassToEdit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * edited with {@code editModuleClassDescriptor}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static ModuleClass createEditedModuleClass(ModuleClass moduleClassToEdit,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor editModuleClassDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClassToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Name updatedName \u003d editModuleClassDescriptor.getName().orElse(moduleClassToEdit.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d moduleClassToEdit.getStudentUuids();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d moduleClassToEdit.getLessons();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(updatedName, studentUuids, lessons);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!(other instanceof EditModuleClassCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand e \u003d (EditModuleClassCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 editModuleClassDescriptor.equals(e.editModuleClassDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Stores the details to edit the class with. Each non-empty field will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * corresponding field value of the class."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static class EditModuleClassDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public EditModuleClassDescriptor() {}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public EditModuleClassDescriptor(EditModuleClassDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (!(other instanceof EditModuleClassDescriptor)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            EditModuleClassDescriptor e \u003d (EditModuleClassDescriptor) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return getName().equals(e.getName());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "samlsm": 150,
      "ruixuantan": 2,
      "dextertanyj": 8,
      "junlong4321": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Edits the details of an existing student."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-student\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the student identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + \"by the index number used in the displayed student list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"[\" + PREFIX_TELEGRAM + \"TELEGRAM] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + PREFIX_TELEGRAM + \"johnDO3 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"This student already exists.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final EditStudentDescriptor editStudentDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param index of the student in the filtered student list to edit."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param editStudentDescriptor details to edit the student with."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentCommand(Index index, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireAllNonNull(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.editStudentDescriptor \u003d new EditStudentDescriptor(editStudentDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cStudent\u003e lastShownList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student studentToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedStudent \u003d createEditedStudent(studentToEdit, editStudentDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!studentToEdit.isSameStudent(editedStudent) \u0026\u0026 model.hasStudent(editedStudent)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.setStudent(studentToEdit, editedStudent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates and returns a {@code Student} with the details of {@code studentToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * edited with {@code editStudentDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static Student createEditedStudent(Student studentToEdit, EditStudentDescriptor editStudentDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assert studentToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        UUID updatedUuid \u003d studentToEdit.getUuid();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Name updatedName \u003d editStudentDescriptor.getName().orElse(studentToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Telegram updatedTelegram \u003d editStudentDescriptor.getTelegram().orElse(studentToEdit.getTelegram());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Email updatedEmail \u003d editStudentDescriptor.getEmail().orElse(studentToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editStudentDescriptor.getTags().orElse(studentToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Student(updatedUuid, updatedName, updatedTelegram, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!(other instanceof EditStudentCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand e \u003d (EditStudentCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 editStudentDescriptor.equals(e.editStudentDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Stores the details to edit the student with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * corresponding field value of the student."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static class EditStudentDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private Telegram telegram;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public EditStudentDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public EditStudentDescriptor(EditStudentDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            setTelegram(toCopy.telegram);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, telegram, email, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public void setTelegram(Telegram telegram) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public Optional\u003cTelegram\u003e getTelegram() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Optional.ofNullable(telegram);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            if (!(other instanceof EditStudentDescriptor)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            EditStudentDescriptor e \u003d (EditStudentDescriptor) other;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 getTelegram().equals(e.getTelegram())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 2,
      "ruixuantan": 17,
      "dextertanyj": 6,
      "ypinhsuan": 37,
      "junlong4321": 3,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Tutor\u0027s Pet as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindAttendanceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Finds a student\u0027s attendance for a specified lesson in a specified lesson on"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * a specified week in the student manager."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-attendance\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Finds the attendance of a student in a specified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"lesson on a specified week.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Note: All indexes and numbers must be positive integers.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_LESSON_INDEX + \"LESSON_INDEX \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"STUDENT_INDEX \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + PREFIX_WEEK + \"WEEK_NUMBER\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$S attended week %2$s lesson with a participation score of %3$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index lessonIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Week week;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a FindAttendanceCommand to find a student\u0027s attendance for a specified lesson"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * on a specified week in the student manager."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindAttendanceCommand(Index moduleCLassIndex, Index lessonIndex, Index studentIndex, Week week) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireAllNonNull(moduleCLassIndex, lessonIndex, studentIndex, week);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.moduleClassIndex \u003d moduleCLassIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.lessonIndex \u003d lessonIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student targetStudent \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass targetModuleClass \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!targetModuleClass.hasStudentUuid(targetStudent.getUuid())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (lessonIndex.getZeroBased() \u003e\u003d targetModuleClass.getLessons().size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson targetLesson \u003d targetModuleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!targetLesson.getAttendanceRecordList().isWeekContained(week)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d targetLesson.getAttendanceRecordList().getAttendanceRecord(week);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!attendanceRecord.hasAttendance(targetStudent.getUuid())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MISSING_STUDENT_ATTENDANCE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d targetLesson.getAttendanceRecordList().getAttendance(targetStudent, week);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String message \u003d String.format(MESSAGE_SUCCESS, targetStudent.getName(), week, attendance);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || (other instanceof FindAttendanceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((FindAttendanceCommand) other).moduleClassIndex)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 lessonIndex.equals(((FindAttendanceCommand) other).lessonIndex)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((FindAttendanceCommand) other).studentIndex)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 week.equals(((FindAttendanceCommand) other).week));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Finds and lists all classes in the student manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-class\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all classes whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Parameter: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" cs2103t cs2100\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cModuleClass\u003e predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindModuleClassCommand(NameContainsKeywordsPredicate\u003cModuleClass\u003e predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.updateFilteredModuleClassList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_MODULE_CLASS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                model.getFilteredModuleClassList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return other \u003d\u003d this // short circuit it same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || (other instanceof FindModuleClassCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindModuleClassCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 43,
      "junlong4321": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Finds and lists all students in the student manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class FindStudentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-student\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all students whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final NameContainsKeywordsPredicate\u003cStudent\u003e predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public FindStudentCommand(NameContainsKeywordsPredicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                String.format(Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW, model.getFilteredStudentList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof FindStudentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindStudentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "ypinhsuan": 8,
      "junlong4321": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_SHOWING_HELP \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(MESSAGE_SHOWING_HELP, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.SameModuleClassPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.StudentInUuidCollectionPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Links an existing student to an existing class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class LinkCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"link\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \": Links the student identified by the index number used in the displayed student list to \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"the class identified by the index number used in the displayed class list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"1\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_LINK_SUCCESS \u003d \"Linked %1$s to %2$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_EXISTING_LINK \u003d \"This student is already linked to this class.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param moduleClassIndex in the filtered class list to link."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param studentIndex in the filtered student list to link."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public LinkCommand(Index moduleClassIndex, Index studentIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(moduleClassIndex, studentIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student studentToLink \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassToLink \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d createModifiedModuleClass(moduleClassToLink, studentToLink);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.setModuleClass(moduleClassToLink, modifiedModuleClass);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(new SameModuleClassPredicate(modifiedModuleClass));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(new StudentInUuidCollectionPredicate(modifiedModuleClass.getStudentUuids()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_LINK_SUCCESS, studentToLink.getName(), moduleClassToLink);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof LinkCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((LinkCommand) other).studentIndex)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((LinkCommand) other).moduleClassIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static ModuleClass createModifiedModuleClass(ModuleClass moduleClassToLink, Student studentToLink)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert moduleClassToLink !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert studentToLink !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UUID studentUuid \u003d studentToLink.getUuid();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (moduleClassToLink.hasStudentUuid(studentUuid)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_LINK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name moduleClassName \u003d moduleClassToLink.getName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d new HashSet\u003c\u003e(moduleClassToLink.getStudentUuids());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentsIds.add(studentUuid);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d moduleClassToLink.getLessons();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, lessons);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Lists all students and classes to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all students and classes.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 6,
      "junlong4321": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListModuleClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Lists all classes to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListModuleClassCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-class\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all classes.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 23,
      "junlong4321": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListStudentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Lists all students to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListStudentCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-student\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_LIST_ALL_SUCCESS \u003d \"Listed all students.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_ALL_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return (other instanceof ListStudentCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 9,
      "dextertanyj": 11,
      "ypinhsuan": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListStudentInClassCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.StudentInUuidCollectionPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Lists all students of a class to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListStudentInClassCommand extends ListStudentCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists students in a class or \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"all students if no class is specified.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Parameters: \" + \"[\" + PREFIX_CLASS_INDEX + \"CLASS_INDEX]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CLASS_INDEX + \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_LIST_CLASS_SPECIFIC_SUCCESS \u003d \"Listed all students in %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a ListStudentInClassCommand to list students in the class displayed at the specified index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ListStudentInClassCommand(Index moduleClassIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(moduleClassIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Collection\u003cUUID\u003e studentUuids \u003d moduleClass.getStudentUuids();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(new StudentInUuidCollectionPredicate(studentUuids));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LIST_CLASS_SPECIFIC_SUCCESS, moduleClass));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof ListStudentInClassCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((ListStudentInClassCommand) other).moduleClassIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Redoes the most recent undone {@code Command}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully redone: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_NO_PREVIOUS_COMMAND \u003d \"There are no commands to redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!model.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PREVIOUS_COMMAND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandMessage \u003d model.redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, commandMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Clears all data in the student manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All data in Tutor\u0027s Pet have been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.setTutorsPet(new TutorsPet());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ypinhsuan": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Undoes the most recent undoable {@code Command}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully undone: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_NO_PREVIOUS_COMMAND \u003d \"There are no commands to undo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!model.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(MESSAGE_NO_PREVIOUS_COMMAND);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String commandMessage \u003d model.undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, commandMessage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnlinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.SameModuleClassPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.StudentInUuidCollectionPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Unlinks an existing student from an existing class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UnlinkCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unlink\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \": Unlinks the student identified by the index number used in the displayed student list from \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"the class identified by the index number used in the displayed class list.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"STUDENT_INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"CLASS_INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_STUDENT_INDEX + \"1\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + PREFIX_CLASS_INDEX + \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_UNLINK_SUCCESS \u003d \"Unlinked %1$s from %2$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_MISSING_LINK \u003d \"This student is not linked to this class.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index moduleClassIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Index studentIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param moduleClassIndex in the filtered class list to unlink."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param studentIndex in the filtered student list to unlink."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public UnlinkCommand(Index moduleClassIndex, Index studentIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(studentIndex, moduleClassIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.moduleClassIndex \u003d moduleClassIndex;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.studentIndex \u003d studentIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cStudent\u003e lastShownStudentList \u003d model.getFilteredStudentList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e lastShownModuleClassList \u003d model.getFilteredModuleClassList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (studentIndex.getZeroBased() \u003e\u003d lastShownStudentList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (moduleClassIndex.getZeroBased() \u003e\u003d lastShownModuleClassList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student studentToUnlink \u003d lastShownStudentList.get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassToUnlink \u003d lastShownModuleClassList.get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d createModifiedModuleClass(moduleClassToUnlink, studentToUnlink);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.setModuleClass(moduleClassToUnlink, modifiedModuleClass);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(new SameModuleClassPredicate(modifiedModuleClass));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(new StudentInUuidCollectionPredicate(modifiedModuleClass.getStudentUuids()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String message \u003d String.format(MESSAGE_UNLINK_SUCCESS, studentToUnlink.getName(), moduleClassToUnlink);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(message);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof UnlinkCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 studentIndex.equals(((UnlinkCommand) other).studentIndex)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 moduleClassIndex.equals(((UnlinkCommand) other).moduleClassIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static ModuleClass createModifiedModuleClass(ModuleClass moduleClassToUnlink, Student studentToUnlink)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert moduleClassToUnlink !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert studentToUnlink !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UUID studentUuid \u003d studentToUnlink.getUuid();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(moduleClassToUnlink.hasStudentUuid(studentUuid))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_LINK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name moduleClassName \u003d moduleClassToUnlink.getName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d new HashSet\u003c\u003e(moduleClassToUnlink.getStudentUuids());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentsIds.remove(studentUuid);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d moduleClassToUnlink.getLessons();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, lessons);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewHistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.StateRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Lists all recorded {@code Command}s to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ViewHistoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view-history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String CURRENT_INDICATOR \u003d \"\u003e \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_TEMPLATE \u003d \"History:%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StateRecords stateRecords \u003d model.viewStateRecords();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new CommandResult(createMessage(stateRecords));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private String createMessage(StateRecords stateRecords) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert stateRecords !\u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int currentStateIndex \u003d stateRecords.getCurrentIndex();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int stateCount \u003d stateRecords.getStateRecords().size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert stateCount !\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StringBuilder summary \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d stateCount - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            summary.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (i \u003d\u003d currentStateIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                summary.append(CURRENT_INDICATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            summary.append(stateRecords.getStateRecords().get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return String.format(MESSAGE_TEMPLATE, summary.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and creates a new AddAttendanceCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddAttendanceCommandParser implements Parser\u003cAddAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAttendanceCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * and returns an AddAttendanceCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public AddAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        PREFIX_WEEK, PREFIX_PARTICIPATION_SCORE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                PREFIX_WEEK, PREFIX_PARTICIPATION_SCORE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            lessonIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LESSON_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week \u003d ParserUtil.parseWeek(argMultimap.getValue(PREFIX_WEEK).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int participationScore \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ParserUtil.parseParticipationScore(argMultimap.getValue(PREFIX_PARTICIPATION_SCORE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d new Attendance(participationScore);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week, attendance);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_OCCURRENCES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Parses input arguments and creates a new AddLessonCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class AddLessonCommandParser implements Parser\u003cAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * and returns an AddLessonCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_DAY,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_VENUE, PREFIX_NUMBER_OF_OCCURRENCES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // parse moduleClass index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        boolean isModuleClassIndexPresent \u003d argMultimap.getValue(PREFIX_CLASS_INDEX).isPresent();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!isModuleClassIndexPresent) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // parse lesson data values"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_VENUE, PREFIX_NUMBER_OF_OCCURRENCES)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        NumberOfOccurrences numberOfOccurrences \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ParserUtil.parseNumberOfOccurrences(argMultimap.getValue(PREFIX_NUMBER_OF_OCCURRENCES).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new Lesson(startTime, endTime, day, numberOfOccurrences, venue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new AddLessonCommand(moduleClassIndex, lesson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "junlong4321": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleClassCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.AddModuleClassCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new AddModuleClassCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddModuleClassCommandParser implements Parser\u003cAddModuleClassCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleClassCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and returns an AddModuleClassCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AddModuleClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    AddModuleClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new AddModuleClassCommand(moduleClass);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "dextertanyj": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new AddStudentCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class AddStudentCommandParser implements Parser\u003cAddStudentCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddStudentCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * and returns an AddStudentCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public AddStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Telegram telegram \u003d ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Student student \u003d new Student(name, telegram, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return new AddStudentCommand(student);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "ruixuantan": 6,
      "dextertanyj": 4,
      "ypinhsuan": 9,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final Prefix PREFIX_TELEGRAM \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Prefix PREFIX_CLASS_INDEX \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Prefix PREFIX_STUDENT_INDEX \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Prefix PREFIX_NUMBER_OF_OCCURRENCES \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Prefix PREFIX_LESSON_INDEX \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Prefix PREFIX_WEEK \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPATION_SCORE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "dextertanyj": 3,
      "ruixuantan": 2,
      "junlong4321": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Parses input arguments and creates a new DeleteAttendanceCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class DeleteAttendanceCommandParser implements Parser\u003cDeleteAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAttendanceCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * and returns an DeleteAttendanceCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public DeleteAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        PREFIX_WEEK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                PREFIX_WEEK)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            lessonIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LESSON_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week week \u003d ParserUtil.parseWeek(argMultimap.getValue(PREFIX_WEEK).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and creates a new DeleteLessonCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteLessonCommandParser implements Parser\u003cDeleteLessonCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the DeleteLessonCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * and returns a DeleteLessonCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public DeleteLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isModuleClassIndexPresent \u003d argMultimap.getValue(PREFIX_CLASS_INDEX).isPresent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        boolean isLessonIndexPresent \u003d argMultimap.getValue(PREFIX_LESSON_INDEX).isPresent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!isModuleClassIndexPresent || !isLessonIndexPresent) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            lessonIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LESSON_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new DeleteLessonCommand(moduleClassIndex, lessonIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteModuleClassCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleClassCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleClassCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteModuleClassCommandParser implements Parser\u003cDeleteModuleClassCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleClassCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and returns a DeleteModuleClassCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DeleteModuleClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new DeleteModuleClassCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleClassCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new DeleteStudentCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DeleteStudentCommandParser implements Parser\u003cDeleteStudentCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteStudentCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * and returns a DeleteStudentCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public DeleteStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new DeleteStudentCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ypinhsuan": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Parses input arguments and create a new EditLessonCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonCommandParser implements Parser\u003cEditLessonCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditLessonCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * and returns an EditLessonCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        PREFIX_DAY, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_VENUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index lessonIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isModuleClassIndexPresent \u003d argMultimap.getValue(PREFIX_CLASS_INDEX).isPresent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        boolean isLessonIndexPresent \u003d argMultimap.getValue(PREFIX_LESSON_INDEX).isPresent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!isModuleClassIndexPresent || !isLessonIndexPresent) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            lessonIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LESSON_INDEX).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLessonCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor editLessonDescriptor \u003d new EditLessonCommand.EditLessonDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            editLessonDescriptor.setDay(ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            editLessonDescriptor.setStartTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            editLessonDescriptor.setEndTime(ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            editLessonDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new ParseException(EditLessonCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new EditLessonCommand(moduleClassIndex, lessonIndex, editLessonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditModuleClassCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and create a new EditModuleClassCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassCommandParser implements Parser\u003cEditModuleClassCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditModuleClassCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * and returns an EditModuleClassCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleClassCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor editModuleClassDescriptor \u003d new EditModuleClassCommand.EditModuleClassDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            editModuleClassDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!editModuleClassDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(EditModuleClassCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new EditModuleClassCommand(index, editModuleClassDescriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 47,
      "junlong4321": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new EditStudentCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentCommandParser implements Parser\u003cEditStudentCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditStudentCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * and returns an EditStudentCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TELEGRAM, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentDescriptor editStudentDescriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            editStudentDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TELEGRAM).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            editStudentDescriptor.setTelegram(ParserUtil.parseTelegram(argMultimap.getValue(PREFIX_TELEGRAM).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            editStudentDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editStudentDescriptor::setTags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!editStudentDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new ParseException(EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return new EditStudentCommand(index, editStudentDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 4,
      "dextertanyj": 3,
      "ypinhsuan": 15,
      "junlong4321": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindAttendanceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindAttendanceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and creates a new FindAttendanceCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindAttendanceCommandParser implements Parser\u003cFindAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAttendanceCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * and returns a FindAttendanceCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        PREFIX_WEEK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASS_INDEX, PREFIX_LESSON_INDEX, PREFIX_STUDENT_INDEX,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                PREFIX_WEEK)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    FindAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            lessonIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_LESSON_INDEX).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week \u003d ParserUtil.parseWeek(argMultimap.getValue(PREFIX_WEEK).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new FindAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindModuleClassCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindModuleClassCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and creates a new FindModuleClassCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindModuleClassCommandParser implements Parser\u003cFindModuleClassCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindModuleClassCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * and returns a FindModuleClassCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public FindModuleClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    FindModuleClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new FindModuleClassCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Parses input arguments and creates a new FindStudentCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class FindStudentCommandParser implements Parser\u003cFindStudentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindStudentCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * and returns a FindStudentCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public FindStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new FindStudentCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "dextertanyj": 3,
      "ypinhsuan": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LinkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new LinkCommandParser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class LinkCommandParser implements Parser\u003cLinkCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LinkCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and returns a LinkCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public LinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT_INDEX, PREFIX_CLASS_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isStudentIndexPresent \u003d argMultimap.getValue(PREFIX_STUDENT_INDEX).isPresent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isModuleClassIndexPresent \u003d argMultimap.getValue(PREFIX_CLASS_INDEX).isPresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!isStudentIndexPresent || !isModuleClassIndexPresent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LinkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new LinkCommand(moduleClassIndex, studentIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListStudentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ListStudentInClassCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new ListStudentCommandParser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListStudentCommandParser implements Parser\u003cListStudentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListStudentCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and returns a ListStudentCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ListStudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CLASS_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASS_INDEX).isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListStudentCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Index moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListStudentInClassCommand(moduleClassIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListStudentInClassCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Time format provided is invalid.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Parses a {@code String telegram} into a {@code Telegram}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws ParseException if the given {@code telegram} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Telegram parseTelegram(String telegram) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(telegram);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String trimmedTelegram \u003d telegram.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!Telegram.isValidTelegram(trimmedTelegram)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new ParseException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Telegram(trimmedTelegram);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses a {@code String day} into a {@code Day}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Characters will be capitalized."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String trimmedDay \u003d day.trim().toUpperCase();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day parsedDay;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            parsedDay \u003d Day.valueOf(trimmedDay);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return parsedDay;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalTime}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static LocalTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime parsedTime;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            parsedTime \u003d LocalTime.parse(trimmedTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return parsedTime;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses a {@code String venue} into a {@code Venue}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static Venue parseVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!Venue.isValidVenue(trimmedVenue)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new Venue(trimmedVenue);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Parses a {@code String numberOfOccurrences} into a {@code NumberOfOccurrences}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws ParseException if the given {@code numberOfOccurrences} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static NumberOfOccurrences parseNumberOfOccurrences(String numberOfOccurrences) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(numberOfOccurrences);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String trimmedNumberOfOccurrences \u003d numberOfOccurrences.trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        int occurrences;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            occurrences \u003d Integer.parseInt(trimmedNumberOfOccurrences);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(NumberOfOccurrences.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!NumberOfOccurrences.isValidNumberOfOccurrences(occurrences)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new ParseException(NumberOfOccurrences.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new NumberOfOccurrences(occurrences);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses a {@code String week} into a {@code Week}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the given {@code week} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static Week parseWeek(String week) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(week);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String trimmedWeek \u003d week.trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index weekIndex;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            weekIndex \u003d ParserUtil.parseIndex(trimmedWeek);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!Week.isValidWeek(weekIndex)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new Week(weekIndex);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses a {@code String participationScore} into a {@code int}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @throws ParseException if the given {@code participationScore} is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static int parseParticipationScore(String participationScore) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(participationScore);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String trimmedScore \u003d participationScore.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        int checkedScore;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            checkedScore \u003d Integer.parseInt(trimmedScore);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!Attendance.isValidParticipationScore(checkedScore)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return checkedScore;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 58,
      "dextertanyj": 2,
      "ruixuantan": 10,
      "ypinhsuan": 1,
      "junlong4321": 88,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ average\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "ypinhsuan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TutorsPetParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.AddModuleClassCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.ClearModuleClassCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ClearStudentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleClassCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.FindAttendanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindModuleClassCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.ListModuleClassCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UnlinkCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ViewHistoryCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TutorsPetParser {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @param userInput full user input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case AddStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new AddStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case ListStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ListStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case EditStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new EditStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case DeleteStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new DeleteStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case ClearStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new ClearStudentCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case FindStudentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new FindStudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case AddModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new AddModuleClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case ListModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new ListModuleClassCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        case EditModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new EditModuleClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case DeleteModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new DeleteModuleClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        case ClearModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new ClearModuleClassCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        case FindModuleClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new FindModuleClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case LinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new LinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case UnlinkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new UnlinkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            return new AddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        case EditLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new EditLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        case DeleteLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new DeleteLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        case AddAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return new AddAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        case DeleteAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            return new DeleteAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        case FindAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            return new FindAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case ViewHistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new ViewHistoryCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        case ResetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new ResetCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 21,
      "dextertanyj": 29,
      "ruixuantan": 14,
      "ypinhsuan": 24,
      "junlong4321": 12,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnlinkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UnlinkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Parses input arguments and creates a new UnlinkCommandParser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UnlinkCommandParser implements Parser\u003cUnlinkCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnlinkCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and returns a UnlinkCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public UnlinkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STUDENT_INDEX, PREFIX_CLASS_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isStudentIndexPresent \u003d argMultimap.getValue(PREFIX_STUDENT_INDEX).isPresent();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        boolean isModuleClassIndexPresent \u003d argMultimap.getValue(PREFIX_CLASS_INDEX).isPresent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!isStudentIndexPresent || !isModuleClassIndexPresent) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            studentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_STUDENT_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            moduleClassIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLASS_INDEX).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlinkCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new UnlinkCommand(moduleClassIndex, studentIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/util/LessonModificationUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.AddAttendanceCommand.MESSAGE_DUPLICATE_ATTENDANCE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.DeleteAttendanceCommand.MESSAGE_MISSING_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Contains utility methods for modifying {@code Attendances} in {@code Lessons}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class LessonModificationUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Adds {@code attendanceToAdd} to {@code targetLesson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * All existing {@code Attendance}s in {@code targetLesson} are copied to the new {@code Lesson}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws CommandException if an {@code Attendance} already exists for the {@code targetStudent}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * in the {@code targetWeek}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static Lesson addLessonToAttendance("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Lesson targetLesson, Student targetStudent, Week targetWeek, Attendance attendanceToAdd)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetLesson, targetStudent, targetWeek, attendanceToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (targetLesson.getAttendanceRecordList().hasAttendance(targetStudent, targetWeek)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTENDANCE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecords \u003d targetLesson.getAttendanceRecordList().getAttendanceRecordList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e record \u003d targetLesson.getAttendanceRecordList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .getAttendanceRecord(targetWeek).getAttendanceRecord();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e updatedRecord \u003d new HashMap\u003c\u003e(record);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedRecord.put(targetStudent.getUuid(), attendanceToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assert updatedRecord.size() \u003d\u003d record.size() + 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord updatedAttendanceRecord \u003d new AttendanceRecord(updatedRecord);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e updatedAttendanceRecords \u003d new ArrayList\u003c\u003e(attendanceRecords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedAttendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), updatedAttendanceRecord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecordList updatedAttendanceRecordList \u003d new AttendanceRecordList(updatedAttendanceRecords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // unchanged lesson fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime startTime \u003d targetLesson.getStartTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime endTime \u003d targetLesson.getEndTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day day \u003d targetLesson.getDay();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        NumberOfOccurrences numberOfOccurrences \u003d targetLesson.getNumberOfOccurrences();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Venue venue \u003d targetLesson.getVenue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new Lesson(startTime, endTime, day, numberOfOccurrences, venue, updatedAttendanceRecordList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Removes the {@code Attendance} of the {@code targetStudent} in the {@code targetWeek} from the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * {@code targetLesson}. All other existing {@code Attendance}s in {@code targetLesson} are copied"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * to the new {@code Lesson}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws CommandException if the {@code Attendance} of the {@code targetStudent} in the {@code targetWeek}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * does not exist."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static Lesson deleteAttendanceFromLesson("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Lesson targetLesson, Student targetStudent, Week targetWeek) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetLesson, targetStudent, targetWeek);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecords \u003d targetLesson.getAttendanceRecordList().getAttendanceRecordList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e record \u003d targetLesson.getAttendanceRecordList()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .getAttendanceRecord(targetWeek).getAttendanceRecord();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e updatedRecord \u003d new HashMap\u003c\u003e(record);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!updatedRecord.containsKey(targetStudent.getUuid())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ATTENDANCE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // delete attendance record"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedRecord.remove(targetStudent.getUuid());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assert updatedRecord.size() \u003d\u003d record.size() - 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord updatedAttendanceRecord \u003d new AttendanceRecord(updatedRecord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e updatedAttendanceRecords \u003d new ArrayList\u003c\u003e(attendanceRecords);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedAttendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), updatedAttendanceRecord);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecordList updatedAttendanceRecordList \u003d new AttendanceRecordList(updatedAttendanceRecords);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // unchanged lesson fields"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime startTime \u003d targetLesson.getStartTime();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime endTime \u003d targetLesson.getEndTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day day \u003d targetLesson.getDay();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        NumberOfOccurrences numberOfOccurrences \u003d targetLesson.getNumberOfOccurrences();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Venue venue \u003d targetLesson.getVenue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new Lesson(startTime, endTime, day, numberOfOccurrences, venue, updatedAttendanceRecordList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/util/ModuleClassModificationUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.AddLessonCommand.MESSAGE_EXISTING_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.EditLessonCommand.MESSAGE_DUPLICATE_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Contains utility methods for modifying {@code Lessons} in {@code ModuleClass}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class ModuleClassModificationUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Adds {@code lessonToAdd} to {@code moduleClassToAddTo}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * All existing {@code Lesson}s in {@code moduleClassToAddTo} are copied to the new {@code ModuleClass}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws CommandException if the {@code lessonToAdd} already exists."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static ModuleClass addLessonToModuleClass("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            ModuleClass targetModuleClass, Lesson lessonToAdd)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetModuleClass, lessonToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (targetModuleClass.hasLesson(lessonToAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_LESSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Name moduleClassName \u003d targetModuleClass.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d targetModuleClass.getStudentUuids();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(targetModuleClass.getLessons());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, lessons);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Replaces the {@code lessonToEdit} with {@code editedLesson} in {@code targetModuleClass}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * All other existing {@code Lesson}s in {@code targetModuleClass} are copied to the new {@code ModuleClass}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws CommandException if the {@code editedLesson} already exists."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static ModuleClass addEditedLessonToModuleClass("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            ModuleClass targetModuleClass, Lesson lessonToEdit, Lesson editedLesson) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetModuleClass, lessonToEdit, editedLesson, targetModuleClass.hasLesson(lessonToEdit));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 targetModuleClass.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Name moduleClassName \u003d targetModuleClass.getName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d new HashSet\u003c\u003e(targetModuleClass.getStudentUuids());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e listOfLessons \u003d targetModuleClass.getLessons();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e editedListOfLessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (Lesson lesson : listOfLessons) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (lesson.equals(lessonToEdit)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                editedListOfLessons.add(editedLesson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                editedListOfLessons.add(lesson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assert listOfLessons.size() \u003d\u003d editedListOfLessons.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, editedListOfLessons);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Removes the {@code lessonToDelete} from the {@code targetModuleClass}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * All other existing {@code Lesson}s in the {@code targetModuleClass} are copied to the new {@code ModuleClass}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static ModuleClass deleteLessonFromModuleClass("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            ModuleClass targetModuleClass, Lesson lessonToDelete) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetModuleClass, lessonToDelete, targetModuleClass.hasLesson(lessonToDelete));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Name moduleClassName \u003d targetModuleClass.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d new HashSet\u003c\u003e(targetModuleClass.getStudentUuids());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e listOfLessons \u003d targetModuleClass.getLessons();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e editedListOfLessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (Lesson lesson : listOfLessons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (!lesson.equals(lessonToDelete)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                editedListOfLessons.add(lesson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assert listOfLessons.size() - 1 \u003d\u003d editedListOfLessons.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, editedListOfLessons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Updates {@code lessons} in {@code moduleClass} and creates a modified {@code moduleClass} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static ModuleClass addModifiedLessonToModuleClass("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            ModuleClass targetModuleClass, Index lessonToEditIndex, Lesson lessonToUpdate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireAllNonNull(targetModuleClass, lessonToEditIndex, lessonToUpdate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Name moduleClassName \u003d targetModuleClass.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e studentsIds \u003d targetModuleClass.getStudentUuids();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(targetModuleClass.getLessons());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        lessons.set(lessonToEditIndex.getZeroBased(), lessonToUpdate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClassName, studentsIds, lessons);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Predicate\u003cStudent\u003e PREDICATE_SHOW_ALL_STUDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    Predicate\u003cModuleClass\u003e PREDICATE_SHOW_ALL_MODULE_CLASS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the user prefs\u0027 Tutor\u0027s Pet file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Path getTutorsPetFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the user prefs\u0027 Tutor\u0027s Pet file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void setTutorsPetFilePath(Path tutorsPetFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces Tutor\u0027s Pet data with the data in {@code tutorsPet}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void setTutorsPet(ReadOnlyTutorsPet tutorsPet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /** Returns the TutorsPet */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ReadOnlyTutorsPet getTutorsPet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Commits the current Tutor\u0027s Pet state with the associated {@code commitMessage}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    void commit(String commitMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is a {@code Command} that can be undone."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean canUndo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Undoes the most recent undoable {@code Command}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String undo();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is an undone {@code Command} that can be redone."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean canRedo();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Redoes the most recent undone {@code Command}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    String redo();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a summary of all commands currently recorded by this {@code Model}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    StateRecords viewStateRecords();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists in the application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    boolean hasStudent(Student student);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deletes the given {@code Student} and the {@code Student}\u0027s {@code UUID} in all {@code ModuleClass}es."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student must exist in the application."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void deleteStudent(Student target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code student} must not already exist in the application."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces the given student {@code target} with {@code editedStudent}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * application."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void setStudent(Student target, Student editedStudent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deletes all {@code Student}s."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Additionally, removes all {@code Student UUID}s in each {@code ModuleClass}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    void deleteAllStudents();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered student list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ObservableList\u003cStudent\u003e getFilteredStudentList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Updates the filter of the filtered student list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if a ModuleClass with the same identity as {@code moduleClass} exists in the application."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    boolean hasModuleClass(ModuleClass moduleClass);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Deletes the given {@code ModuleClass}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The {@code ModuleClass} must exist in the application."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    void deleteModuleClass(ModuleClass target);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds the given {@code ModuleClass}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code moduleClass} must not already exist in the application."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    void addModuleClass(ModuleClass moduleClass);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Replaces the given {@code ModuleClass} {@code target} with {@code editedModuleClass}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The {@code ModuleClass} identity of {@code editedModuleClass} must not be the same as another existing"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code ModuleClass} in the application."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    void setModuleClass(ModuleClass target, ModuleClass editedModuleClass);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes all {@code ModuleClass}es."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    void deleteAllModuleClasses();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an unmodifiable view of the filtered {@code ModuleClass} list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    ObservableList\u003cModuleClass\u003e getFilteredModuleClassList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Updates the filter of the filtered {@code ModuleClass} list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    void updateFilteredModuleClassList(Predicate\u003cModuleClass\u003e predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 5,
      "dextertanyj": 55,
      "ruixuantan": 7,
      "ypinhsuan": 25,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents the in-memory model of the Tutor\u0027s Pet data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final VersionedTutorsPet versionedTutorsPet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final FilteredList\u003cStudent\u003e filteredStudents;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final FilteredList\u003cModuleClass\u003e filteredModuleClasses;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Initializes a ModelManager with the given tutorsPet and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ModelManager(ReadOnlyTutorsPet tutorsPet, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireAllNonNull(tutorsPet, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        logger.fine(\"Initializing with Tutor\u0027s Pet: \" + tutorsPet + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet \u003d new VersionedTutorsPet(tutorsPet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        filteredStudents \u003d new FilteredList\u003c\u003e(versionedTutorsPet.getStudentList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        filteredModuleClasses \u003d new FilteredList\u003c\u003e(versionedTutorsPet.getModuleClassList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this(new TutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return userPrefs.getTutorsPetFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPetFilePath(Path tutorsPetFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(tutorsPetFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        userPrefs.setTutorsPetFilePath(tutorsPetFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorsPet \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPet(ReadOnlyTutorsPet tutorsPet) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.resetData(tutorsPet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ReadOnlyTutorsPet getTutorsPet() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(commitMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.canUndo();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.canRedo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.redo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public StateRecords viewStateRecords() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.viewStateRecords();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.hasStudent(student);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.addStudent(student);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.deleteStudent(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteAllStudents() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.deleteAllStudents();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.hasModuleClass(moduleClass);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.addModuleClass(moduleClass);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(ModuleClass target, ModuleClass editedModuleClass) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(target, editedModuleClass);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.setModuleClass(target, editedModuleClass);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteModuleClass(ModuleClass target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.deleteModuleClass(target);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllModuleClasses() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.deleteAllModuleClasses();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Student List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Student} backed by the internal list of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code versionedTutorsPet}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return filteredStudents;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        filteredStudents.setPredicate(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ModuleClass List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ObservableList\u003cModuleClass\u003e getFilteredModuleClassList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return filteredModuleClasses;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void updateFilteredModuleClassList(Predicate\u003cModuleClass\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        filteredModuleClasses.setPredicate(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return versionedTutorsPet.equals(other.versionedTutorsPet)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 filteredStudents.equals(other.filteredStudents)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 filteredModuleClasses.equals(other.filteredModuleClasses);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 9,
      "dextertanyj": 68,
      "ruixuantan": 5,
      "ypinhsuan": 29,
      "junlong4321": 9,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTutorsPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Unmodifiable view of Tutor\u0027s Pet"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public interface ReadOnlyTutorsPet {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an unmodifiable view of the ModuleClass list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * This list will not contain any duplicate ModuleClasses."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    ObservableList\u003cModuleClass\u003e getModuleClassList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 7,
      "ypinhsuan": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Path getTutorsPetFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StateRecords.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Represents a summary of currently recorded {@code Commands}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class StateRecords {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cString\u003e stateRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a {@code StateRecords} with the specified {@code currentIndex} and {@code stateRecords}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public StateRecords(int currentIndex, List\u003cString\u003e stateRecords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(currentIndex, stateRecords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.stateRecords \u003d stateRecords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.currentIndex \u003d currentIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int getCurrentIndex() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return currentIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cString\u003e getStateRecords() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return stateRecords;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof StateRecords // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 ((StateRecords) other).getStateRecords().equals(getStateRecords())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 ((StateRecords) other).getCurrentIndex() \u003d\u003d getCurrentIndex());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TutorsPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.UniqueModuleClassList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Wraps all data at the application level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent and .isSameModuleClass comparison)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TutorsPet implements ReadOnlyTutorsPet {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final UniqueModuleClassList moduleClasses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a TutorsPet with no existing data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TutorsPet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        moduleClasses \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a TutorsPet using the Students in the {@code toBeCopied}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public TutorsPet(ReadOnlyTutorsPet toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces the contents of the student list with {@code students}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.students.setStudent(students);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Replaces the contents of the class list with {@code moduleClasses}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code moduleClasses} must not contain duplicate classes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClasses(List\u003cModuleClass\u003e moduleClasses) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.moduleClasses.setModuleClass(moduleClasses);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Resets the existing data of this {@code TutorsPet} with {@code newData}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void resetData(ReadOnlyTutorsPet newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        setModuleClasses(newData.getModuleClassList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    //// student-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if a student with the same identity as {@code student} exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns true if a student with the same UUID as {@code student}\u0027s UUID exists."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean hasStudentUuid(Student student) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return students.containsUuid(student);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Adds a student to the application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student must not already exist in the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces the given student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * application."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deletes {@code student} from this {@code TutorsPet} and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * the {@code UUID} of {@code Student} from all {@code ModuleClass}es."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * {@code student} must exist in the application."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent(Student student) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        moduleClasses.removeUuid(student.getUuid());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        students.remove(student);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes all {@code Student}s from the student manager."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Also deletes all {@code Student UUID}s from each {@code ModuleClass}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllStudents() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClasses.removeAllStudentUuids();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        students.setStudent(new UniqueStudentList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    //// moduleClass-level operations"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if a class with the same identity as {@code moduleClass} exists."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return moduleClasses.contains(moduleClass);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds a class to the application."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The class must not already exist in the application."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        moduleClasses.add(moduleClass);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Replaces the given class {@code target} in the list with {@code editedModuleClass}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code target} must exist in the application."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The class identity of {@code editedModuleClass} must not be the same as another existing class in the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * application."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(ModuleClass target, ModuleClass editedModuleClass) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(editedModuleClass);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        moduleClasses.setModuleClass(target, editedModuleClass);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Deletes {@code moduleClass} from this {@code TutorsPet}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * {@code moduleClass} must exist in the application."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        moduleClasses.remove(moduleClass);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Deletes all {@code ModuleClass}es from the student manager."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllModuleClasses() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClasses.setModuleClass(new UniqueModuleClassList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" students \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + moduleClasses.asUnmodifiableObservableList().size() + \" classes\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ObservableList\u003cModuleClass\u003e getModuleClassList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return moduleClasses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof TutorsPet // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 students.equals(((TutorsPet) other).students)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 moduleClasses.equals((((TutorsPet) other).moduleClasses)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Objects.hash(students, moduleClasses);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 12,
      "dextertanyj": 66,
      "ruixuantan": 16,
      "ypinhsuan": 30,
      "junlong4321": 12,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Path tutorsPetFilePath \u003d Paths.get(\"data\" , \"tutorspet.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        setTutorsPetFilePath(newUserPrefs.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return tutorsPetFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPetFilePath(Path tutorsPetFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(tutorsPetFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.tutorsPetFilePath \u003d tutorsPetFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 tutorsPetFilePath.equals(o.tutorsPetFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return Objects.hash(guiSettings, tutorsPetFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + tutorsPetFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 10,
      "junlong4321": 3,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTutorsPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.RedoStateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.UndoStateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class VersionedTutorsPet extends TutorsPet {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INITIAL_COMMIT_MESSAGE \u003d \"Loaded save data!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cTutorsPetState\u003e tutorsPetStateList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int statePointer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a {@code VersionedTutorsPet} using the Students in the {@code toBeCopied}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public VersionedTutorsPet(ReadOnlyTutorsPet toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState initialState \u003d new TutorsPetState(INITIAL_COMMIT_MESSAGE, this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetStateList.add(initialState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        statePointer \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Saves the current state of the {@code TutorsPet} with the associated {@code commitMessage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the {@code commitMessage} is null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit(String commitMessage) throws NullPointerException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(commitMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        pruneStates();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState state \u003d new TutorsPetState(commitMessage, this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetStateList.add(state);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        statePointer++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Undoes the most recent undoable command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the commit message of the undone command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws UndoStateException if there are no commands to undo."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String undo() throws UndoStateException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new UndoStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState currentState \u003d tutorsPetStateList.get(statePointer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState targetState \u003d tutorsPetStateList.get(statePointer - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        resetData(targetState.stateSnapshot);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        statePointer--;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return currentState.commitMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Redoes the most recent undone command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @return the commit message of the redone command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws RedoStateException if there are no commands to redo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String redo() throws RedoStateException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new RedoStateException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState targetState \u003d tutorsPetStateList.get(statePointer + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        resetData(targetState.stateSnapshot);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        statePointer++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return targetState.commitMessage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void pruneStates() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetStateList.subList(statePointer + 1, tutorsPetStateList.size()).clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is a {@code Command} that can be undone."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return statePointer \u003e 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is an undone {@code Command} that can be redone."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return statePointer \u003c tutorsPetStateList.size() - 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a summary of all {@code Command}s currently recorded by this {@code VersionedTutorsPet}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public StateRecords viewStateRecords() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new StateRecords(statePointer, tutorsPetStateList.stream().map(state -\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                state.commitMessage).collect(Collectors.toUnmodifiableList()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof VersionedTutorsPet // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 ((VersionedTutorsPet) other).statePointer \u003d\u003d statePointer"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 ((VersionedTutorsPet) other).tutorsPetStateList.equals(tutorsPetStateList)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 super.equals(other));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private class TutorsPetState {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private String commitMessage;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private ReadOnlyTutorsPet stateSnapshot;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetState(String commitMessage, ReadOnlyTutorsPet stateSnapshot) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            requireAllNonNull(commitMessage, stateSnapshot);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.commitMessage \u003d commitMessage;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.stateSnapshot \u003d new TutorsPet(stateSnapshot);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    || (other instanceof TutorsPetState // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \u0026\u0026 ((TutorsPetState) other).stateSnapshot.equals(stateSnapshot)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    \u0026\u0026 ((TutorsPetState) other).commitMessage.equals(commitMessage));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Attendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a student\u0027s attendance for a particular lesson."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidParticipationScore(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int LOWER_BOUND \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int UPPER_BOUND \u003d 100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String.format(\"The participation score must be a number between %d to %d.\", LOWER_BOUND, UPPER_BOUND);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int participationScore;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Participation score is checked to be valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Attendance(int participationScore) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        checkArgument(isValidParticipationScore(participationScore), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.participationScore \u003d participationScore;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns true if the given score is an integer between 0 and 100."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static boolean isValidParticipationScore(int participationScore) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LOWER_BOUND \u003c\u003d participationScore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 participationScore \u003c\u003d UPPER_BOUND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getParticipationScore() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return participationScore;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Integer.toString(participationScore);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 ((Attendance) other).participationScore \u003d\u003d participationScore);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Objects.hash(participationScore);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/AttendanceRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.AttendanceNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Represents the attendance of students in a single lesson occurrence."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Map\u003cUUID, Attendance\u003e attendances;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendances \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Overloaded constructor method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Requires {@code attendances} to be non null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AttendanceRecord(Map\u003cUUID, Attendance\u003e attendances) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(attendances);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendances \u003d attendances;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Map\u003cUUID, Attendance\u003e getAttendanceRecord() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Collections.unmodifiableMap(attendances);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns the {@code Attendance} of the given {@code Student UUID}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws AttendanceNotFoundException if there is no attendance for the give {@code Student UUID}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Attendance getAttendance(UUID uuid) throws AttendanceNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(uuid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!attendances.containsKey(uuid)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new AttendanceNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return attendances.get(uuid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns true if the {@code AttendanceRecord} contains the given {@code Student UUID}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean hasAttendance(UUID uuid) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return attendances.containsKey(uuid);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                || (other instanceof AttendanceRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 ((AttendanceRecord) other).attendances.equals(attendances));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Objects.hash(attendances);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 6,
      "ruixuantan": 51,
      "dextertanyj": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/AttendanceRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.AttendanceNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.InvalidWeekException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents the attendance records of a {@code Lesson}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains an ordered list of all attendance records."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceRecordList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final List\u003cAttendanceRecord\u003e recordList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Each element in the list is initialized to an empty {@link AttendanceRecord}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AttendanceRecordList(NumberOfOccurrences numberOfOccurrences) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.recordList \u003d Collections.nCopies(numberOfOccurrences.getNumberOfOccurrences(), new AttendanceRecord());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Overloaded constructor method."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Requires {@code recordList} to be non null. Also converts recordList to fixed size."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecordList(List\u003cAttendanceRecord\u003e recordList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(recordList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int size \u003d recordList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.recordList \u003d Arrays.asList(recordList.toArray(new AttendanceRecord[size]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns true if week number is less than the total number of occurrences."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean isWeekContained(Week week) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return week.getZeroBasedWeekIndex() \u003c recordList.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public List\u003cAttendanceRecord\u003e getAttendanceRecordList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Collections.unmodifiableList(recordList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns the {@code Attendance} of a {@code Student} in a particular {@code Week}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Attendance getAttendance(Student student, Week week)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throws InvalidWeekException, AttendanceNotFoundException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!isWeekContained(week)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new InvalidWeekException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UUID studentUuid \u003d student.getUuid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return recordList.get(week.getZeroBasedWeekIndex()).getAttendance(studentUuid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns the {@code AttendanceRecord} of a particular {@code Week}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecord getAttendanceRecord(Week week) throws InvalidWeekException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!isWeekContained(week)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new InvalidWeekException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return recordList.get(week.getZeroBasedWeekIndex());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns true if {@code AttendanceRecordList} contains the {@code Attendance}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * of a {@code Student} in a particular {@code Week}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean hasAttendance(Student student, Week week) throws InvalidWeekException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!isWeekContained(week)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            throw new InvalidWeekException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AttendanceRecord targetAttendanceWeek \u003d recordList.get(week.getZeroBasedWeekIndex());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UUID targetStudentUuid \u003d student.getUuid();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return targetAttendanceWeek.hasAttendance(targetStudentUuid);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                || (other instanceof AttendanceRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 ((AttendanceRecordList) other).recordList.equals(recordList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Objects.hash(recordList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 17,
      "ruixuantan": 85,
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/Week.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a week number."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWeek(Index)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Note that {@code Index} can only accept non negative integers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Week {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int LOWER_BOUND \u003d NumberOfOccurrences.LOWER_BOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int UPPER_BOUND \u003d NumberOfOccurrences.UPPER_BOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String.format(\"The week number must be a number between %d to %d.\", LOWER_BOUND, UPPER_BOUND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Index week;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks that week is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Week(Index week) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        checkArgument(isValidWeek(week), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the given week is an integer between {@link NumberOfOccurrences#LOWER_BOUND}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and {@link NumberOfOccurrences#UPPER_BOUND}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static boolean isValidWeek(Index week) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int weekIndex \u003d week.getOneBased();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return LOWER_BOUND \u003c\u003d weekIndex \u0026\u0026 weekIndex \u003c\u003d UPPER_BOUND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getZeroBasedWeekIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return week.getZeroBased();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getOneBasedWeekIndex() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return week.getOneBased();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Integer.toString(getOneBasedWeekIndex());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                || (other instanceof Week // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 ((Week) other).week.equals(week));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Objects.hash(week);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 64,
      "dextertanyj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/exceptions/AttendanceNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/exceptions/DuplicateAttendanceException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DuplicateAttendanceException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public DuplicateAttendanceException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(\"Operation would result in duplicate student attendance\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attendance/exceptions/InvalidWeekException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class InvalidWeekException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/components/name/HasName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.name;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public interface HasName {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/components/name/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.name;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Represents a Student\u0027s or Class\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "junlong4321": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/components/name/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.name;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Tests that a {@code HasName} object\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NameContainsKeywordsPredicate\u003cT extends HasName\u003e implements Predicate\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean test(T t) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(t.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            || (other instanceof NameContainsKeywordsPredicate // instanceOf handles null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate\u003c?\u003e) other)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/components/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents a Tag in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            + \"spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "ypinhsuan": 1,
      "junlong4321": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exception/RedoStateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class RedoStateException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exception/UndoStateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UndoStateException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.exceptions.InvalidDayException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents the days in a week."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public enum Day {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Days should only contain capital letters.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            + \"For example, only \u0027MONDAY\u0027 and not \u0027Monday\u0027 or \u0027mon\u0027 is allowed.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a {@code Day} object based on the given {@code String}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The {@code String} must be capitalized and be spelt exactly as each enum value."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws InvalidDayException if the {@code String} does not match any of the enum values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static Day createDay(String stringDay) throws InvalidDayException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Day day : values()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (day.toString().equals(stringDay)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                return day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        throw new InvalidDayException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 21,
      "ypinhsuan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents a Lesson."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final NumberOfOccurrences numberOfOccurrences;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final AttendanceRecordList attendanceRecordList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a new lesson with the specified parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Lesson(LocalTime startTime, LocalTime endTime, Day day, NumberOfOccurrences numberOfOccurrences,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                  Venue venue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireAllNonNull(startTime, endTime, day, numberOfOccurrences, venue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.numberOfOccurrences \u003d numberOfOccurrences;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendanceRecordList \u003d new AttendanceRecordList(numberOfOccurrences);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a new lesson with the specified parameters."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Lesson(LocalTime startTime, LocalTime endTime, Day day, NumberOfOccurrences numberOfOccurrences,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                  Venue venue, AttendanceRecordList attendanceRecordList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(startTime, endTime, day, numberOfOccurrences, venue, attendanceRecordList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert attendanceRecordList.getAttendanceRecordList().size() \u003d\u003d numberOfOccurrences.getNumberOfOccurrences();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.numberOfOccurrences \u003d numberOfOccurrences;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendanceRecordList \u003d attendanceRecordList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public NumberOfOccurrences getNumberOfOccurrences() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return numberOfOccurrences;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AttendanceRecordList getAttendanceRecordList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return attendanceRecordList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if both lessons have the same start time, end time, day and venue."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * This defines a weaker notion of equality between two lessons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getDay().equals(getDay())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getVenue().equals(getVenue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if both lessons have same start time, end time, day, number of occurrences and venue."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * This defines a stronger notion of equality between two lessons."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return otherLesson.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getEndTime().equals(getEndTime())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getDay().equals(getDay())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherLesson.getNumberOfOccurrences().equals(getNumberOfOccurrences())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 otherLesson.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 otherLesson.getAttendanceRecordList().equals(getAttendanceRecordList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Objects.hash(startTime, endTime, day, numberOfOccurrences, venue, attendanceRecordList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        builder.append(day)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(TIME_FORMATTER.format(getStartTime()))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(TIME_FORMATTER.format(getEndTime()))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(\" Number of occurrences: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .append(getNumberOfOccurrences());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 33,
      "ypinhsuan": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/NumberOfOccurrences.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents the number of times a lesson occurs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNumberOfOccurrences(int)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class NumberOfOccurrences {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final int LOWER_BOUND \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final int UPPER_BOUND \u003d 52;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d String.format(\"Number of occurrences should be a whole number \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + \"between %d and %d.\", LOWER_BOUND, UPPER_BOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Constructs a {@code NumberOfOccurrences}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @param value A valid number of occurrences."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public NumberOfOccurrences(int value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        checkArgument(isValidNumberOfOccurrences(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if the given value is between valid range."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static boolean isValidNumberOfOccurrences(int value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return value \u003e\u003d LOWER_BOUND \u0026\u0026 value \u003c\u003d UPPER_BOUND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public int getNumberOfOccurrences() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof NumberOfOccurrences // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((NumberOfOccurrences) other).value); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 5,
      "ypinhsuan": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Venue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents the Venue of a Lesson."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String SPECIAL_CHARACTERS \u003d \"-.~%:/?#[]@!$\u0026\u0027()*+,;\u003d\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Venues should only contain alphanumeric characters, spaces,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + \" these special characters, excluding the parentheses, (\" + SPECIAL_CHARACTERS + \")\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            + \" and should not be blank.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w][\\\\w-.~%:/?#\\\\[\\\\]@!$\u0026\u0027()*+,;\u003d ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Constructs a {@code Venue}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @param venue A valid venue."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if the given String is a valid venue."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static boolean isValidVenue(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 venue.equals(((Venue) other).venue)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return venue.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Signals that the operation will result in duplicate Lessons."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        super(\"Operation would result in duplicate lessons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/InvalidDayException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class InvalidDayException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Signals that the operation is unable to find the specified Lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleclass/ModuleClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.HasName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Represents a Class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains information on the students enrolled in this class identified by their {@code UUID}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Students must exist in the student manager."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains {@link Lesson}s (if any)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Guarantees: details are present and not null, field values are immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * @see Student#getUuid()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ModuleClass implements HasName {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final Set\u003cUUID\u003e studentUuids \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Name must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClass(Name name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClass(Name name, Set\u003cUUID\u003e studentUuids, List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(name, studentUuids, lessons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.studentUuids.addAll(studentUuids);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an immutable set of student {@code UUID}s, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public Set\u003cUUID\u003e getStudentUuids() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return Collections.unmodifiableSet(studentUuids);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an immutable ordered list of {@code lessons}, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public List\u003cLesson\u003e getLessons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Collections.unmodifiableList(lessons);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the class contains an equivalent student {@code UUID} as the given argument."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the given student {@code UUID} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasStudentUuid(UUID toCheck) throws NullPointerException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return studentUuids.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns true if the class contains the same {@code lesson} as the given argument."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws NullPointerException if the given {@code lesson} is null."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean hasLesson(Lesson toCheck) throws NullPointerException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return lessons.stream().anyMatch(toCheck::isSameLesson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if both classes have the same name."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * This defines a weaker notion of equality between two classes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean isSameModuleClass(ModuleClass otherModuleClass) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (otherModuleClass \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return otherModuleClass !\u003d null \u0026\u0026 otherModuleClass.getName().equals(getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if both classes have the same name, students and lessons."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * This defines a stronger notion of equality between two classes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(other instanceof ModuleClass)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass otherModuleClass \u003d (ModuleClass) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return otherModuleClass.getName().equals(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 otherModuleClass.getStudentUuids().equals(getStudentUuids())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 otherModuleClass.getLessons().equals(getLessons());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return Objects.hash(name, studentUuids, lessons);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return getName().toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 122,
      "ruixuantan": 2,
      "junlong4321": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleclass/SameModuleClassPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Tests that a {@code ModuleClass}\u0027s identity is the same as the target {@code ModuleClass}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class SameModuleClassPredicate implements Predicate\u003cModuleClass\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ModuleClass target;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public SameModuleClassPredicate(ModuleClass target) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean test(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return moduleClass.isSameModuleClass(target);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof SameModuleClassPredicate // handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 target.equals(((SameModuleClassPredicate) other)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .target)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleclass/UniqueModuleClassList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.DuplicateModuleClassException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.ModuleClassNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A list of {@code ModuleClass} that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A {@code ModuleClass} is considered unique by comparing using {@code ModuleClass#isSameModuleClass(ModuleClass)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * As such, adding and updating of {@code ModuleClass} uses ModuleClass#isSameModuleClass(ModuleClass) for equality"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * so as to ensure that the {@code ModuleClass} being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * UniqueModuleClassList. However, the removal of a {@code ModuleClass} uses ModuleClass#equals(Object) so as to ensure"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * that the {@code ModuleClass} with exactly the same fields will be removed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * @see ModuleClass#isSameModuleClass(ModuleClass)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UniqueModuleClassList implements Iterable\u003cModuleClass\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final ObservableList\u003cModuleClass\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final ObservableList\u003cModuleClass\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if the list contains an equivalent {@code ModuleClass} as the given argument."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the given argument is null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean contains(ModuleClass toCheck) throws NullPointerException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModuleClass);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds a {@code ModuleClass} to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The {@code ModuleClass} must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the given argument is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DuplicateModuleClassException if the identity of {@code toAdd} already exists in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void add(ModuleClass toAdd) throws NullPointerException, DuplicateModuleClassException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DuplicateModuleClassException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Replaces the {@code ModuleClass} {@code target} in the list with {@code editedModuleClass}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The {@code ModuleClass} identity of {@code editedModuleClass} must not be the same"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * as another existing {@code ModuleClass} in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the given argument is null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ModuleClassNotFoundException if {@code target} does not exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DuplicateModuleClassException if the identity of {@code editedModuleClass} already exists in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(ModuleClass target, ModuleClass editedModuleClass)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws NullPointerException, ModuleClassNotFoundException, DuplicateModuleClassException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(target, editedModuleClass);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ModuleClassNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!target.isSameModuleClass(editedModuleClass) \u0026\u0026 contains(editedModuleClass)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DuplicateModuleClassException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        internalList.set(index, editedModuleClass);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(UniqueModuleClassList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Replaces the contents of this list with {@code moduleClasses}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code moduleClasses} must not contain duplicate {@code ModuleClass}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if any of the given arguments are null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws DuplicateModuleClassException if {@code moduleClasses} contains duplicate {@code ModuleClass}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(List\u003cModuleClass\u003e moduleClasses)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws NullPointerException, DuplicateModuleClassException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireAllNonNull(moduleClasses);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!moduleClassesAreUnique(moduleClasses)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new DuplicateModuleClassException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        internalList.setAll(moduleClasses);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Removes the equivalent {@code ModuleClass} from the list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * The {@code ModuleClass} must exist in the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NullPointerException if the given argument is null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws ModuleClassNotFoundException if {@code toRemove} does not exist in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void remove(ModuleClass toRemove) throws NullPointerException, ModuleClassNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new ModuleClassNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Removes the specified {@code UUID} from all {@code ModuleClass}es in the class list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeUuid(UUID uuidToRemove) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(uuidToRemove);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        internalList.setAll(internalList.stream()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .map(moduleClass -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    Set\u003cUUID\u003e modifiedUuids \u003d new HashSet\u003c\u003e(moduleClass.getStudentUuids());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    modifiedUuids.remove(uuidToRemove);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return new ModuleClass(moduleClass.getName(), modifiedUuids, moduleClass.getLessons());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                })"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Removes all {@code Student UUID}s from every {@code ModuleClass} in the class list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeAllStudentUuids() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        internalList.setAll(internalList.stream()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .map(moduleClass -\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        new ModuleClass(moduleClass.getName(), Collections.emptySet(), moduleClass.getLessons()))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ObservableList\u003cModuleClass\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Iterator\u003cModuleClass\u003e iterator() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                || (other instanceof UniqueModuleClassList // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleClassList) other).internalList));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if {@code moduleClasses} contains only unique {@code ModuleClass}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private boolean moduleClassesAreUnique(List\u003cModuleClass\u003e moduleClasses) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleClasses.size() - 1; i++) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            for (int j \u003d i + 1; j \u003c moduleClasses.size(); j++) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                if (moduleClasses.get(i).isSameModuleClass(moduleClasses.get(j))) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 161,
      "ruixuantan": 25,
      "junlong4321": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleclass/exceptions/DuplicateModuleClassException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DuplicateModuleClassException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public DuplicateModuleClassException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        super(\"Operation would result in duplicate classes\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleclass/exceptions/ModuleClassNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ModuleClassNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents a Student\u0027s email."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 3,
      "junlong4321": 1,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.HasName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents a Student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class Student implements HasName {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final UUID uuid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final Telegram telegram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Creates a new student with a randomly generated UUID."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Student(Name name, Telegram telegram, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireAllNonNull(name, telegram, email, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Overloads student constructor so that we can return a new student"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * with the same UUID to ensure object immutability."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Student(UUID uuid, Name name, Telegram telegram, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireAllNonNull(uuid, name, telegram, email, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public UUID getUuid() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return uuid;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Telegram getTelegram() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return telegram;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 (otherStudent.getTelegram().equals(getTelegram()) || otherStudent.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns true if both students have the same UUID."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean hasSameUuid(Student otherStudent) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                \u0026\u0026 otherStudent.getUuid().equals(getUuid());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return otherStudent.getName().equals(getName())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 otherStudent.getTelegram().equals(getTelegram())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherStudent.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 otherStudent.getTags().equals(getTags());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return Objects.hash(uuid, name, telegram, email, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .append(\" Telegram: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .append(getTelegram())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 7,
      "ruixuantan": 16,
      "ypinhsuan": 15,
      "junlong4321": 28,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/StudentInUuidCollectionPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Tests that a {@code Student}\u0027s {@code UUID} is in the given collection."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class StudentInUuidCollectionPredicate implements Predicate\u003cStudent\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Collection\u003cUUID\u003e studentUuids;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public StudentInUuidCollectionPredicate(Collection\u003cUUID\u003e studentUuids) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.studentUuids \u003d studentUuids;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean test(Student student) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return studentUuids.stream().anyMatch(uuid -\u003e student.getUuid().equals(uuid));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(other instanceof StudentInUuidCollectionPredicate)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // We can ignore duplicate UUIDs provided in a list as a given student"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // either matches none or all."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e uuids \u003d new HashSet\u003c\u003e(studentUuids);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e otherUuids \u003d new HashSet\u003c\u003e(((StudentInUuidCollectionPredicate) other).studentUuids);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return uuids.equals(otherUuids);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Telegram.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents a Student\u0027s telegram handle."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTelegram(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class Telegram {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \"Telegram handles should only contain alphanumeric characters and underscores,\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    + \"and should be at least 5 characters long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9_]{5,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructs a {@code Telegram}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @param telegram A valid telegram handle."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Telegram(String telegram) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        requireNonNull(telegram);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        checkArgument(isValidTelegram(telegram), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        value \u003d telegram;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns true if a given string is a valid telegram handle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static boolean isValidTelegram(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                || (other instanceof Telegram // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u0026\u0026 value.equals(((Telegram) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 16,
      "ypinhsuan": 1,
      "junlong4321": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A list of students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * updating of students uses Student#isSameStudent(Student) for equality so as to ensure that the student being added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * or updated is unique in terms of identity in the UniqueStudentList. However, the removal of a student uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Student#equals(Object) so as to ensure that the student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if the list contains an equivalent student as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns true if the list contains an equivalent student UUID as that of the given argument\u0027s UUID."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public boolean containsUuid(Student toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasSameUuid);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Adds a student to the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student must not already exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces the student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student identity of {@code editedStudent} must not be the same as another existing student in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Replaces the contents of this list with {@code students}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * {@code students} must not contain duplicate students."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Removes the equivalent student from the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * The student must exist in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns true if {@code students} contains only unique students."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 137,
      "junlong4321": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        super(\"Operation would result in duplicate students\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "ypinhsuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Signals that the operation is unable to find the specified student."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Contains utility methods for populating {@code TutorsPet} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student ALEX_YEOH \u003d new Student(new Name(\"Alex Yeoh\"), new Telegram(\"41ex_Yo\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Email(\"alexyeoh@example.com\"), getTagSet(\"Average\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student BERNICE_YU \u003d new Student(new Name(\"Bernice Yu\"), new Telegram(\"b3rnice\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Email(\"berniceyu@example.com\"), getTagSet(\"Good\", \"Experienced\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student CHARLOTTE_OLIVEIRO \u003d new Student(new Name(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Telegram(\"C_Ol1ve\"), new Email(\"charlotte@example.com\"), getTagSet(\"Struggling\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student DAVID_LI \u003d new Student(new Name(\"David Li\"), new Telegram(\"li_DAvid\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Email(\"lidavid@example.com\"), getTagSet(\"Weak\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student IRFAN_IBRAHIM \u003d new Student(new Name(\"Irfan Ibrahim\"), new Telegram(\"IIbr4hmm\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Email(\"irfan@example.com\"), getTagSet(\"Struggling\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final Student ROY_BALAKRISHANN \u003d new Student(new Name(\"Roy Balakrishnan\"), new Telegram(\"B_Roy\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            new Email(\"royb@example.com\"), getTagSet(\"Average\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Attendance ATTENDANCE_SCORE_35 \u003d new Attendance(35);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Attendance ATTENDANCE_SCORE_80 \u003d new Attendance(80);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final AttendanceRecord CS2103T_TUTORIAL_WEEK_ONE_ATTENDANCE \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecord(Map.of(ALEX_YEOH.getUuid(), ATTENDANCE_SCORE_35,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    CHARLOTTE_OLIVEIRO.getUuid(), ATTENDANCE_SCORE_80));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final AttendanceRecord CS2103T_TUTORIAL_WEEK_TWO_ATTENDANCE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecord(Map.of(ALEX_YEOH.getUuid(), ATTENDANCE_SCORE_80));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cAttendanceRecord\u003e cs2103tAttendanceList \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new ArrayList\u003c\u003e(Collections.nCopies(10, new AttendanceRecord()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        cs2103tAttendanceList.set(0, CS2103T_TUTORIAL_WEEK_ONE_ATTENDANCE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        cs2103tAttendanceList.set(1, CS2103T_TUTORIAL_WEEK_TWO_ATTENDANCE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final AttendanceRecordList CS2103T_TUTORIAL_ATTENDANCE \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecordList(cs2103tAttendanceList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Lesson CS2103T_TUTORIAL_THURSDAY_1000_1100 \u003d new Lesson(LocalTime.of(10, 0),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            LocalTime.of(11, 0), Day.THURSDAY, new NumberOfOccurrences(10), new Venue(\"AS6-0211\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            CS2103T_TUTORIAL_ATTENDANCE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Lesson CS2100_LAB_MONDAY_1400_1500 \u003d new Lesson(LocalTime.of(14, 0),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LocalTime.of(15, 0), Day.MONDAY, new NumberOfOccurrences(10),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            new Venue(\"https://zoom/j/95317249?)pwd\u003dUlld2tWY3MwMkRibjQyUkdZZz09\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final ModuleClass CS2103T_TUTORIAL \u003d new ModuleClass(new Name(\"CS2103T Tutorial\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(ALEX_YEOH.getUuid(), BERNICE_YU.getUuid(), CHARLOTTE_OLIVEIRO.getUuid())),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Arrays.asList(CS2103T_TUTORIAL_THURSDAY_1000_1100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final ModuleClass CS2100_LAB \u003d new ModuleClass(new Name(\"CS2100 Lab\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(ALEX_YEOH.getUuid(), DAVID_LI.getUuid())),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Arrays.asList(CS2100_LAB_MONDAY_1400_1500));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final ModuleClass CS2100_TUTORIAL \u003d new ModuleClass(new Name(\"CS2100 Tutorial\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static Student[] getSampleStudents() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new Student[]{ALEX_YEOH, BERNICE_YU, CHARLOTTE_OLIVEIRO, DAVID_LI, IRFAN_IBRAHIM, ROY_BALAKRISHANN};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static ModuleClass[] getSampleModuleClasses() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new ModuleClass[]{CS2103T_TUTORIAL, CS2100_LAB, CS2100_TUTORIAL};"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static ReadOnlyTutorsPet getSampleTutorsPet() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet sampleTp \u003d new TutorsPet();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Student sampleStudent : getSampleStudents()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            sampleTp.addStudent(sampleStudent);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (ModuleClass moduleClass : getSampleModuleClasses()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            sampleTp.addModuleClass(moduleClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return sampleTp;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 31,
      "dextertanyj": 42,
      "ruixuantan": 4,
      "ypinhsuan": 9,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.exceptions.InvalidDayException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedAttendanceRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is invalid!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String START_TIME_FIELD \u003d \"start time\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String END_TIME_FIELD \u003d \"end time\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final int numberOfOccurrences;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final JsonAdaptedAttendanceRecordList attendanceRecordList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                             @JsonProperty(\"endTime\") String endTime,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                             @JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                             @JsonProperty(\"numberOfOccurrences\") int numberOfOccurrences,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                             @JsonProperty(\"venue\") String venue,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                             @JsonProperty(\"attendanceRecordList\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                                         JsonAdaptedAttendanceRecordList attendanceRecordList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.numberOfOccurrences \u003d numberOfOccurrences;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendanceRecordList \u003d attendanceRecordList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts a given {@code Lesson} into a {@code JsonAdaptedLesson} for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        day \u003d source.getDay().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        numberOfOccurrences \u003d source.getNumberOfOccurrences().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        venue \u003d source.getVenue().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceRecordList \u003d new JsonAdaptedAttendanceRecordList(source.getAttendanceRecordList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private LocalTime convertToTime(String time, String errorMsg) throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return LocalTime.parse(time, Lesson.TIME_FORMATTER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(errorMsg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, START_TIME_FIELD));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final LocalTime modelStartTime \u003d convertToTime("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                startTime, String.format(INVALID_FIELD_MESSAGE_FORMAT, START_TIME_FIELD));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, END_TIME_FIELD));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final LocalTime modelEndTime \u003d convertToTime("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                endTime, String.format(INVALID_FIELD_MESSAGE_FORMAT, END_TIME_FIELD));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final Day modelDay;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            modelDay \u003d Day.createDay(day);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (InvalidDayException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!NumberOfOccurrences.isValidNumberOfOccurrences(numberOfOccurrences)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(NumberOfOccurrences.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final NumberOfOccurrences modelNumberOfOccurrences \u003d new NumberOfOccurrences(numberOfOccurrences);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!Venue.isValidVenue(venue)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (attendanceRecordList \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    AttendanceRecordList.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final AttendanceRecordList modelAttendanceRecordList \u003d attendanceRecordList.toModelType();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (modelAttendanceRecordList.getAttendanceRecordList().size() !\u003d modelNumberOfOccurrences.value) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    AttendanceRecordList.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Lesson(modelStartTime, modelEndTime, modelDay, modelNumberOfOccurrences, modelVenue,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                modelAttendanceRecordList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 108,
      "dextertanyj": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModuleClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.STUDENT_UUID_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Jackson-friendly version of {@link ModuleClass}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class JsonAdaptedModuleClass {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Class\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENTS_IN_LESSON \u003d \"Invalid student(s) found in lesson(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"Class\u0027 %s field is invalid!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String DUPLICATE_LESSON_MESSAGE_FORMAT \u003d \"%s contains duplicate lesson(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final JsonAdaptedName name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final List\u003cJsonAdaptedUuid\u003e studentUuids \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleClass} with the given class details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedModuleClass(@JsonProperty(\"name\") JsonAdaptedName name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                                  @JsonProperty(\"studentUuids\") List\u003cJsonAdaptedUuid\u003e studentUuids,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                                  @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (studentUuids !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            this.studentUuids.addAll(studentUuids);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (lessons !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts a given {@code ModuleClass} into a {@code JsonAdaptedModuleClass} for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public JsonAdaptedModuleClass(ModuleClass source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        name \u003d new JsonAdaptedName(source.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        studentUuids.addAll(source.getStudentUuids().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "               .map(JsonAdaptedUuid::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "               .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        lessons.addAll(source.getLessons().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the contained {@code List\u003cJsonAdaptedUuid\u003e studentUuids} to a {@code List\u003cUUID\u003e}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws IllegalValueException if any of the {@code UUID}s are null or invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private List\u003cUUID\u003e getUuidList() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cUUID\u003e uuidList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (JsonAdaptedUuid studentUuid : studentUuids) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (studentUuid \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, STUDENT_UUID_FIELD));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            // catch invalid UUID"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                String uuidString \u003d studentUuid.getUuidString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                UUID.fromString(uuidString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, STUDENT_UUID_FIELD));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            uuidList.add(studentUuid.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return uuidList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Checks if a {@code lesson} already exists in a list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Duplicates are detected by calling {@code isSameLesson} method in {@code Lesson}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns true if there is a duplicate."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private boolean hasDuplicateLessons(List\u003cLesson\u003e lessons, Lesson lessonToCheck) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return lessons.stream().anyMatch(lessonToCheck::isSameLesson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts the contained {@code List\u003cJsonAdaptedLesson\u003e lessons} to a {@code List\u003cLesson\u003e}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws IllegalValueException if any of the {@code Lesson}s are null or duplicate."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cLesson\u003e getLessonList() throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cLesson\u003e lessonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (JsonAdaptedLesson jsonLesson : lessons) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (jsonLesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Lesson.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            if (hasDuplicateLessons(lessonList, jsonLesson.toModelType())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                throw new IllegalValueException(String.format(DUPLICATE_LESSON_MESSAGE_FORMAT, name));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                lessonList.add(jsonLesson.toModelType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return lessonList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void validateAttendanceRecords(List\u003cLesson\u003e lessonList, Set\u003cUUID\u003e studentUuids)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e students \u003d lessonList.stream().flatMap(lesson -\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                lesson.getAttendanceRecordList().getAttendanceRecordList().stream()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        .flatMap(record -\u003e record.getAttendanceRecord().keySet().stream()))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .collect(Collectors.toUnmodifiableSet());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (UUID studentUuid : students) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (!studentUuids.contains(studentUuid)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_STUDENTS_IN_LESSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Converts this Jackson-friendly adapted class object into the model\u0027s {@code ModuleClass} object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public ModuleClass toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final Name modelName \u003d name.toModelType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cUUID\u003e studentUuids \u003d getUuidList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final Set\u003cUUID\u003e studentUuidSet \u003d new HashSet\u003c\u003e(studentUuids);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final List\u003cLesson\u003e lessonList \u003d getLessonList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        validateAttendanceRecords(lessonList, studentUuidSet);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ModuleClass(modelName, studentUuidSet, lessonList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 26,
      "ruixuantan": 61,
      "junlong4321": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Jackson-friendly version of {@link Name}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedName {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedName} with the given {@code name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedName(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts a given {@code Name} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedName(Name source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        name \u003d source.fullName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts this Jackson-friendly adapted name object into the model\u0027s {@code Name} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Name toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (Objects.isNull(name) || !Name.isValidName(name)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.storage.JsonAdaptedUuid.MESSAGE_INVALID_UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String STUDENT_UUID_FIELD \u003d \"student UUID\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final String uuid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final JsonAdaptedName name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String telegram;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"uuid\") String uuid,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                              @JsonProperty(\"name\") JsonAdaptedName name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                              @JsonProperty(\"telegram\") String telegram,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                              @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.uuid \u003d uuid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.telegram \u003d telegram;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        uuid \u003d source.getUuid().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        name \u003d new JsonAdaptedName(source.getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        telegram \u003d source.getTelegram().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            studentTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (uuid \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"UUID\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // catch invalid UUID"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        final UUID modelUuid;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            modelUuid \u003d UUID.fromString(uuid);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_UUID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final Name modelName \u003d name.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (telegram \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    Telegram.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        if (!Telegram.isValidTelegram(telegram)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new IllegalValueException(Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final Telegram modelTelegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(studentTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Student(modelUuid, modelName, modelTelegram, modelEmail, modelTags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 11,
      "ruixuantan": 14,
      "ypinhsuan": 13,
      "junlong4321": 16,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (Objects.isNull(tagName) || !Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 5,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedUuid.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Jackson-friendly version of {@link java.util.UUID}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedUuid {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_NULL_UUID \u003d \"UUID is null\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_INVALID_UUID \u003d \"UUID is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final String uuidString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Constructs a {@code JsonAdaptedUuid} with the given {@code UUID}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public JsonAdaptedUuid(String uuidString) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.uuidString \u003d uuidString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts a given {@code UUID} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public JsonAdaptedUuid(UUID source) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        uuidString \u003d source.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public String getUuidString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return uuidString;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts this Jackson-friendly adapted UUID object into the model\u0027s {@code UUID} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws IllegalValueException if adapted UUID is null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public UUID toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        if (uuidString \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NULL_UUID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // catch invalid UUID"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        UUID uuid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            uuid \u003d UUID.fromString(uuidString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_UUID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return uuid;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "junlong4321": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTutorsPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * An Immutable TutorsPet that is serializable to JSON format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "@JsonRootName(value \u003d \"tutorspet\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "class JsonSerializableTutorsPet {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE_CLASS \u003d \"Class list contains duplicate class(es).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String MESSAGE_INVALID_STUDENTS_IN_CLASS \u003d \"Invalid student(s) found in class(es).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private final List\u003cJsonAdaptedModuleClass\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Constructs a {@code JsonSerializableTutorsPet} with the given students and classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public JsonSerializableTutorsPet(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                                     @JsonProperty(\"classes\") List\u003cJsonAdaptedModuleClass\u003e classes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.classes.addAll(classes);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Converts a given {@code ReadOnlyTutorsPet} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTutorsPet}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public JsonSerializableTutorsPet(ReadOnlyTutorsPet source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        classes.addAll(source.getModuleClassList().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .map(JsonAdaptedModuleClass::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts students into the model\u0027s {@code TutorsPet} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private void studentsToModelType(TutorsPet tutorsPet) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedStudent : students) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            Student student \u003d jsonAdaptedStudent.toModelType();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (tutorsPet.hasStudent(student) || tutorsPet.hasStudentUuid(student)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            tutorsPet.addStudent(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts classes into the model\u0027s {@code TutorsPet} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private void classesToModelType(TutorsPet tutorsPet) throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // Get all UUIDs under \"students\" field in tutorspet.json."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ObservableList\u003cStudent\u003e students \u003d tutorsPet.getStudentList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Set\u003cUUID\u003e uniqueStudentUuids \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (Student student : students) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            uniqueStudentUuids.add(student.getUuid());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (JsonAdaptedModuleClass jsonAdaptedModuleClass : classes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            ModuleClass moduleClass \u003d jsonAdaptedModuleClass.toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (tutorsPet.hasModuleClass(moduleClass)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            // Check that the set of student UUIDs within a class is a subset of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            // all student UUIDs in uniqueStudentUuids. Otherwise, Tutor\u0027s Pet will not"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            // boot up due to data corruption."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Set\u003cUUID\u003e moduleClassStudentUuids \u003d moduleClass.getStudentUuids();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (!uniqueStudentUuids.containsAll(moduleClassStudentUuids)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_STUDENTS_IN_CLASS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            tutorsPet.addModuleClass(moduleClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Converts this Tutor\u0027s Pet into the model\u0027s {@code TutorsPet} object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public TutorsPet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        TutorsPet tutorsPet \u003d new TutorsPet();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        studentsToModelType(tutorsPet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        classesToModelType(tutorsPet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return tutorsPet;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3,
      "ypinhsuan": 18,
      "junlong4321": 56,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTutorsPetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A class to access TutorsPet data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class JsonTutorsPetStorage implements TutorsPetStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTutorsPetStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public JsonTutorsPetStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return readTutorsPet(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Similar to {@link #readTutorsPet()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Optional\u003cJsonSerializableTutorsPet\u003e jsonTutorsPet \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                filePath, JsonSerializableTutorsPet.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!jsonTutorsPet.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return Optional.of(jsonTutorsPet.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet(ReadOnlyTutorsPet tutorsPet) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        saveTutorsPet(tutorsPet, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Similar to {@link #saveTutorsPet(ReadOnlyTutorsPet)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet(ReadOnlyTutorsPet tutorsPet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        requireNonNull(tutorsPet);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTutorsPet(tutorsPet), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public interface Storage extends TutorsPetStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Path getTutorsPetFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void saveTutorsPet(ReadOnlyTutorsPet tutorsPet) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Manages storage of TutorsPet data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private TutorsPetStorage tutorsPetStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TutorsPetStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StorageManager(TutorsPetStorage tutorsPetStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.tutorsPetStorage \u003d tutorsPetStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorsPet methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return tutorsPetStorage.getTutorsPetFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return readTutorsPet(tutorsPetStorage.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return tutorsPetStorage.readTutorsPet(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet(ReadOnlyTutorsPet tutorsPet) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        saveTutorsPet(tutorsPet, tutorsPetStorage.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet(ReadOnlyTutorsPet tutorsPet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPetStorage.saveTutorsPet(tutorsPet, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TutorsPetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Represents a storage for {@link TutorsPet}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public interface TutorsPetStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Path getTutorsPetFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns TutorsPet data as a {@link ReadOnlyTutorsPet}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @see #getTutorsPetFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Saves the given {@link ReadOnlyTutorsPet} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @param tutorsPet cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void saveTutorsPet(ReadOnlyTutorsPet tutorsPet) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * @see #saveTutorsPet(ReadOnlyTutorsPet)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    void saveTutorsPet(ReadOnlyTutorsPet tutorsPet, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/attendance/JsonAdaptedAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Jackson-friendly version of {@link Attendance}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendance {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final int participationScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendance(int participationScore) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.participationScore \u003d participationScore;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendance(Attendance source) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        participationScore \u003d source.getParticipationScore();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public int getParticipationScore() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return participationScore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts this Jackson-friendly adapted attendance object into the model\u0027s {@code Attendance} object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attendance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Attendance toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!Attendance.isValidParticipationScore(participationScore)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Attendance(participationScore);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/attendance/JsonAdaptedAttendanceRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Jackson-friendly version of {@link AttendanceRecord}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendanceRecord {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE \u003d \"Attendance record contains duplicate student(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_INVALID_ATTENDANCE \u003d \"Attendance record contains invalid value(s).\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final int week;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cJsonAdaptedStudentAttendance\u003e attendances \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttendanceRecord} with the given details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendanceRecord(@JsonProperty(\"week\") int week,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                                       @JsonProperty(\"records\") List\u003cJsonAdaptedStudentAttendance\u003e attendances) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (attendances !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.attendances.addAll(attendances);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts a given {@code AttendanceRecord} and its corresponding {@code Week} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendanceRecord(Week week, AttendanceRecord source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.week \u003d week.getOneBasedWeekIndex();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendances.addAll(source.getAttendanceRecord().entrySet().stream().map(entry -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(entry.getKey(), entry.getValue()))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .collect(Collectors.toUnmodifiableList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts this Jackson-friendly adapted AttendanceRecord to a key value pair object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in either the adapted week"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *         or attendances."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Pair\u003cWeek, AttendanceRecord\u003e toKeyValuePair() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final Map\u003cUUID, Attendance\u003e attendancesMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (!(week \u003e 0) || !Week.isValidWeek(Index.fromOneBased(week))) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (attendances.stream().anyMatch(Objects::isNull)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ATTENDANCE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Using a enhanced for-loop instead of streams since map cannot handle checked exceptions nicely."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (JsonAdaptedStudentAttendance attendance : attendances) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Pair\u003cUUID, Attendance\u003e pair \u003d attendance.toKeyValuePair();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (attendancesMap.containsKey(pair.getKey())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ATTENDANCE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            attendancesMap.put(pair.getKey(), pair.getValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Pair\u003c\u003e(new Week(Index.fromOneBased(week)), new AttendanceRecord(attendancesMap));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/attendance/JsonAdaptedAttendanceRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Jackson-friendly version of {@link AttendanceRecordList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendanceRecordList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTENDANCE_RECORD \u003d \"Attendance list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD \u003d \"Attendance list contains invalid record(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MESSAGE_MISSING_ATTENDANCE_RECORD_LIST \u003d \"Attendance list data is corrupted.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cJsonAdaptedAttendanceRecord\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttendanceRecordList} with the given attendance records."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendanceRecordList(@JsonProperty(\"recordList\") List\u003cJsonAdaptedAttendanceRecord\u003e recordList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (recordList !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.recordList.addAll(recordList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts a given {@code AttendanceRecordList} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedAttendanceRecordList(AttendanceRecordList source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecordList \u003d source.getAttendanceRecordList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c attendanceRecordList.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    new JsonAdaptedAttendanceRecord(new Week(Index.fromZeroBased(i)), attendanceRecordList.get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            recordList.add(record);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts this Jackson-friendly adapted attendance record list object into the model\u0027s"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code AttendanceRecordList} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attendance records."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public AttendanceRecordList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (recordList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(MESSAGE_MISSING_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (recordList.stream().anyMatch(Objects::isNull)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_RECORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecords \u003d new ArrayList\u003c\u003e(Collections.nCopies(recordList.size(), null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (JsonAdaptedAttendanceRecord record : recordList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Pair\u003cWeek, AttendanceRecord\u003e pair \u003d record.toKeyValuePair();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (pair.getKey().getOneBasedWeekIndex() \u003e attendanceRecords.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_RECORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            if (attendanceRecords.get(pair.getKey().getZeroBasedWeekIndex()) !\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            attendanceRecords.set(pair.getKey().getZeroBasedWeekIndex(), pair.getValue());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assert attendanceRecords.stream().noneMatch(Objects::isNull);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new AttendanceRecordList(attendanceRecords);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/attendance/JsonAdaptedStudentAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.STUDENT_UUID_FIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedUuid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Jackson-friendly version of a the {@link java.util.UUID} - {@link Attendance} key value pair."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedStudentAttendance {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Student attendance\u0027s %s is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final JsonAdaptedUuid studentUuid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final JsonAdaptedAttendance attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudentAttendance} with the given student UUID and attendance details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedStudentAttendance(@JsonProperty(\"studentUuid\") JsonAdaptedUuid studentUuid,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                                        @JsonProperty(\"attendance\") JsonAdaptedAttendance attendance) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.studentUuid \u003d studentUuid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts the given {@code studentUuid} and {@code attendance} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public JsonAdaptedStudentAttendance(UUID studentUuid, Attendance attendance) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.studentUuid \u003d new JsonAdaptedUuid(studentUuid);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendance \u003d new JsonAdaptedAttendance(attendance);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Converts this Jackson-friendly adapted student-attendance information to a key value pair object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in either the adapted student UUID"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *         or the adapted attendance."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Pair\u003cUUID, Attendance\u003e toKeyValuePair() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (studentUuid \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, STUDENT_UUID_FIELD));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                    Attendance.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Pair\u003c\u003e(studentUuid.toModelType(), attendance.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Color.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Colors that can be used for tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public enum Color {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    CYAN(\"#E0FEFE\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    VIOLET(\"#C7CEEA\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    ORANGE(\"#FFC247\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    PINK(\"#FFD1DC\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    YELLOW(\"#FFFFD8\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    GREEN(\"#B5EAD7\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    RED(\"#FF756D\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    BLUE(\"#A9E5FF\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    PURPLE(\"#B399D4\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    BROWN(\"#E1C6AC\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final String hexValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    Color(String hexValue) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.hexValue \u003d hexValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public String getHexValue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return hexValue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final CommandHistory COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // Calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, (KeyEvent event) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            switch (event.getCode()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                logger.fine(\"UP key pressed\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                recallPreviousCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                logger.fine(\"DOWN key pressed\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                recallNextCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                // Do not filter other key presses."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Recalls the previous valid command executed by the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void recallPreviousCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (COMMAND_HISTORY.hasPrevious()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.setText(COMMAND_HISTORY.getPrevious(commandTextField.getText()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            logger.fine(\"Recalled: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Recalls the next valid command executed by the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void recallNextCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (COMMAND_HISTORY.hasNext()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.setText(COMMAND_HISTORY.getNext());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            logger.fine(\"Recalled: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        } else if (COMMAND_HISTORY.hasCached()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.setText(COMMAND_HISTORY.getCached());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            logger.fine(\"Retrieved from cache: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            COMMAND_HISTORY.addHistory(commandTextField.getText());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "dextertanyj": 50,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandHistory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Represents a stack of commands executed by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Supports caching the current command before starting to traverse the stack from the top."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandHistory.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private int pointer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Optional\u003cString\u003e cache;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a new {@code CommandHistory} instance."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        pointer \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        cache \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds the {@code command} to stack and resets the position of the pointer to above the stack."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Empties the cache."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addHistory(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        logger.info(\"Stored in command recall: \" + command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        history.add(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        pointer \u003d history.size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        cache \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is a next command that can be recalled."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return history.size() \u003e 0 \u0026\u0026 pointer \u003c history.size() - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is a previous command that can be recalled."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return history.size() \u003e 0 \u0026\u0026 pointer \u003e 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns true if there is a cached command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasCached() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return cache.isPresent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the currently cached command and moves the pointer above the stack."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws NoSuchElementException if there is no cached value."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getCached() throws NoSuchElementException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        pointer \u003d history.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return cache.get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the next command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IndexOutOfBoundsException if there is no next command to recall."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getNext() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return history.get(++pointer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the previous command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Caches the {@code currentInput} if the pointer is above the stack."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * @throws IndexOutOfBoundsException if there is no previous command to recall."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String getPrevious(String currentInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        if (pointer \u003d\u003d history.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            logger.fine(\"Cached: \" + currentInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            cache \u003d Optional.of(currentInput);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return history.get(--pointer);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t10-4.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        getRoot().toFront();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.ui.stylesheet.Stylesheet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.ui.stylesheet.exceptions.StylesheetException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    // Independent UI parts residing in this UI container."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private StudentListPanel studentListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private ModuleClassListPanel moduleClassListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private StackPane studentListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private StackPane moduleClassListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        studentListPanel \u003d new StudentListPanel(logic.getFilteredStudentList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        studentListPanelPlaceholder.getChildren().add(studentListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClassListPanel \u003d new ModuleClassListPanel(logic.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClassListPanelPlaceholder.getChildren().add(moduleClassListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private void toggleStylesheet(Stylesheet stylesheet) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ObservableList\u003cString\u003e uiStyleSheet \u003d primaryStage.getScene().getStylesheets();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uiStyleSheet.clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String switchedStyleSheet \u003d stylesheet.getStylesheet();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            uiStyleSheet.add(switchedStyleSheet);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            uiStyleSheet.add(Stylesheet.EXTENSION.getStylesheet());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            logger.info(Stylesheet.SUCCESS_MESSAGE + stylesheet.toString());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (StylesheetException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toggleLightTheme() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        toggleStylesheet(Stylesheet.LIGHT);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toggleAlternateTheme() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        toggleStylesheet(Stylesheet.ALTERNATE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toggleDarkTheme() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        toggleStylesheet(Stylesheet.DARK);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentListPanel getStudentListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return studentListPanel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public ModuleClassListPanel getModuleClassListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return moduleClassListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 11,
      "ruixuantan": 31,
      "ypinhsuan": 7,
      "-": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleClassCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.lesson.Lesson.TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A UI component that displays information of a {@code ModuleClass}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ModuleClassCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String FXML \u003d \"ModuleClassListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public final ModuleClass moduleClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private VBox vBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Label studentCount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Label lesson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a {@code ModuleCode} with the given {@code ModuleClass} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public ModuleClassCard(ModuleClass moduleClass, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.moduleClass \u003d moduleClass;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        name.setText(moduleClass.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentCount.setText(Integer.toString(moduleClass.getStudentUuids().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d moduleClass.getLessons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (lessons.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            lesson.setText(\"No lessons\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            createLessonLabel(lessons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private void createLessonLabel(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        for (Lesson lesson: lessons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            builder.append(index)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(\". \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(lesson.getDay())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(TIME_FORMATTER.format(lesson.getStartTime()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(\" to \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(TIME_FORMATTER.format(lesson.getEndTime()))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(\"\\nVenue: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(lesson.getVenue())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(\"\\nNumber of occurrences: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .append(lesson.getNumberOfOccurrences());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            Label label \u003d new Label(builder.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            label.setPadding(new Insets(0, 0, 15, 0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            label.getStyleClass().add(\"cell_small_label\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            vBox.getChildren().add(label);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        if (!(other instanceof ModuleClassCard)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClassCard card \u003d (ModuleClassCard) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u0026\u0026 moduleClass.equals(card.moduleClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 53,
      "dextertanyj": 3,
      "ypinhsuan": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleClassListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Panel containing the list of classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ModuleClassListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String FXML \u003d \"ModuleClassListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleClassListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private ListView\u003cModuleClass\u003e moduleClassListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a {@code ModuleClassListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public ModuleClassListPanel(ObservableList\u003cModuleClass\u003e moduleClassList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClassListView.setItems(moduleClassList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        moduleClassListView.setCellFactory(listView -\u003e new ModuleClassListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ModuleClass} using a {@code ModuleClassCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    class ModuleClassListViewCell extends ListCell\u003cModuleClass\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        protected void updateItem(ModuleClass moduleClass, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            super.updateItem(moduleClass, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            if (empty || moduleClass \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                setGraphic(new ModuleClassCard(moduleClass, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A UI for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "junlong4321": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A UI for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A UI component that displays information of a {@code Student}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final List\u003cTag\u003e listOfTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final Color[] colors \u003d Color.values();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final int NUMBER_OF_COLORS \u003d colors.length;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String FXML \u003d \"StudentListCard.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String TELEGRAM_PREFIX \u003d \"@\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public final Student student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Label telegram;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a {@code StudentCode} with the given {@code Student} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentCard(Student student, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.student \u003d student;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        name.setText(student.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        telegram.setText(TELEGRAM_PREFIX + student.getTelegram().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        email.setText(student.getEmail().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        student.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(createTag(tag)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Creates a {@code Label} with the given {@code Tag} details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public Label createTag(Tag tag) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Color color;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (listOfTags.contains(tag)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            int index \u003d listOfTags.indexOf(tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            color \u003d colors[index % NUMBER_OF_COLORS];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            listOfTags.add(tag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            color \u003d colors[listOfTags.size() % NUMBER_OF_COLORS];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Label label \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        label.setStyle(\"-fx-background-color:\" + color.getHexValue() + \";\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        if (!(other instanceof StudentCard)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        StudentCard card \u003d (StudentCard) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u0026\u0026 student.equals(card.student);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 19,
      "dextertanyj": 1,
      "ruixuantan": 3,
      "ypinhsuan": 23,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StudentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Panel containing the list of students."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String FXML \u003d \"StudentListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StudentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private ListView\u003cStudent\u003e studentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a {@code StudentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentListPanel(ObservableList\u003cStudent\u003e studentList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        studentListView.setItems(studentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        studentListView.setCellFactory(listView -\u003e new StudentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Student} using a {@code StudentCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    class StudentListViewCell extends ListCell\u003cStudent\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        protected void updateItem(Student student, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            super.updateItem(student, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            if (empty || student \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                setGraphic(new StudentCard(student, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 2,
      "ypinhsuan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/tutors_pet_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/stylesheet/Stylesheet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.ui.stylesheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.ui.stylesheet.exceptions.StylesheetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public enum Stylesheet {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    LIGHT(\"LightTheme.css\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    ALTERNATE(\"AlternateTheme.css\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    DARK(\"DarkTheme.css\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    EXTENSION(\"Extensions.css\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String ERROR_MESSAGE \u003d \"Stylesheet cannot be found: \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String SUCCESS_MESSAGE \u003d \"Stylesheet switched to: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String DIRECTORY \u003d \"/view/\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    Stylesheet(String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public String getStylesheet() throws StylesheetException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return getClass().getResource(DIRECTORY + path).toExternalForm();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            throw new StylesheetException(ERROR_MESSAGE + path);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/stylesheet/exceptions/StylesheetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.ui.stylesheet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Represents an error when a css stylesheet does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class StylesheetException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public StylesheetException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 11
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"770\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Tutor\u0027s Pet\" type\u003d\"javafx.stage.Stage\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cImage url\u003d\"@/images/tutors_pet_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Theme\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#toggleLightTheme\" text\u003d\"Light\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#toggleAlternateTheme\" text\u003d\"Alternate\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#toggleDarkTheme\" text\u003d\"Dark\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "             \u003cVBox fx:id\u003d\"moduleClassList\" minWidth\u003d\"365.0\" prefWidth\u003d\"365.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                 \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                  \u003cText fx:id\u003d\"moduleClassListHeader\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"C L A S S E S\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u003cVBox.margin\u003e\u003cInsets bottom\u003d\"10.0\" /\u003e\u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "               \u003cStackPane fx:id\u003d\"moduleClassListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "             \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                  \u003cVBox fx:id\u003d\"divider\" maxWidth\u003d\"10.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"102.0\" prefWidth\u003d\"10.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003cInsets bottom\u003d\"17.0\" top\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "             \u003cVBox fx:id\u003d\"studentList\" minWidth\u003d\"365.0\" prefWidth\u003d\"365.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                 \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                     \u003cText fx:id\u003d\"studentClassListHeader\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"S T U D E N T S\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        \u003cVBox.margin\u003e\u003cInsets bottom\u003d\"10.0\" /\u003e\u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003c/Text\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "               \u003cStackPane fx:id\u003d\"studentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" right\u003d\"15.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/VBox\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 32,
      "ruixuantan": 15,
      "ypinhsuan": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/ModuleClassListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        \u003cVBox fx:id\u003d\"vBox\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u003cLabel text\u003d\"No. of Students:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \u003cLabel fx:id\u003d\"studentCount\" text\u003d\"\\$studentCount\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    \u003cInsets top\u003d\"10\" bottom\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                \u003cLabel fx:id\u003d\"lesson\" text\u003d\"Lessons:\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 27,
      "dextertanyj": 4,
      "ruixuantan": 3,
      "ypinhsuan": 7
    }
  },
  {
    "path": "src/main/resources/view/ModuleClassListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleClassListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 7,
      "ruixuantan": 1
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/StudentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "      \u003cLabel fx:id\u003d\"telegram\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$telegram\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "samlsm": 10,
      "ruixuantan": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/StudentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "  \u003cListView fx:id\u003d\"studentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "ypinhsuan": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        final Index fifthStudentIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(fifthStudentIndex.equals(fifthStudentIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(fifthStudentIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.deepCopyList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.deepCopyMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testDeepCopyList_primitive() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 2, 3));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cInteger\u003e copiedList \u003d deepCopyList(list, n -\u003e n);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(list.get(i), copiedList.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testDeepCopyList_class() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cMockTestClass\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(new MockTestClass(1, \"1\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(new MockTestClass(2, \"2\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(new MockTestClass(3, \"3\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cMockTestClass\u003e copiedList \u003d deepCopyList(list, elem -\u003e elem.deepCopy());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(list.get(i), copiedList.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertFalse(list.get(i) \u003d\u003d copiedList.get(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testDeepCopyMap_primitive() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Map\u003cInteger, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(1, \"1\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(2, \"2\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(3, \"3\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Map\u003cInteger, String\u003e copiedMap \u003d deepCopyMap(map, key -\u003e key, value -\u003e value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Integer key: map.keySet()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertTrue(copiedMap.containsKey(key));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(map.get(key), copiedMap.get(key));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (Integer key: copiedMap.keySet()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertTrue(map.containsKey(key));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testDeepCopyMap_class() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Map\u003cMockTestClass, MockTestClass\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(new MockTestClass(1, \"key1\"), new MockTestClass(1, \"value1\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(new MockTestClass(2, \"key2\"), new MockTestClass(2, \"value2\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        map.put(new MockTestClass(3, \"key3\"), new MockTestClass(3, \"value3\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Map\u003cMockTestClass, MockTestClass\u003e copiedMap \u003d deepCopyMap("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                map, key -\u003e key.deepCopy(), value -\u003e value.deepCopy());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (MockTestClass key: map.keySet()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(map.get(key), copiedMap.get(key));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertFalse(map.get(key) \u003d\u003d copiedMap.get(key));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        MockTestClass[] mapKeyArray \u003d map.keySet().toArray(new MockTestClass[3]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        MockTestClass[] copiedMapKeyArray \u003d copiedMap.keySet().toArray(new MockTestClass[3]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c mapKeyArray.length; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertEquals(mapKeyArray[i], copiedMapKeyArray[i]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertFalse(mapKeyArray[i] \u003d\u003d copiedMapKeyArray[i]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private class MockTestClass {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private final int x;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        private final String y;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        MockTestClass(int x, String y) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.x \u003d x;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            this.y \u003d y;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        MockTestClass deepCopy() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return new MockTestClass(x, y);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    || (other instanceof MockTestClass // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 ((MockTestClass) other).x \u003d\u003d x"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                    \u0026\u0026 ((MockTestClass) other).y \u003d\u003d y);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            return Objects.hash(x, y);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 98,
      "dextertanyj": 1,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.storage.JsonTutorsPetStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonTutorsPetStorage tutorsPetStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new JsonTutorsPetStorage(temporaryFolder.resolve(\"tutorsPet.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tutorsPetStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String deleteStudentCommand \u003d \"delete-student 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandException(deleteStudentCommand, MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String listCommand \u003d ListStudentCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(listCommand, ListStudentCommand.MESSAGE_LIST_ALL_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // Setup LogicManager with JsonTutorsPetIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonTutorsPetStorage tutorsPetStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new JsonTutorsPetIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionTutorsPet.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tutorsPetStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // Execute add student command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String addStudentCommand \u003d AddStudentCommand.COMMAND_WORD + NAME_DESC_AMY + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.addStudent(expectedStudent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(String.format(AddStudentCommand.MESSAGE_SUCCESS, expectedStudent));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(addStudentCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void getFilteredModuleClassList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleClassList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static class JsonTutorsPetIoExceptionThrowingStub extends JsonTutorsPetStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        private JsonTutorsPetIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public void saveTutorsPet(ReadOnlyTutorsPet tutorsPet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 5,
      "ruixuantan": 5,
      "dextertanyj": 4,
      "ypinhsuan": 25,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.ModuleClassUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddAttendanceCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddAttendanceCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullAttendance_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        targetWeek, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullIndexes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(null, lessonIndex, studentIndex,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        targetWeek, targetAttendance));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, null, studentIndex,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        targetWeek, targetAttendance));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, null,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        targetWeek, targetAttendance));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullWeek_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        null, targetAttendance));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_5;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d new AttendanceRecord(Map.of(student.getUuid(), targetAttendance));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecords \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new ArrayList\u003c\u003e(lesson.getAttendanceRecordList().getAttendanceRecordList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), attendanceRecord);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d new LessonBuilder(lesson)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(attendanceRecords)).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ModuleClassUtil.manualReplaceLessonToModuleClass(moduleClass, lesson, modifiedLesson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                String.format(AddAttendanceCommand.MESSAGE_SUCCESS, student.getName(), targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(addAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_existingAttendance_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d new AttendanceRecord(Map.of(student.getUuid(), targetAttendance));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        List\u003cAttendanceRecord\u003e attendanceRecords \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new ArrayList\u003c\u003e(lesson.getAttendanceRecordList().getAttendanceRecordList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        attendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), attendanceRecord);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d new LessonBuilder(lesson)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(attendanceRecords)).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ModuleClassUtil.manualReplaceLessonToModuleClass(moduleClass, lesson, modifiedLesson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        model.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, AddAttendanceCommand.MESSAGE_DUPLICATE_ATTENDANCE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_studentNotInClass_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d new AddAttendanceCommand(moduleClassIndex, lessonIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                studentIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, Messages.MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidClassIndex_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(outOfBoundIndex, lessonIndex, studentIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidLessonIndex_failure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(moduleClass.getLessons().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d new AddAttendanceCommand(moduleClassIndex,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                outOfBoundIndex, studentIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidStudentIndex_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d new AddAttendanceCommand(moduleClassIndex,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                lessonIndex, outOfBoundIndex, targetWeek, targetAttendance);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidWeek_failure() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            .getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week invalidWeek \u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new Week(Index.fromOneBased(lesson.getAttendanceRecordList().getAttendanceRecordList().size() + 1));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance targetAttendance \u003d VALID_ATTENDANCE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, invalidWeek, targetAttendance);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(addAttendanceCommand, model, Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week1 \u003d new Week(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week2 \u003d new Week(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance attendanceScore90 \u003d new Attendance(90);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Attendance attendanceScore80 \u003d new Attendance(80);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddAttendanceCommand addAttendanceCommand \u003d new AddAttendanceCommand(moduleClassIndex, lessonIndex,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                studentIndex, week1, attendanceScore90);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(addAttendanceCommand.equals(addAttendanceCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddAttendanceCommand duplicateAddAttendanceCommand \u003d new AddAttendanceCommand(moduleClassIndex,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                lessonIndex, studentIndex, week1, attendanceScore90);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(addAttendanceCommand.equals(duplicateAddAttendanceCommand));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(5));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(null));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different attendances -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommandDifferentAttendance \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week1,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        attendanceScore80);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(addAttendanceCommandDifferentAttendance));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different weeks -\u003e return false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand addAttendanceCommandDifferentWeek \u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week2,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        attendanceScore90);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(addAttendanceCommand.equals(addAttendanceCommandDifferentWeek));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 181,
      "dextertanyj": 7,
      "junlong4321": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddLessonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getOnlyModuleClassTutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddLessonCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class AddLessonCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private Model model \u003d new ModelManager(getOnlyModuleClassTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void constructor_nullIndexes_throwNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLessonCommand(moduleClassIndex, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLessonCommand(null, lesson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // manually add first lesson to first class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualAddLessonToModuleClass(moduleClass, lesson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d String.format(AddLessonCommand.MESSAGE_SUCCESS, lesson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        expectedModel.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandSuccess(new AddLessonCommand(moduleClassIndex, lesson), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_existingLesson_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // manually add first lesson to first class"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualAddLessonToModuleClass(moduleClass, lesson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // update model with modified class"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand addLessonCommand \u003d new AddLessonCommand(moduleClassIndex, lesson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(addLessonCommand, model, AddLessonCommand.MESSAGE_EXISTING_LESSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_invalidClassIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand addLessonCommand \u003d new AddLessonCommand(outOfBoundIndex, lesson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(addLessonCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lessonAtCom1 \u003d new LessonBuilder().withVenue(\"COM1-0001\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lessonAtCom2 \u003d new LessonBuilder().withVenue(\"COM2-0002\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand addLessonCom1Command \u003d new AddLessonCommand(moduleClassIndex, lessonAtCom1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand addLessonCom2Command \u003d new AddLessonCommand(moduleClassIndex, lessonAtCom2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertTrue(addLessonCom1Command.equals(addLessonCom1Command));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand addLessonCom1CommandCopy \u003d new AddLessonCommand(moduleClassIndex, lessonAtCom1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertTrue(addLessonCom1Command.equals(addLessonCom1CommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertFalse(addLessonCom1Command.equals(5));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertFalse(addLessonCom1Command.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // different lessons -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertFalse(addLessonCom1Command.equals(addLessonCom2Command));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns a new {@code ModuleClass} based on the given {@code moduleClass} but with the specified {@code lesson}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * {@code lesson} must not be found in {@code moduleClass}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static ModuleClass manualAddLessonToModuleClass(ModuleClass moduleClass, Lesson lesson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(moduleClass.getLessons());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertFalse(lessons.contains(lesson), \"Test precondition error: The selected module class\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + \" already contains the selected lesson.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        lessons.add(lesson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClass.getName(), moduleClass.getStudentUuids(), lessons);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleClassCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddModuleClassCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddModuleClassCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_newModuleClass_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass validModuleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(AddModuleClassCommand.MESSAGE_SUCCESS, validModuleClass);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.addModuleClass(validModuleClass);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new AddModuleClassCommand(validModuleClass), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(model.canUndo());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_duplicateModuleClass_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassInList \u003d model.getTutorsPet().getModuleClassList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(new AddModuleClassCommand(moduleClassInList), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                AddModuleClassCommand.MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(model.canUndo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddModuleClassCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleClassCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_moduleClassAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModelStubAcceptingModuleClassAdded modelStub \u003d new ModelStubAcceptingModuleClassAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass validModuleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleClassCommand(validModuleClass).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(String.format(AddModuleClassCommand.MESSAGE_SUCCESS, validModuleClass),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(Collections.singletonList(validModuleClass), modelStub.moduleClassesAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(Collections.singletonList(String.format(AddModuleClassCommand.MESSAGE_SUCCESS, validModuleClass)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                modelStub.commitMessages);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_duplicateModuleClass_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass validModuleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddModuleClassCommand addModuleClassCommand \u003d new AddModuleClassCommand(validModuleClass);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModelStubWithModuleClass modelStub \u003d new ModelStubWithModuleClass(validModuleClass);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(CommandException.class, AddModuleClassCommand.MESSAGE_DUPLICATE_MODULE_CLASS, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                addModuleClassCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass cs1010 \u003d new ModuleClassBuilder().withName(\"CS1010\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass cs2103 \u003d new ModuleClassBuilder().withName(\"CS2103\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddModuleClassCommand addCs1101Command \u003d new AddModuleClassCommand(cs1010);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddModuleClassCommand addCs2103Command \u003d new AddModuleClassCommand(cs2103);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(addCs1101Command.equals(addCs1101Command));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddModuleClassCommand addCs1101CommandCopy \u003d new AddModuleClassCommand(cs1010);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(addCs1101Command.equals(addCs1101CommandCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(addCs1101Command.equals(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(addCs1101Command.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different ModuleClass -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(addCs1101Command.equals(addCs2103Command));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A Model stub that contains a single {@code ModuleClass}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private class ModelStubWithModuleClass extends ModelStub {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private final ModuleClass moduleClass;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModelStubWithModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.moduleClass \u003d moduleClass;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public boolean hasModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return this.moduleClass.isSameModuleClass(moduleClass);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A Model stub that always accepts the {@code ModuleClass} being added."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private class ModelStubAcceptingModuleClassAdded extends ModelStub {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final ArrayList\u003cModuleClass\u003e moduleClassesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final ArrayList\u003cString\u003e commitMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commitMessages.add(commitMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public boolean hasModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return moduleClassesAdded.stream().anyMatch(moduleClass::isSameModuleClass);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public void addModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            requireNonNull(moduleClass);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            moduleClassesAdded.add(moduleClass);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public ReadOnlyTutorsPet getTutorsPet() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return new TutorsPet();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 125,
      "junlong4321": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddStudentCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class AddStudentCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_newStudent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.addStudent(validStudent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new AddStudentCommand(validStudent), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student studentInList \u003d model.getTutorsPet().getStudentList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(new AddStudentCommand(studentInList), model, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "ypinhsuan": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class AddStudentCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void constructor_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddStudentCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_studentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ModelStubAcceptingStudentAdded modelStub \u003d new ModelStubAcceptingStudentAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        CommandResult commandResult \u003d new AddStudentCommand(validStudent).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(Collections.singletonList(validStudent), modelStub.studentsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(Collections.singletonList(String.format(AddStudentCommand.MESSAGE_SUCCESS, validStudent)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                modelStub.commitMessages);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_duplicateStudent_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student validStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        AddStudentCommand addStudentCommand \u003d new AddStudentCommand(validStudent);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModelStubWithStudent modelStub \u003d new ModelStubWithStudent(validStudent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(CommandException.class, AddStudentCommand.MESSAGE_DUPLICATE_STUDENT, () -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                addStudentCommand.execute(modelStub));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student alice \u003d new StudentBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student bob \u003d new StudentBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        AddStudentCommand addAliceCommand \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        AddStudentCommand addBobCommand \u003d new AddStudentCommand(bob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        AddStudentCommand addAliceCommandCopy \u003d new AddStudentCommand(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * A Model stub that contains a single student."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private class ModelStubWithStudent extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        private final Student student;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ModelStubWithStudent(Student student) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            this.student \u003d student;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return this.student.isSameStudent(student);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A Model stub that always accepts the student being added."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private class ModelStubAcceptingStudentAdded extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        final ArrayList\u003cStudent\u003e studentsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        final ArrayList\u003cString\u003e commitMessages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            commitMessages.add(commitMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return studentsAdded.stream().anyMatch(student::isSameStudent);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public void addStudent(Student student) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            requireNonNull(student);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            studentsAdded.add(student);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public ReadOnlyTutorsPet getTutorsPet() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return new TutorsPet();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 15,
      "ypinhsuan": 42,
      "junlong4321": 4,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getOnlyStudentsTutorsPet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ClearModuleClassCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_emptyTutorsPet_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ClearModuleClassCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(new ClearModuleClassCommand(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                model, ClearModuleClassCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_nonEmptyTutorsPet_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.setTutorsPet(getOnlyStudentsTutorsPet());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ClearModuleClassCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(new ClearModuleClassCommand(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                model, ClearModuleClassCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 31,
      "dextertanyj": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getOnlyModuleClassTutorsPet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class ClearStudentCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_emptyTutorsPet_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ClearStudentCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(new ClearStudentCommand(), model, ClearStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_nonEmptyTutorsPet_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.setTutorsPet(getOnlyModuleClassTutorsPet());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ClearStudentCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(new ClearStudentCommand(), model, ClearStudentCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 1,
      "dextertanyj": 5,
      "ypinhsuan": 6,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_OCCURRENCES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.EditModuleClassDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // student-related constants"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALID_UUID_AMY \u003d \"99fa08df-5cd6-42cd-84dd-3e08cfe74224\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALID_UUID_BOB \u003d \"a3090aa6-6633-43bd-b137-64c514299e59\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String VALID_TELEGRAM_AMY \u003d \"Amy_B\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String VALID_TELEGRAM_BOB \u003d \"bobCHoo\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String VALID_TAG_AVERAGE \u003d \"average\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String VALID_TAG_EXPERIENCED \u003d \"experienced\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TELEGRAM_DESC_AMY \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String TELEGRAM_DESC_BOB \u003d \" \" + PREFIX_TELEGRAM + VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String TAG_DESC_EXPERIENCED \u003d \" \" + PREFIX_TAG + VALID_TAG_EXPERIENCED;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String TAG_DESC_AVERAGE \u003d \" \" + PREFIX_TAG + VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INVALID_NAME \u003d \"James\u0026\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INVALID_STUDENT_UUID \u003d \"584346cb-8886-4518-8282-\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + INVALID_NAME; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final String INVALID_TELEGRAM_DESC \u003d \" \" + PREFIX_TELEGRAM + \"91%19\"; // \u0027%\u0027 not allowed in telegram"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"good*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final EditStudentCommand.EditStudentDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DESC_AMY \u003d new EditStudentDescriptorBuilder(new StudentBuilder().withUuid(VALID_UUID_AMY).build())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withName(VALID_NAME_AMY).withTelegram(VALID_TELEGRAM_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DESC_BOB \u003d new EditStudentDescriptorBuilder(new StudentBuilder().withUuid(VALID_UUID_BOB).build())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withName(VALID_NAME_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_AVERAGE, VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // moduleClass-related constants"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALID_NAME_CS2103T_TUTORIAL \u003d \"CS2103T Tutorial\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALID_NAME_CS2100_LAB \u003d \"CS2100 Lab\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String VALID_NAME_CS2030_TUTORIAL \u003d \"CS2030 Tutorial\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String VALID_NAME_CS2100_TUTORIAL \u003d \"CS2100 Tutorial\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String NAME_DESC_CS2103T_TUTORIAL \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String NAME_DESC_CS2100_LAB \u003d \" \" + PREFIX_NAME + VALID_NAME_CS2100_LAB;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final EditModuleClassCommand.EditModuleClassDescriptor DESC_CS2100_LAB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final EditModuleClassCommand.EditModuleClassDescriptor DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DESC_CS2100_LAB \u003d new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2100_LAB).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DESC_CS2103T_TUTORIAL \u003d new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    // lesson-related constants"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_START_TIME_1400_LESSON_WED_2_TO_4 \u003d \"14:00\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_START_TIME_0800_LESSON_FRI_8_TO_10 \u003d \"08:00\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_END_TIME_1600_LESSON_WED_2_TO_4 \u003d \"16:00\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_END_TIME_1000_LESSON_FRI_8_TO_10 \u003d \"10:00\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Day VALID_DAY_WED_LESSON_WED_2_TO_4 \u003d Day.WEDNESDAY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Day VALID_DAY_FRI_LESSON_FRI_8_TO_10 \u003d Day.FRIDAY;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final int VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4 \u003d 7;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final int VALID_NUMBER_OF_OCCURRENCES_13_LESSON_FRI_8_TO_10 \u003d 13;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4 \u003d \"COM1-B111\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10 \u003d \"S17-0302\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    // WED_2_TO_4"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String START_TIME_DESC_LESSON_WED_2_TO_4 \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_START_TIME_1400_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String END_TIME_DESC_LESSON_WED_2_TO_4 \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_END_TIME_1600_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DAY_DESC_LESSON_WED_2_TO_4 \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_DAY + VALID_DAY_WED_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String NUMBER_OF_OCCURRENCES_DESC_LESSON_WED_2_TO_4 \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_NUMBER_OF_OCCURRENCES + VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VENUE_DESC_LESSON_WED_2_TO_4 \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_VENUE + VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    // FRI_8_TO_10"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String START_TIME_DESC_LESSON_FRI_8_TO_10 \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_START_TIME_0800_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String END_TIME_DESC_LESSON_FRI_8_TO_10 \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_END_TIME_1000_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DAY_DESC_LESSON_FRI_8_TO_10 \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_DAY + VALID_DAY_FRI_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10 \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_NUMBER_OF_OCCURRENCES + VALID_NUMBER_OF_OCCURRENCES_13_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String VENUE_DESC_LESSON_FRI_8_TO_10 \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_VENUE + VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String INVALID_DAY_DESC \u003d \" \" + PREFIX_DAY + \"ASDDAY\"; // \u0027ASDDAY\u0027 is not a day"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_START_TIME + \"123412x\"; // \u0027123412x\u0027 is not a valid time"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_END_TIME + \"123412x\"; // \u0027123412x\u0027 is not a valid time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String INVALID_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"\u0026\u0026\u0026\u0026\u0026\u0026\"; // \u0027\u0026\u0026\u0026\u0026\u0026\u0026\u0027 is not a venue"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String INVALID_NUMBER_OF_OCCURRENCES_DESC \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            \" \" + PREFIX_NUMBER_OF_OCCURRENCES + \"asd\"; // \u0027asd\u0027 is not a number"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final EditLessonCommand.EditLessonDescriptor DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final EditLessonCommand.EditLessonDescriptor DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        DESC_LESSON_WED_2_TO_4 \u003d new EditLessonDescriptorBuilder(new LessonBuilder().build())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withStartTime(VALID_START_TIME_1400_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1600_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_WED_LESSON_WED_2_TO_4.toString())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        DESC_LESSON_FRI_8_TO_10 \u003d new EditLessonDescriptorBuilder(new LessonBuilder().build())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withStartTime(VALID_START_TIME_0800_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    // attendance-related constants"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final int VALID_WEEK_VALUE_3 \u003d 3;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int VALID_WEEK_VALUE_5 \u003d 5;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Index VALID_WEEK_INDEX_5 \u003d Index.fromOneBased(VALID_WEEK_VALUE_5);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int VALID_PARTICIPATION_SCORE_33 \u003d 33;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int VALID_PARTICIPATION_SCORE_51 \u003d 51;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final int VALID_PARTICIPATION_SCORE_80 \u003d 80;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Week VALID_WEEK_1 \u003d new Week(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Week VALID_WEEK_5 \u003d new Week(Index.fromOneBased(VALID_WEEK_VALUE_5));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Attendance VALID_ATTENDANCE \u003d new Attendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Attendance VALID_ATTENDANCE_33 \u003d new Attendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Attendance VALID_ATTENDANCE_51 \u003d new Attendance(VALID_PARTICIPATION_SCORE_51);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String PARTICIPATION_SCORE_DESC_80 \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_PARTICIPATION_SCORE + VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String PARTICIPATION_SCORE_DESC_51 \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_PARTICIPATION_SCORE + VALID_PARTICIPATION_SCORE_51;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String WEEK_DESC_WEEK_VALUE_5 \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_WEEK + VALID_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String WEEK_DESC_WEEK_VALUE_3 \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_WEEK + VALID_WEEK_VALUE_3;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final AttendanceRecord EMPTY_ATTENDANCE_RECORD \u003d new AttendanceRecord();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Map\u003cUUID, Attendance\u003e VALID_ATTENDANCE_LIST \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        VALID_ATTENDANCE_LIST.put(UUID.fromString(VALID_UUID_AMY), new Attendance(VALID_PARTICIPATION_SCORE_33));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        VALID_ATTENDANCE_LIST.put(UUID.fromString(VALID_UUID_BOB), new Attendance(VALID_PARTICIPATION_SCORE_51));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code AttendanceRecord} for testing with two {@code Attendance}s:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - AMY with score 33"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - BOB with score 51"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final AttendanceRecord VALID_ATTENDANCE_RECORD \u003d new AttendanceRecord(VALID_ATTENDANCE_LIST);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code AttendanceRecordList} for testing with two {@code AttendanceRecord}s:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - Week 1: Empty"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - Week 2: As defined in {@link CommandTestUtil#VALID_ATTENDANCE_RECORD}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final AttendanceRecordList VALID_ATTENDANCE_RECORD_LIST \u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecordList(Arrays.asList(EMPTY_ATTENDANCE_RECORD, VALID_ATTENDANCE_RECORD));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final int INVALID_PARTICIPATION_SCORE_MINUS_1 \u003d -1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final int INVALID_PARTICIPATION_SCORE_101 \u003d 101;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String INVALID_PARTICIPATION_LOWER_BOUND_SCORE_DESC \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_PARTICIPATION_SCORE + \"-1\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String INVALID_PARTICIPATION_UPPER_BOUND_SCORE_DESC \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_PARTICIPATION_SCORE + \"101\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String INVALID_WEEK_LOWER_BOUND_DESC \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_WEEK + \"0\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final String INVALID_WEEK_UPPER_BOUND_DESC \u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            \" \" + PREFIX_WEEK + \"53\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * - the Tutor\u0027s Pet, filtered student list and filtered module class list in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet expectedTutorsPet \u003d new TutorsPet(actualModel.getTutorsPet());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cStudent\u003e expectedFilteredStudentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cModuleClass\u003e expectedFilteredModuleClassList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedTutorsPet, actualModel.getTutorsPet());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedFilteredStudentList, actualModel.getFilteredStudentList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedFilteredModuleClassList, actualModel.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Updates {@code model}\u0027s {@code filteredStudents} list to show only the student at the given"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s Tutor\u0027s Pet."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static void showStudentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(toTest -\u003e toTest.equals(student));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(1, model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Updates {@code model}\u0027s {@code filteredModuleClasses} list to show only the ModuleClass at the given"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s Tutor\u0027s Pet."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static void showModuleClassAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleClassList().size());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(toTest -\u003e toTest.equals(moduleClass));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(1, model.getFilteredModuleClassList().size());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 49,
      "ruixuantan": 36,
      "dextertanyj": 58,
      "ypinhsuan": 18,
      "junlong4321": 49,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_5;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.ModuleClassUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * {@code DeleteAttendanceCommand}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class DeleteAttendanceCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void constructor_nullIndexes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteAttendanceCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                null, lessonIndex, studentIndex, targetWeek));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteAttendanceCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                moduleClassIndex, null, studentIndex, targetWeek));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteAttendanceCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                moduleClassIndex, lessonIndex, null, targetWeek));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void constructor_nullWeek_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteAttendanceCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                moduleClassIndex, lessonIndex, studentIndex, null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_validIndexes_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // delete week 1 attendance record"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e record \u003d lesson.getAttendanceRecordList()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .getAttendanceRecord(targetWeek).getAttendanceRecord();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e updatedRecord \u003d new HashMap\u003c\u003e(record);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedRecord.remove(student.getUuid());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord updatedAttendanceRecord \u003d new AttendanceRecord(updatedRecord);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e updatedAttendanceRecords \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new ArrayList\u003c\u003e(lesson.getAttendanceRecordList().getAttendanceRecordList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedAttendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), updatedAttendanceRecord);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d new LessonBuilder(lesson)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(updatedAttendanceRecords)).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ModuleClassUtil.manualReplaceLessonToModuleClass(moduleClass, lesson, modifiedLesson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_DELETE_ATTENDANCE_SUCCESS, targetWeek,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                student.getName(), modifiedLesson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        expectedModel.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandSuccess(deleteAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_missingAttendance_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_5;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // delete non-existent week 5 attendance record"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e record \u003d lesson.getAttendanceRecordList()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .getAttendanceRecord(targetWeek).getAttendanceRecord();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Map\u003cUUID, Attendance\u003e updatedRecord \u003d new HashMap\u003c\u003e(record);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedRecord.remove(student.getUuid());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecord updatedAttendanceRecord \u003d new AttendanceRecord(updatedRecord);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cAttendanceRecord\u003e updatedAttendanceRecords \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new ArrayList\u003c\u003e(lesson.getAttendanceRecordList().getAttendanceRecordList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        updatedAttendanceRecords.set(targetWeek.getZeroBasedWeekIndex(), updatedAttendanceRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson modifiedLesson \u003d new LessonBuilder(lesson)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(updatedAttendanceRecords)).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ModuleClassUtil.manualReplaceLessonToModuleClass(moduleClass, lesson, modifiedLesson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        model.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(deleteAttendanceCommand, model, DeleteAttendanceCommand.MESSAGE_MISSING_ATTENDANCE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_invalidModuleClassIndex_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(deleteAttendanceCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_invalidLessonIndex_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d Index.fromOneBased(moduleClass.getLessons().size() + 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(deleteAttendanceCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_invalidStudentIndex_failure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(deleteAttendanceCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void execute_invalidWeek_failure() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week targetWeek \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new Week(Index.fromOneBased(lesson.getAttendanceRecordList().getAttendanceRecordList().size() + 1));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand deleteAttendanceCommand \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertCommandFailure(deleteAttendanceCommand, model, Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 195
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteLessonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * {@code DeleteLessonCommand}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteLessonCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullModuleClassIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteLessonCommand(null, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullLessonIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteLessonCommand(INDEX_FIRST_ITEM, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_validIndexes_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass editedModuleClass \u003d new ModuleClassBuilder(moduleClass).withLessons().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lessonToDelete \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(moduleClassIndex, lessonIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteLessonCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                moduleClass);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.setModuleClass(moduleClass, editedModuleClass);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(deleteLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidModuleClassIndex_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(moduleClassIndex, lessonIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidLessonIndex_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d Index.fromOneBased(moduleClass.getLessons().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteLessonCommand \u003d new DeleteLessonCommand(moduleClassIndex, lessonIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(deleteLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteFirstLessonCommand \u003d new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteSecondLessonCommand \u003d new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(deleteFirstLessonCommand.equals(deleteFirstLessonCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand deleteFirstLessonCommandCopy \u003d new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(deleteFirstLessonCommand.equals(deleteFirstLessonCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(deleteFirstLessonCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(deleteFirstLessonCommand.equals(deleteSecondLessonCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * {@code DeleteModuleClassCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteModuleClassCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassToDelete \u003d model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteModuleClassCommand \u003d new DeleteModuleClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleClassCommand.MESSAGE_DELETE_MODULE_CLASS_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                moduleClassToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.deleteModuleClass(moduleClassToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(deleteModuleClassCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteModuleClassCommand \u003d new DeleteModuleClassCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(deleteModuleClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClassToDelete \u003d model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteModuleClassCommand \u003d new DeleteModuleClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleClassCommand.MESSAGE_DELETE_MODULE_CLASS_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                moduleClassToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.deleteModuleClass(moduleClassToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showNoModuleClass(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(deleteModuleClassCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Tutor\u0027s Pet list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteModuleClassCommand \u003d new DeleteModuleClassCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(deleteModuleClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteFirstModuleClassCommand \u003d new DeleteModuleClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteSecondModuleClassCommand \u003d new DeleteModuleClassCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(deleteFirstModuleClassCommand.equals(deleteFirstModuleClassCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        DeleteModuleClassCommand deleteFirstModuleClassCommandCopy \u003d new DeleteModuleClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(deleteFirstModuleClassCommand.equals(deleteFirstModuleClassCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(deleteFirstModuleClassCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(deleteFirstModuleClassCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different moduleClass -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(deleteFirstModuleClassCommand.equals(deleteSecondModuleClassCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Updates {@code model}\u0027s {@code filteredModuleClasses} list to show no {@code ModuleClass}es."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private void showNoModuleClass(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(model.getFilteredModuleClassList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * {@code DeleteStudentCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DeleteStudentCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student studentToDelete \u003d model.getFilteredStudentList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteStudentCommand.MESSAGE_DELETE_STUDENT_SUCCESS, studentToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.deleteStudent(studentToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        showNoStudent(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(deleteStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of Tutor\u0027s Pet list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getStudentList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        DeleteStudentCommand deleteStudentCommand \u003d new DeleteStudentCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(deleteStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteStudentCommand deleteFirstCommand \u003d new DeleteStudentCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteStudentCommand deleteSecondCommand \u003d new DeleteStudentCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteStudentCommand deleteFirstCommandCopy \u003d new DeleteStudentCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private void showNoStudent(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model.updateFilteredStudentList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(model.getFilteredStudentList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 12,
      "dextertanyj": 4,
      "ypinhsuan": 25,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditLessonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FRI_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Lesson EDITED_LESSON \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final EditLessonCommand.EditLessonDescriptor EDITED_LESSON_DESCRIPTOR \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            new EditLessonDescriptorBuilder(EDITED_LESSON).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_nullModuleClasdIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditLessonCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                null, INDEX_FIRST_ITEM, EDITED_LESSON_DESCRIPTOR));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_nullLessonIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EditLessonCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, null, EDITED_LESSON_DESCRIPTOR));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor editLessonDescriptor \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder(DESC_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, editLessonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d getAttendanceRecordList(moduleClass, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withAttendanceRecordList(attendanceRecordList).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cLesson\u003e editedLessonList \u003d Arrays.asList(editedLesson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass updatedModuleClass \u003d new ModuleClass("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                moduleClass.getName(), moduleClass.getStudentUuids(), editedLessonList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditLessonCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.setModuleClass(moduleClass, updatedModuleClass);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess(editLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass firstModuleClass \u003d model.getFilteredModuleClassList()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        LessonBuilder firstLessonInList \u003d new LessonBuilder(firstModuleClass.getLessons()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .get(INDEX_FIRST_ITEM.getZeroBased()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d getAttendanceRecordList(firstModuleClass, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson editedLesson \u003d firstLessonInList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withAttendanceRecordList(attendanceRecordList).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cLesson\u003e editedLessonList \u003d Arrays.asList(editedLesson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass updatedModuleClass \u003d new ModuleClass("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                firstModuleClass.getName(), firstModuleClass.getStudentUuids(), editedLessonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditLessonCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.setModuleClass(firstModuleClass, updatedModuleClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess(editLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, new EditLessonCommand.EditLessonDescriptor());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        System.out.println(new EditLessonCommand.EditLessonDescriptor().getDay());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson editedLesson \u003d model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .getLessons().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditLessonCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess(editLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder().withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass moduleClassInFilteredList \u003d model.getFilteredModuleClassList()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson lessonToEdit \u003d moduleClassInFilteredList.getLessons().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                getAttendanceRecordList(moduleClassInFilteredList, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder(lessonToEdit)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withAttendanceRecordList(attendanceRecordList).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(EditLessonCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cLesson\u003e editedLessonList \u003d Arrays.asList("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                moduleClassInFilteredList.getLessons().get(INDEX_FIRST_ITEM.getZeroBased()),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                editedLesson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass updatedModuleClass \u003d new ModuleClass("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                moduleClassInFilteredList.getName(), moduleClassInFilteredList.getStudentUuids(), editedLessonList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.setModuleClass(moduleClassInFilteredList, updatedModuleClass);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess(editLessonCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_duplicateLessonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass secondModuleClass \u003d model.getFilteredModuleClassList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson secondClassFirstLesson \u003d secondModuleClass.getLessons().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder(secondClassFirstLesson).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(INDEX_SECOND_ITEM, INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandFailure(editLessonCommand, model, EditLessonCommand.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_invalidModuleClassIndex_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(outOfBoundIndex, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder().withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandFailure(editLessonCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * but smaller than size of class list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_invalidModuleClassIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(outOfBoundIndex, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder().withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandFailure(editLessonCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_invalidLessonIndex_failure() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand editLessonCommand \u003d new EditLessonCommand(moduleClassIndex, outOfBoundIndex,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder().withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandFailure(editLessonCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        final EditLessonCommand standardCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, DESC_LESSON_FRI_8_TO_10);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonCommand.EditLessonDescriptor(DESC_LESSON_FRI_8_TO_10);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand commandWithSameValues \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different module class index -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLessonCommand("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_SECOND_ITEM, INDEX_FIRST_ITEM, DESC_LESSON_FRI_8_TO_10)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different lesson index -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLessonCommand("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_SECOND_ITEM, DESC_LESSON_FRI_8_TO_10)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different class and lesson index -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLessonCommand("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_SECOND_ITEM, INDEX_SECOND_ITEM, DESC_LESSON_FRI_8_TO_10)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditLessonCommand("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, DESC_LESSON_WED_2_TO_4)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private AttendanceRecordList getAttendanceRecordList(ModuleClass moduleClass, Index index) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return moduleClass.getLessons().get(index.getZeroBased()).getAttendanceRecordList();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 244,
      "junlong4321": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditLessonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FRI_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonDescriptorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonCommand.EditLessonDescriptor(DESC_LESSON_WED_2_TO_4);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(DESC_LESSON_WED_2_TO_4.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(DESC_LESSON_WED_2_TO_4.equals(DESC_LESSON_WED_2_TO_4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(DESC_LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor editedLesson \u003d new EditLessonDescriptorBuilder(DESC_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withStartTime(\"00:01\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(editedLesson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different endTime -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedLesson \u003d new EditLessonDescriptorBuilder(DESC_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(\"23:59\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(editedLesson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedLesson \u003d new EditLessonDescriptorBuilder(DESC_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString()).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(editedLesson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedLesson \u003d new EditLessonDescriptorBuilder(DESC_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(DESC_LESSON_WED_2_TO_4.equals(editedLesson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2100_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2030_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.EditModuleClassDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.TypicalModuleClass;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * {@code EditModuleClassCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass editedModuleClass \u003d new ModuleClassBuilder(TypicalModuleClass.CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d new EditModuleClassDescriptorBuilder(editedModuleClass).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleClassCommand.MESSAGE_EDIT_MODULE_CLASS_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                editedModuleClass);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.setModuleClass(model.getFilteredModuleClassList().get(0), editedModuleClass);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(editModuleClassCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index indexLastModuleClass \u003d Index.fromOneBased(model.getFilteredModuleClassList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass lastModuleClass \u003d model.getFilteredModuleClassList().get(indexLastModuleClass.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClassBuilder moduleClassInList \u003d new ModuleClassBuilder(lastModuleClass);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedModuleClass \u003d moduleClassInList.withName(VALID_NAME_CS2030_TUTORIAL).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d new EditModuleClassDescriptorBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .withName(VALID_NAME_CS2030_TUTORIAL).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(indexLastModuleClass, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleClassCommand.MESSAGE_EDIT_MODULE_CLASS_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                editedModuleClass);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.setModuleClass(lastModuleClass, editedModuleClass);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(editModuleClassCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClassInFilteredList \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass editedModuleClass \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new ModuleClassBuilder(moduleClassInFilteredList).withName(VALID_NAME_CS2030_TUTORIAL).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2030_TUTORIAL).build());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleClassCommand.MESSAGE_EDIT_MODULE_CLASS_SUCCESS,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                editedModuleClass);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.setModuleClass(model.getFilteredModuleClassList().get(0), editedModuleClass);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(editModuleClassCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_duplicateModuleClassUnfilteredList_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass firstModuleClass \u003d model.getFilteredModuleClassList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d new EditModuleClassDescriptorBuilder(firstModuleClass).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(INDEX_SECOND_ITEM,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(editModuleClassCommand, model, EditModuleClassCommand.MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_duplicateModuleClassFilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // edit ModuleClass in filtered list into a duplicate in Tutor\u0027s Pet"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClassInList \u003d model.getTutorsPet().getModuleClassList()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder(moduleClassInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(editModuleClassCommand, model, EditModuleClassCommand.MESSAGE_DUPLICATE_MODULE_CLASS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2030_TUTORIAL).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(editModuleClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * but smaller than size of the class list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the class list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand editModuleClassCommand \u003d new EditModuleClassCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2030_TUTORIAL).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(editModuleClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        final EditModuleClassCommand standardCommand \u003d new EditModuleClassCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DESC_CS2100_LAB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EditModuleClassDescriptor copyDescriptor \u003d new EditModuleClassDescriptor(DESC_CS2100_LAB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand commandWithSameValue \u003d new EditModuleClassCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValue));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand.equals(1));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different index -\u003e return false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .equals(new EditModuleClassCommand(INDEX_SECOND_ITEM, DESC_CS2100_LAB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different descriptor -\u003e return false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .equals(new EditModuleClassCommand(INDEX_FIRST_ITEM, DESC_CS2103T_TUTORIAL)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 160,
      "dextertanyj": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleClassDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2100_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.EditModuleClassDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand.EditModuleClassDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new EditModuleClassCommand.EditModuleClassDescriptor(DESC_CS2100_LAB);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(DESC_CS2100_LAB.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(DESC_CS2100_LAB.equals(DESC_CS2100_LAB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(DESC_CS2100_LAB.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(DESC_CS2100_LAB.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different value -\u003e return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(DESC_CS2100_LAB.equals(DESC_CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different name -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        EditModuleClassCommand.EditModuleClassDescriptor editedCs2100Lab \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new EditModuleClassDescriptorBuilder(DESC_CS2100_LAB).withName(VALID_NAME_CS2103T_TUTORIAL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(DESC_CS2100_LAB.equals(editedCs2100Lab));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 30,
      "dextertanyj": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * {@code EditStudentCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(editedStudent).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_ITEM, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Index indexLastStudent \u003d Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student lastStudent \u003d model.getFilteredStudentList().get(indexLastStudent.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        StudentBuilder studentInList \u003d new StudentBuilder(lastStudent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Student editedStudent \u003d studentInList.withName(VALID_NAME_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withName(VALID_NAME_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(indexLastStudent, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.setStudent(lastStudent, editedStudent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditStudentCommand(INDEX_FIRST_ITEM, new EditStudentCommand.EditStudentDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student editedStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student studentInFilteredList \u003d model.getFilteredStudentList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedStudent \u003d new StudentBuilder(studentInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditStudentCommand.MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorsPet(model.getTutorsPet()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.setStudent(model.getFilteredStudentList().get(0), editedStudent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(editStudentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_duplicateStudentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student firstStudent \u003d model.getFilteredStudentList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(firstStudent).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_SECOND_ITEM, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_duplicateStudentFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // edit student in filtered list into a duplicate in Tutor\u0027s Pet"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student studentInList \u003d model.getTutorsPet().getStudentList().get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder(studentInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, EditStudentCommand.MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * but smaller than size of student list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getStudentList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand editStudentCommand \u003d new EditStudentCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandFailure(editStudentCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        final EditStudentCommand standardCommand \u003d new EditStudentCommand(INDEX_FIRST_ITEM, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor copyDescriptor \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditStudentCommand commandWithSameValues \u003d new EditStudentCommand(INDEX_FIRST_ITEM, copyDescriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand.equals(1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_SECOND_ITEM, DESC_AMY)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(standardCommand.equals(new EditStudentCommand(INDEX_FIRST_ITEM, DESC_BOB)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 20,
      "ruixuantan": 5,
      "dextertanyj": 5,
      "ypinhsuan": 57,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditStudentDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentDescriptor descriptorWithSameValues \u003d new EditStudentCommand.EditStudentDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different telegram -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAmy \u003d new EditStudentDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3,
      "ypinhsuan": 9,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindAttendanceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindAttendanceCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindAttendanceCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullIndexes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(null, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, null, INDEX_FIRST_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, null, VALID_WEEK_1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void constructor_nullWeek_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasLesson(lesson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasStudentUuid(student.getUuid());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert lesson.getAttendanceRecordList().hasAttendance(student, targetWeek);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d lesson.getAttendanceRecordList().getAttendance(student, targetWeek);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(FindAttendanceCommand.MESSAGE_SUCCESS, student.getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                targetWeek, attendance);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(findAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week targetWeek \u003d VALID_WEEK_1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasLesson(lesson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasStudentUuid(student.getUuid());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert lesson.getAttendanceRecordList().hasAttendance(student, targetWeek);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d lesson.getAttendanceRecordList().getAttendance(student, targetWeek);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(FindAttendanceCommand.MESSAGE_SUCCESS, student.getName(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                targetWeek, attendance);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.updateFilteredModuleClassList(c -\u003e c.isSameModuleClass(moduleClass));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.updateFilteredStudentList(s -\u003e s.isSameStudent(student));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, targetWeek);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(findAttendanceCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_studentNotInClass_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasLesson(lesson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d new FindAttendanceCommand(moduleClassIndex, lessonIndex,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                INDEX_THIRD_ITEM, VALID_WEEK_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_INVALID_STUDENT_IN_MODULE_CLASS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidClassIndex_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(outOfBoundIndex, lessonIndex, studentIndex, VALID_WEEK_1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidLessonIndex_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(moduleClass.getLessons().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(moduleClassIndex, outOfBoundIndex, studentIndex, VALID_WEEK_1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidStudentIndex_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d new FindAttendanceCommand(moduleClassIndex,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                lessonIndex, outOfBoundIndex, VALID_WEEK_1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_invalidWeek_failure() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                .getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week invalidWeek \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new Week(Index.fromOneBased(lesson.getAttendanceRecordList().getAttendanceRecordList().size() + 1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, invalidWeek);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_INVALID_WEEK);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_noStudentAttendance_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index lessonIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week \u003d VALID_WEEK_5;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Lesson lesson \u003d moduleClass.getLessons().get(lessonIndex.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasLesson(lesson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assert moduleClass.hasStudentUuid(student.getUuid());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(moduleClassIndex, lessonIndex, studentIndex, week);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandFailure(findAttendanceCommand, model, Messages.MESSAGE_MISSING_STUDENT_ATTENDANCE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week1 \u003d new Week(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week2 \u003d new Week(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommand \u003d new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                INDEX_FIRST_ITEM, week1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(findAttendanceCommand.equals(findAttendanceCommand));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand duplicateFindAttendanceCommand \u003d new FindAttendanceCommand(INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, week1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(findAttendanceCommand.equals(findAttendanceCommand));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findAttendanceCommand.equals(5));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findAttendanceCommand.equals(null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different weeks -\u003e return false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindAttendanceCommand findAttendanceCommandDifferentWeek \u003d"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, week2);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findAttendanceCommand.equals(findAttendanceCommandDifferentWeek));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 223
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULE_CLASS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindModuleClassCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindModuleClassCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        NameContainsKeywordsPredicate\u003cModuleClass\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        NameContainsKeywordsPredicate\u003cModuleClass\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand findFirstCommand \u003d new FindModuleClassCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand findSecondCommand \u003d new FindModuleClassCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand findFirstCommandCopy \u003d new FindModuleClassCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // different keyword -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_zeroKeywords_noModuleClassFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULE_CLASS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        NameContainsKeywordsPredicate\u003cModuleClass\u003e predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand command \u003d new FindModuleClassCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.updateFilteredModuleClassList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_singleKeyword_multipleModuleClassesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULE_CLASS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        NameContainsKeywordsPredicate\u003cModuleClass\u003e predicate \u003d preparePredicate(\"Tutorial\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand command \u003d new FindModuleClassCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.updateFilteredModuleClassList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T_TUTORIAL, CS2100_TUTORIAL), model.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void execute_multipleKeywords_multipleModuleClassesFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULE_CLASS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        NameContainsKeywordsPredicate\u003cModuleClass\u003e predicate \u003d preparePredicate(\"Lab CS2103T\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand command \u003d new FindModuleClassCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        expectedModel.updateFilteredModuleClassList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T_TUTORIAL, CS2100_LAB), model.getFilteredModuleClassList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordPredicate\u003cModuleClass\u003e}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private NameContainsKeywordsPredicate\u003cModuleClass\u003e preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_STUDENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindStudentCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class FindStudentCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cStudent\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cStudent\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand findFirstCommand \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand findSecondCommand \u003d new FindStudentCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand findFirstCommandCopy \u003d new FindStudentCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_zeroKeywords_noStudentFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cStudent\u003e predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_multipleKeywords_multipleStudentsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_STUDENTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cStudent\u003e predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand command \u003d new FindStudentCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.updateFilteredStudentList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredStudentList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordPredicate\u003cStudent\u003e}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private NameContainsKeywordsPredicate\u003cStudent\u003e preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new NameContainsKeywordsPredicate\u003cStudent\u003e(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 13,
      "ypinhsuan": 22,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.MESSAGE_SHOWING_HELP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SHOWING_HELP, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LinkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.UnlinkCommandTest.copyModelWithModuleClassAndShowStudents;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getNoLinkTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code LinkCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class LinkCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model \u003d new ModelManager(getNoLinkTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullStudentIndex_throwNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkCommand(INDEX_FIRST_ITEM, null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullModuleClassIndex_throwNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkCommand(null, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // manually link first class to first student"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualLinkStudentToModuleClass(moduleClass, student);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(LinkCommand.MESSAGE_LINK_SUCCESS, student.getName(), modifiedModuleClass);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d copyModelWithModuleClassAndShowStudents(model, moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new LinkCommand(moduleClassIndex, studentIndex), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // manually link first class to first student"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualLinkStudentToModuleClass(moduleClass, student);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(LinkCommand.MESSAGE_LINK_SUCCESS, student.getName(), modifiedModuleClass);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d copyModelWithModuleClassAndShowStudents(model, moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new LinkCommand(moduleClassIndex, studentIndex), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_existingStudent_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // manually link first class to first student"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualLinkStudentToModuleClass(moduleClass, student);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // update model with modified class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.setModuleClass(moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(linkCommand, model, LinkCommand.MESSAGE_EXISTING_LINK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(INDEX_FIRST_ITEM, outOfBoundIndex);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(linkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getStudentList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(INDEX_FIRST_ITEM, outOfBoundIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(linkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(outOfBoundIndex, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(linkCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of class list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(outOfBoundIndex, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(linkCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommand \u003d new LinkCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same indexes -\u003e return true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommandCopy \u003d new LinkCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(linkCommand.equals(linkCommandCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(linkCommand.equals(linkCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(linkCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(linkCommand.equals(5));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different student index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommandDifferentStudent \u003d new LinkCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(linkCommand.equals(linkCommandDifferentStudent));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different class index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        LinkCommand linkCommandDifferentClass \u003d new LinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(linkCommand.equals(linkCommandDifferentClass));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new {@code ModuleClass} based on the given {@code moduleClass} but with the specified {@code student}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * added."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Requires {@code student} to not have an existing link with {@code moduleClass}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static ModuleClass manualLinkStudentToModuleClass(ModuleClass moduleClass, Student student) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d new HashSet\u003c\u003e(moduleClass.getStudentUuids());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(studentUuids.contains(student.getUuid()), \"Test precondition error: The selected module class\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + \" already contains the selected student.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentUuids.add(student.getUuid());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(moduleClass.getName(), studentUuids, moduleClass.getLessons());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_studentListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_studentListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_moduleClassListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_moduleClassListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ypinhsuan": 20,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListModuleClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListModuleClassCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListModuleClassCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_moduleClassListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new ListModuleClassCommand(), model, ListModuleClassCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void execute_moduleClassListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new ListModuleClassCommand(), model, ListModuleClassCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListStudentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListStudentCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class ListStudentCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_noIndexStudentListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ListStudentCommand.MESSAGE_LIST_ALL_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_noIndexStudentListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ListStudentCommand(), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ListStudentCommand.MESSAGE_LIST_ALL_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentCommand listStudentCommand \u003d new ListStudentCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ListStudentCommand -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentCommand listStudentCommandCopy \u003d new ListStudentCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(listStudentCommand.equals(listStudentCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(listStudentCommand.equals(listStudentCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(listStudentCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(listStudentCommand.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "dextertanyj": 31,
      "ruixuantan": 2,
      "ypinhsuan": 3,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListStudentInClassCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.StudentInUuidCollectionPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListStudentInClassCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_indexSpecifiedListsNotFiltered_showsStudentsInClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listStudentInClassCommand \u003d new ListStudentInClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass selectedClass \u003d showStudentsInModuleClassAtIndex(expectedModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(listStudentInClassCommand, model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(ListStudentInClassCommand.MESSAGE_LIST_CLASS_SPECIFIC_SUCCESS, selectedClass),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_indexSpecifiedStudentListIsFiltered_showsStudentsInClass() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listStudentInClassCommand \u003d new ListStudentInClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass selectedClass \u003d showStudentsInModuleClassAtIndex(expectedModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(listStudentInClassCommand, model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(ListStudentInClassCommand.MESSAGE_LIST_CLASS_SPECIFIC_SUCCESS, selectedClass),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_indexSpecifiedClassListIsFiltered_showsStudentsInClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(expectedModel, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listStudentInClassCommand \u003d new ListStudentInClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass selectedClass \u003d showStudentsInModuleClassAtIndex(expectedModel, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(listStudentInClassCommand, model,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(ListStudentInClassCommand.MESSAGE_LIST_CLASS_SPECIFIC_SUCCESS, selectedClass),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidIndexSpecifiedClassListIsNotFiltered_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listStudentInClassCommand \u003d new ListStudentInClassCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(listStudentInClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidIndexSpecifiedClassListIsFiltered_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the class list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listStudentInClassCommand \u003d new ListStudentInClassCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(listStudentInClassCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listClassOneCommand \u003d new ListStudentInClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listClassTwoCommand \u003d new ListStudentInClassCommand(INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same class -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ListStudentInClassCommand listClassOneCommandCopy \u003d new ListStudentInClassCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(listClassOneCommand.equals(listClassOneCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(listClassOneCommand.equals(listClassOneCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(listClassOneCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(listClassOneCommand.equals(5));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different class -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(listClassOneCommand.equals(listClassTwoCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Updates {@code model}\u0027s {@code filteredStudents} list to show only the students in the {@code ModuleClass}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * as specified by the given {@code moduleClassIndex} in the {@code model}\u0027s displayed class list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ModuleClass showStudentsInModuleClassAtIndex(Model model, Index moduleClassIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass selectedClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Collection\u003cUUID\u003e expectedStudents \u003d selectedClass.getStudentUuids();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.updateFilteredStudentList(new StudentInUuidCollectionPredicate(expectedStudents));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return selectedClass;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_hasNextState_throwsCommandException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(RedoCommand.MESSAGE_SUCCESS, COMMIT_MESSAGE_1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_noNextState_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NO_PREVIOUS_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ResetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class ResetCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_emptyTutorsPet_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ResetCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(new ResetCommand(), model, ResetCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void execute_nonEmptyTutorsPet_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedModel.setTutorsPet(new TutorsPet());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(ResetCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertCommandSuccess(new ResetCommand(), model, ResetCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ypinhsuan": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_hasPreviousState_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_noPreviousState_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_NO_PREVIOUS_COMMAND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnlinkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showModuleClassAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showStudentAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code UnlinkCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UnlinkCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullStudentIndex_throwNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkCommand(INDEX_FIRST_ITEM, null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullModuleClassIndex_throwNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LinkCommand(null, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // manually unlink first student from first class"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualUnlinkStudentFromModuleClass(moduleClass, student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(UnlinkCommand.MESSAGE_UNLINK_SUCCESS, student.getName(), modifiedModuleClass);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d copyModelWithModuleClassAndShowStudents(model, moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new UnlinkCommand(moduleClassIndex, studentIndex), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_THIRD_ITEM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index moduleClassIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index studentIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // manually unlink first student from first class"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d model.getFilteredModuleClassList().get(moduleClassIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Student student \u003d model.getFilteredStudentList().get(studentIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d manualUnlinkStudentFromModuleClass(moduleClass, student);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(UnlinkCommand.MESSAGE_UNLINK_SUCCESS, student.getName(), modifiedModuleClass);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d copyModelWithModuleClassAndShowStudents(model, moduleClass, modifiedModuleClass);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new UnlinkCommand(moduleClassIndex, studentIndex), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_studentNotInModuleClass_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(INDEX_FIRST_ITEM, INDEX_THIRD_ITEM);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(unlinkCommand, model, UnlinkCommand.MESSAGE_MISSING_LINK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidStudentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredStudentList().size() + 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(INDEX_FIRST_ITEM, outOfBoundIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(unlinkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidStudentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showStudentAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of student list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getStudentList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(INDEX_FIRST_ITEM, outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(unlinkCommand, model, Messages.MESSAGE_INVALID_STUDENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleClassList().size() + 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(outOfBoundIndex, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(unlinkCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_invalidModuleClassIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        showModuleClassAtIndex(model, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of class list"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorsPet().getModuleClassList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(outOfBoundIndex, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandFailure(unlinkCommand, model, Messages.MESSAGE_INVALID_MODULE_CLASS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommand \u003d new UnlinkCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same indexes -\u003e return true"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommandCopy \u003d new UnlinkCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(unlinkCommand.equals(unlinkCommandCopy));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(unlinkCommand.equals(unlinkCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(unlinkCommand.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(unlinkCommand.equals(5));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different student index -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommandDifferentStudent \u003d new UnlinkCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(unlinkCommand.equals(unlinkCommandDifferentStudent));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different class index -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UnlinkCommand unlinkCommandDifferentClass \u003d new UnlinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(unlinkCommand.equals(unlinkCommandDifferentClass));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new {@code Model} based on the given {@code model} where {@code toReplace} has been replaced with"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code toSet} and the {@code filteredModuleClasses} list shows only {@code toSet} while the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code filteredStudents} list shows only students in {@code toSet}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Model copyModelWithModuleClassAndShowStudents(Model model, ModuleClass toReplace, ModuleClass toSet) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d toSet.getStudentUuids();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.setModuleClass(toReplace, toSet);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.updateFilteredStudentList(s -\u003e studentUuids.contains(s.getUuid()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.updateFilteredModuleClassList(c -\u003e c.isSameModuleClass(toSet));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return expectedModel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a new {@code ModuleClass} based on the given {@code moduleClass} but with the specified {@code student}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * removed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Requires {@code student} to be linked to {@code moduleClass}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static ModuleClass manualUnlinkStudentFromModuleClass(ModuleClass moduleClass, Student student) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d new HashSet\u003c\u003e(moduleClass.getStudentUuids());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(studentUuids.contains(student.getUuid()), \"Test precondition error: The selected module class\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        + \" does not contain the selected student.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentUuids.remove(student.getUuid());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(moduleClass.getName(), studentUuids, moduleClass.getLessons());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ViewHistoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPet.INITIAL_COMMIT_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ViewHistoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.commit(COMMIT_MESSAGE_3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.commit(COMMIT_MESSAGE_3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_latestState_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_TEMPLATE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \"\\n\" + ViewHistoryCommand.CURRENT_INDICATOR + COMMIT_MESSAGE_3 + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + COMMIT_MESSAGE_2 + \"\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + COMMIT_MESSAGE_1 + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + INITIAL_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ViewHistoryCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_earliestState_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_TEMPLATE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \"\\n\" + COMMIT_MESSAGE_3 + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + COMMIT_MESSAGE_2 + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + COMMIT_MESSAGE_1 + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + ViewHistoryCommand.CURRENT_INDICATOR + INITIAL_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ViewHistoryCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_intermediateState_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel.undo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_TEMPLATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \"\\n\" + COMMIT_MESSAGE_3 + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + ViewHistoryCommand.CURRENT_INDICATOR + COMMIT_MESSAGE_2 + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + COMMIT_MESSAGE_1 + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + INITIAL_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ViewHistoryCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void execute_noPreviousState_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalTutorsPet(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(ViewHistoryCommand.MESSAGE_TEMPLATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \"\\n\" + ViewHistoryCommand.CURRENT_INDICATOR + INITIAL_COMMIT_MESSAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertCommandSuccess(new ViewHistoryCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddAttendanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_LOWER_BOUND_SCORE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_UPPER_BOUND_SCORE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEEK_LOWER_BOUND_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEEK_UPPER_BOUND_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPATION_SCORE_DESC_51;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPATION_SCORE_DESC_80;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEEK_DESC_WEEK_VALUE_3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEEK_DESC_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class AddAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private AddAttendanceCommandParser parser \u003d new AddAttendanceCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance expectedAttendance \u003d new Attendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week expectedWeek \u003d new Week(Index.fromOneBased(VALID_WEEK_VALUE_5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" c/1 l/1 s/1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple class indexes - last class index accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/2 l/1 s/1 c/1\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple lesson indexes - last lesson index accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/2 s/1 l/1\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple student indexes - last student index accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/2 s/1\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple week values - last week value accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_3 + PARTICIPATION_SCORE_DESC_80 + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple participation scores - last week value accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + PARTICIPATION_SCORE_DESC_51 + PARTICIPATION_SCORE_DESC_80 + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek, expectedAttendance));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing class prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" 1 l/1 s/1\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing lesson prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 1 s/1\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing student prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 1\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing week prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + VALID_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing participation score prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + VALID_PARTICIPATION_SCORE_80,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing class index"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/ l/1 s/1\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing lesson index"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/ s/1\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing student index"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing week value"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_WEEK + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing participation score"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PREFIX_PARTICIPATION_SCORE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid class index"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/\u0026 l/1 s/1\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid lesson index"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/\u0026 s/1\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid student index"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/\u0026\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid week value - lower-bound"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + INVALID_WEEK_LOWER_BOUND_DESC + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid week value - upper-bound"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + INVALID_WEEK_UPPER_BOUND_DESC + PARTICIPATION_SCORE_DESC_80,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid participation score - lower-bound"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + INVALID_PARTICIPATION_LOWER_BOUND_SCORE_DESC,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid participation score - upper-bound"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5 + INVALID_PARTICIPATION_UPPER_BOUND_SCORE_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NUMBER_OF_OCCURRENCES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NUMBER_OF_OCCURRENCES_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FRI_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_1000_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_OCCURRENCES_13_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_0800_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class AddLessonCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private AddLessonCommandParser parser \u003d new AddLessonCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" c/1\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple class indexes - last class index accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" c/1\" + \" c/1\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple days - last day accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1\" + DAY_DESC_LESSON_WED_2_TO_4 + DAY_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + START_TIME_DESC_LESSON_FRI_8_TO_10 + END_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VENUE_DESC_LESSON_FRI_8_TO_10 + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple start times - last start time accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1\" + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_WED_2_TO_4"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + START_TIME_DESC_LESSON_FRI_8_TO_10 + END_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VENUE_DESC_LESSON_FRI_8_TO_10 + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple end times - last end time accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1\" + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_WED_2_TO_4 + END_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VENUE_DESC_LESSON_FRI_8_TO_10 + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple number of venues - last venue accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1\" + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_WED_2_TO_4"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VENUE_DESC_LESSON_FRI_8_TO_10 + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple number of occurrences - last occurrence value accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1\" + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_WED_2_TO_4 + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new AddLessonCommand(INDEX_FIRST_ITEM, expectedLesson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing class prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" 1\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing day prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VALID_DAY_FRI_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing start time prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + VALID_START_TIME_0800_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing end time prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VALID_END_TIME_1000_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing venue prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // missing number of occurrences prefix"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + VALID_NUMBER_OF_OCCURRENCES_13_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid class index"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/\u0026\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid class index"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" s/1\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + INVALID_DAY_DESC + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + INVALID_END_TIME_DESC + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid venue"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + INVALID_VENUE_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + NUMBER_OF_OCCURRENCES_DESC_LESSON_FRI_8_TO_10, Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid number of occurrences"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + INVALID_NUMBER_OF_OCCURRENCES_DESC, NumberOfOccurrences.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 2,
      "junlong4321": 184
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleClassCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2100_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2100_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.AddModuleClassCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class AddModuleClassCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private AddModuleClassCommandParser parser \u003d new AddModuleClassCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_namePresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass expectedModuleClass \u003d new ModuleClassBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withName(VALID_NAME_CS2103T_TUTORIAL)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withStudentUuids().withLessons().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS2103T_TUTORIAL,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new AddModuleClassCommand(expectedModuleClass));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS2100_LAB + NAME_DESC_CS2103T_TUTORIAL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new AddModuleClassCommand(expectedModuleClass));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_nameMissing_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleClassCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2100_LAB, expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidName_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TELEGRAM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AVERAGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EXPERIENCED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EXPERIENCED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class AddStudentCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private AddStudentCommandParser parser \u003d new AddStudentCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(BOB).withTags(VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_EXPERIENCED, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_EXPERIENCED, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // multiple telegram - last telegram accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_AMY + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_EXPERIENCED, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_EXPERIENCED, new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Student expectedStudentMultipleTags \u003d new StudentBuilder(BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withTags(VALID_TAG_EXPERIENCED, VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_AVERAGE + TAG_DESC_EXPERIENCED, new AddStudentCommand(expectedStudentMultipleTags));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student expectedStudent \u003d new StudentBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new AddStudentCommand(expectedStudent));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // missing telegram prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_TELEGRAM_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_TELEGRAM_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_AVERAGE + TAG_DESC_EXPERIENCED, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid telegram"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TELEGRAM_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + TAG_DESC_AVERAGE + TAG_DESC_EXPERIENCED, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_AVERAGE + TAG_DESC_EXPERIENCED, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_EXPERIENCED, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + TAG_DESC_AVERAGE + TAG_DESC_EXPERIENCED,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TELEGRAM_DESC_BOB + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 30,
      "dextertanyj": 3,
      "ypinhsuan": 26,
      "junlong4321": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteAttendanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.model.attendance.Week.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * As we are only doing white-box testing, out test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * outside of the DeleteAttendanceCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * same path through the DeleteAttendanceCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * The path variations for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class DeleteAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private DeleteAttendanceCommandParser parser \u003d new DeleteAttendanceCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_validArgs_returnsDeleteAttendanceCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 w/1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple class indexes -\u003e last class index accepted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 c/2 s/1 w/1\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple lesson indexes -\u003e last lesson index accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 l/2 w/1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM, INDEX_FIRST_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        // multiple student indexes -\u003e last student index accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 w/1 s/2\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_SECOND_ITEM, VALID_WEEK_1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 w/1 w/5\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, VALID_WEEK_5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_missingClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" l/1 s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_missingLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_missingStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_missingWeekIndex_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/a l/1 s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/a s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/a w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidWeekIndex_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1 w/a\", String.format(MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_emptyClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/ l/1 s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_emptyLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/ s/1 w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_emptyStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/ w/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_emptyWeekIndex_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1 w/\", String.format(MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parse_invalidArgs_throwParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertParseFailure(parser, \" a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                DeleteAttendanceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junlong4321": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * As we are only doing white-box testing, out test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * outside of the DeleteLessonCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * same path through the DeleteLessonCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * The path variations for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class DeleteLessonCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private DeleteLessonCommandParser parser \u003d new DeleteLessonCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_validArgs_returnsDeleteLessonCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1\", new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple class indexes -\u003e last class index accepted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 c/2\", new DeleteLessonCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple lesson indexes -\u003e last lesson index accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" l/1 c/1 l/2\", new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_missingClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" l/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_missingLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/a l/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_emptyClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/ l/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_emptyLessonIndex_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidArgs_throwParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                DeleteLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteModuleClassCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleClassCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * outside of the DeleteModuleClassCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * same path through the DeleteModuleClassCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class DeleteModuleClassCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private DeleteModuleClassCommandParser parser \u003d new DeleteModuleClassCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_validArgs_returnsDeleteModuleClassCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteModuleClassCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DeleteModuleClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 1,
      "dextertanyj": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * outside of the DeleteStudentCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * same path through the DeleteStudentCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class DeleteStudentCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private DeleteStudentCommandParser parser \u003d new DeleteStudentCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parse_validArgs_returnsDeleteStudentCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteStudentCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                DeleteStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 2,
      "ypinhsuan": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VENUE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_FRI_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_WED_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_1000_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_0800_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VENUE_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Index VALID_MODULE_CLASS_INDEX_ONE \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Index VALID_LESSON_INDEX_TWO \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INPUT_PREAMBLE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            \" c/\" + VALID_MODULE_CLASS_INDEX_ONE.getOneBased() + \" l/\" + VALID_LESSON_INDEX_TWO.getOneBased();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private EditLessonCommandParser parser \u003d new EditLessonCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // no class index specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" l/1\" + DAY_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // no lesson index specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1\" + DAY_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // no class and lesson index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, DAY_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/-5 l/1\" + DAY_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/0\" + DAY_DESC_LESSON_FRI_8_TO_10, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" 1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1\" + INVALID_DAY_DESC, Day.MESSAGE_CONSTRAINTS); // invalid day"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                parser, \" c/1 l/1\" + INVALID_START_TIME_DESC, ParserUtil.MESSAGE_INVALID_TIME); // invalid start time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                parser, \" c/1 l/1\" + INVALID_END_TIME_DESC, ParserUtil.MESSAGE_INVALID_TIME); // invalid end time"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1\" + INVALID_VENUE_DESC, Venue.MESSAGE_CONSTRAINTS); // invalid venue"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid venue followed by valid start time"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1\" + INVALID_VENUE_DESC + START_TIME_DESC_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // valid venue followed by invalid venue. The test case for invalid venue followed by valid venue"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1\" + VENUE_DESC_LESSON_FRI_8_TO_10 + INVALID_VENUE_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                \" c/1 l/1\" + INVALID_DAY_DESC + INVALID_START_TIME_DESC + VALID_START_TIME_0800_LESSON_FRI_8_TO_10,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d INPUT_PREAMBLE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + DAY_DESC_LESSON_FRI_8_TO_10 + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + END_TIME_DESC_LESSON_FRI_8_TO_10 + VENUE_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withStartTime(VALID_START_TIME_0800_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d INPUT_PREAMBLE + DAY_DESC_LESSON_FRI_8_TO_10 + END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // day"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d INPUT_PREAMBLE + DAY_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder().withDay(VALID_DAY_FRI_LESSON_FRI_8_TO_10.toString()).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // start time"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d INPUT_PREAMBLE + START_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder().withStartTime(VALID_START_TIME_0800_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // end time"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d INPUT_PREAMBLE + END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder().withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // venue"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d INPUT_PREAMBLE + VENUE_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder().withVenue(VALID_VENUE_S17_0302_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d INPUT_PREAMBLE + VENUE_DESC_LESSON_FRI_8_TO_10 + DAY_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + VENUE_DESC_LESSON_FRI_8_TO_10 + DAY_DESC_LESSON_WED_2_TO_4 + VENUE_DESC_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        .withDay(VALID_DAY_WED_LESSON_WED_2_TO_4.toString())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        .withVenue(VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d INPUT_PREAMBLE + INVALID_END_TIME_DESC + END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d INPUT_PREAMBLE + START_TIME_DESC_LESSON_FRI_8_TO_10"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + INVALID_END_TIME_DESC + END_TIME_DESC_LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withStartTime(VALID_START_TIME_0800_LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEndTime(VALID_END_TIME_1000_LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedCommand \u003d new EditLessonCommand("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_MODULE_CLASS_INDEX_ONE, VALID_LESSON_INDEX_TWO, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditModuleClassCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2100_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2100_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.EditModuleClassDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleClassCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private EditModuleClassCommandParser parser \u003d new EditModuleClassCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2100_LAB, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1\", EditModuleClassCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_CS2103T_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_CS2103T_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid name followed by valid name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_NAME_CS2103T_TUTORIAL,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // valid name followed by invalid name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_CS2103T_TUTORIAL + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand expectedCommand \u003d new EditModuleClassCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CS2100_LAB + NAME_DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand expectedCommand \u003d new EditModuleClassCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new EditModuleClassDescriptorBuilder().withName(VALID_NAME_CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand expectedCommand \u003d new EditModuleClassCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 98,
      "dextertanyj": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TELEGRAM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AVERAGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EXPERIENCED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EXPERIENCED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditStudentCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private EditStudentCommandParser parser \u003d new EditStudentCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"1\", EditStudentCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TELEGRAM_DESC, Telegram.MESSAGE_CONSTRAINTS); // invalid telegram"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid telegram followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TELEGRAM_DESC + EMAIL_DESC_AMY, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // valid telegram followed by invalid telegram. The test case for invalid telegram followed by valid telegram"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TELEGRAM_DESC_BOB + INVALID_TELEGRAM_DESC, Telegram.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Student} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_EXPERIENCED + TAG_DESC_AVERAGE + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_EXPERIENCED + TAG_EMPTY + TAG_DESC_AVERAGE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_EXPERIENCED + TAG_DESC_AVERAGE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_TELEGRAM_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_BOB + TAG_DESC_AVERAGE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_EXPERIENCED;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withTelegram(VALID_TELEGRAM_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withTags(VALID_TAG_AVERAGE, VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new EditStudentDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // telegram"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_EXPERIENCED;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTags(VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + TAG_DESC_EXPERIENCED + TELEGRAM_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_EXPERIENCED"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + TELEGRAM_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_AVERAGE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withTags(VALID_TAG_EXPERIENCED, VALID_TAG_AVERAGE)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_TELEGRAM_DESC + TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand.EditStudentDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_TELEGRAM_DESC"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                + TELEGRAM_DESC_BOB;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptorBuilder().withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand expectedCommand \u003d new EditStudentCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 9,
      "ruixuantan": 29,
      "dextertanyj": 2,
      "ypinhsuan": 38,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindAttendanceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEEK_LOWER_BOUND_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_WEEK_UPPER_BOUND_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEEK_DESC_WEEK_VALUE_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.WEEK_DESC_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindAttendanceCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private FindAttendanceCommandParser parser \u003d new FindAttendanceCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week expectedWeek \u003d new Week(Index.fromOneBased(VALID_WEEK_VALUE_5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \" c/1 l/1 s/1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple class indexes - last class index accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 c/1\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple lesson indexes - last class index accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 l/1\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple student indexes - last student index accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 s/1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple week value indexes - last week value accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" c/1 l/1 s/1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + WEEK_DESC_WEEK_VALUE_3 + WEEK_DESC_WEEK_VALUE_5,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        expectedWeek));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing class prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" 1 l/1 s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing lesson prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 1 s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing student prefix"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing week prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\" + VALID_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing class index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/ l/1 s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing lesson index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/ s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing student index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // missing week value"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\" + PREFIX_WEEK, expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid class index"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/\u0026 l/1 s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid lesson index"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/\u0026 s/1\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid student index"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/\u0026\" + WEEK_DESC_WEEK_VALUE_5, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid week value - lower-bound"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\" + INVALID_WEEK_LOWER_BOUND_DESC, Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // invalid week value - upper-bound"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \" c/1 l/1 s/1\" + INVALID_WEEK_UPPER_BOUND_DESC, Week.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindModuleClassCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindModuleClassCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class FindModuleClassCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private FindModuleClassCommandParser parser \u003d new FindModuleClassCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                FindModuleClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parse_validArgs_returnsFindModuleClassCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        FindModuleClassCommand expectedFindModuleClassCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new FindModuleClassCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"CS1101S\", \"Tutorial\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \"CS1101S Tutorial\", expectedFindModuleClassCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS1101S \\n \\t Tutorial  \\t\", expectedFindModuleClassCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class FindStudentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private FindStudentCommandParser parser \u003d new FindStudentCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                FindStudentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parse_validArgs_returnsFindStudentCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand expectedFindStudentCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new FindStudentCommand(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindStudentCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ypinhsuan": 9,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LinkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class LinkCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private LinkCommandParser parser \u003d new LinkCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_validArgs_returnsLinkCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2 s/1\", new LinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple class indexes -\u003e last class index accepted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2 s/1 c/3\", new LinkCommand(INDEX_THIRD_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple student indexes -\u003e last student accepted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" s/1 c/2 s/3\", new LinkCommand(INDEX_SECOND_ITEM, INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_missingStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_missingClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/a c/2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1 c/a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_emptyStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/ c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_emptyClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1 c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListStudentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ListStudentInClassCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ListStudentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private ListStudentCommandParser parser \u003d new ListStudentCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_validArgs_returnsLinkCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // no args"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" \", new ListStudentCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // class specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2\", new ListStudentInClassCommand(INDEX_SECOND_ITEM));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple class indexes specified -\u003e last class index accepted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2 c/1\", new ListStudentInClassCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_emptyClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                ListStudentInClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"invalid+tElEg4m\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#Potential TA\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String INVALID_DAY \u003d \"ASDDAY\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String INVALID_TIME \u003d \"123412x\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String INVALID_VENUE \u003d \"\u0026\u0026\u0026\u0026\u0026\u0026\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String INVALID_NUMBER_OF_OCCURRENCES \u003d \"asd\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_TELEGRAM \u003d \"rachelW4lker\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"Weak\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"Average\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String VALID_DAY \u003d \"FRIDAY\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String VALID_TIME \u003d \"08:00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String VALID_VENUE \u003d \"S17-0302\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String VALID_NUMBER_OF_OCCURRENCES \u003d \"13\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTelegram_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTelegram((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTelegram_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTelegram(INVALID_TELEGRAM));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTelegram_validValueWithoutWhitespace_returnsTelegram() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Telegram expectedTelegram \u003d new Telegram(VALID_TELEGRAM);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedTelegram, ParserUtil.parseTelegram(VALID_TELEGRAM));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseTelegram_validValueWithWhitespace_returnsTrimmedTelegram() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String telegramWithWhitespace \u003d WHITESPACE + VALID_TELEGRAM + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Telegram expectedTelegram \u003d new Telegram(VALID_TELEGRAM);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedTelegram, ParserUtil.parseTelegram(telegramWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDay((String) null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseDay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DAY));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseDay_validValueWithoutWhitespace_returnsDay() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day expectedDay \u003d Day.FRIDAY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(VALID_DAY));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseDay_validValueWithWhitespace_returnsTrimmedDay() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String dayWithWhitespace \u003d WHITESPACE + VALID_DAY + WHITESPACE;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Day expectedDay \u003d Day.FRIDAY;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(dayWithWhitespace));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTime(INVALID_TIME));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime expectedTime \u003d LocalTime.parse(VALID_TIME);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        LocalTime expectedTime \u003d LocalTime.parse(VALID_TIME);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseVenue_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVenue((String) null));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseVenue_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVenue(INVALID_VENUE));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseVenue_validValueWithoutWhitespace_returnsVenue() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_VENUE);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(VALID_VENUE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseVenue_validValueWithWhitespace_returnsTrimmedVenue() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String venueWithWhitespace \u003d WHITESPACE + VALID_VENUE + WHITESPACE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Venue expectedVenue \u003d new Venue(VALID_VENUE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedVenue, ParserUtil.parseVenue(venueWithWhitespace));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseNumberOfOccurrences_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNumberOfOccurrences((String) null));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseNumberOfOccurrences_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNumberOfOccurrences(INVALID_NUMBER_OF_OCCURRENCES));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseNumberOfOccurrences_validValueWithoutWhitespace_returnsNumberOfOccurrences() throws Exception {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        NumberOfOccurrences expectedNumberOfOccurrences \u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new NumberOfOccurrences(Integer.parseInt(VALID_NUMBER_OF_OCCURRENCES));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedNumberOfOccurrences, ParserUtil.parseNumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseNumberOfOccurrences_validValueWithWhitespace_returnsTrimmedNumberOfOccurrences() throws Exception {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String numberOfOccurrencesWithWhitespace \u003d WHITESPACE + VALID_NUMBER_OF_OCCURRENCES + WHITESPACE;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        NumberOfOccurrences expectedNumberOfOccurrences \u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new NumberOfOccurrences(Integer.parseInt(VALID_NUMBER_OF_OCCURRENCES));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedNumberOfOccurrences,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                ParserUtil.parseNumberOfOccurrences(numberOfOccurrencesWithWhitespace));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "dextertanyj": 3,
      "ruixuantan": 14,
      "ypinhsuan": 4,
      "junlong4321": 107,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TutorsPetParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION_SCORE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STUDENT_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEEK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.AddAttendanceCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.AddModuleClassCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.ClearModuleClassCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ClearStudentCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.DeleteAttendanceCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.DeleteModuleClassCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.DeleteStudentCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.FindAttendanceCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.FindModuleClassCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.FindStudentCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.LinkCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.ListModuleClassCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.ListStudentCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ListStudentInClassCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.ResetCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UnlinkCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.ViewHistoryCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.EditModuleClassDescriptorBuilder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.EditStudentDescriptorBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.testutil.LessonUtil;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.testutil.ModuleClassUtil;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentUtil;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TutorsPetParserTest {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String NON_EMPTY_STRING \u003d \" 3\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final TutorsPetParser parser \u003d new TutorsPetParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_addStudent() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        AddStudentCommand command \u003d (AddStudentCommand) parser.parseCommand(StudentUtil.getAddStudentCommand(student));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new AddStudentCommand(student), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_listStudent() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ListStudentCommand command \u003d (ListStudentCommand) parser.parseCommand(ListStudentCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ListStudentCommand altCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                (ListStudentCommand) parser.parseCommand(ListStudentCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + \" \" + PREFIX_CLASS_INDEX + INDEX_SECOND_ITEM.getOneBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new ListStudentCommand(), command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new ListStudentInClassCommand(INDEX_SECOND_ITEM), altCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_editStudent() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentDescriptor descriptor \u003d new EditStudentDescriptorBuilder(student).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        EditStudentCommand command \u003d (EditStudentCommand) parser.parseCommand(EditStudentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                + INDEX_FIRST_ITEM.getOneBased() + \" \" + StudentUtil.getEditStudentDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new EditStudentCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_deleteStudent() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        DeleteStudentCommand command \u003d (DeleteStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                DeleteStudentCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new DeleteStudentCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_clearStudent() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearStudentCommand.COMMAND_WORD) instanceof ClearStudentCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearStudentCommand.COMMAND_WORD + NON_EMPTY_STRING)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                instanceof ClearStudentCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_findStudent() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindStudentCommand command \u003d (FindStudentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                FindStudentCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new FindStudentCommand(new NameContainsKeywordsPredicate\u003c\u003e(keywords)), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_addModuleClass() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AddModuleClassCommand command \u003d (AddModuleClassCommand) parser"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .parseCommand(ModuleClassUtil.getAddModuleClassCommand(moduleClass));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new AddModuleClassCommand(moduleClass), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_listModuleClass() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListModuleClassCommand.COMMAND_WORD) instanceof ListModuleClassCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListModuleClassCommand.COMMAND_WORD + NON_EMPTY_STRING)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                instanceof ListModuleClassCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseCommand_editModuleClass() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassDescriptor descriptor \u003d new EditModuleClassDescriptorBuilder(moduleClass).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        EditModuleClassCommand command \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                (EditModuleClassCommand) parser.parseCommand(EditModuleClassCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + ModuleClassUtil.getEditModuleClassDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(new EditModuleClassCommand(INDEX_FIRST_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_deleteModuleClass() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        DeleteModuleClassCommand command \u003d (DeleteModuleClassCommand) parser.parseCommand("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                DeleteModuleClassCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new DeleteModuleClassCommand(INDEX_FIRST_ITEM), command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseCommand_clearModuleClass() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(parser.parseCommand(ClearModuleClassCommand.COMMAND_WORD) instanceof ClearModuleClassCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearModuleClassCommand.COMMAND_WORD + NON_EMPTY_STRING)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                instanceof ClearModuleClassCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_findModuleClass() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        FindModuleClassCommand command \u003d (FindModuleClassCommand) parser.parseCommand("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                FindModuleClassCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new FindModuleClassCommand(new NameContainsKeywordsPredicate\u003c\u003e(keywords)), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + NON_EMPTY_STRING) instanceof ListCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseCommand_addLesson() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        AddLessonCommand command \u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                (AddLessonCommand) parser.parseCommand(LessonUtil.getAddLessonCommand(INDEX_FIRST_ITEM, lesson));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(new AddLessonCommand(INDEX_FIRST_ITEM, lesson), command);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void parseCommand_editLesson() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand.EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder(lesson).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        EditLessonCommand command \u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                (EditLessonCommand) parser.parseCommand(EditLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_SECOND_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                        + LessonUtil.getEditLessonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(new EditLessonCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM, descriptor), command);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseCommand_deleteLesson() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand expectedCommand \u003d new DeleteLessonCommand(INDEX_FIRST_ITEM, INDEX_SECOND_ITEM);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand command \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                (DeleteLessonCommand) parser.parseCommand(DeleteLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_SECOND_ITEM.getOneBased());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        DeleteLessonCommand altCommand \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                (DeleteLessonCommand) parser.parseCommand(DeleteLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_SECOND_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, altCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void parseCommand_addAttendance() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Week week \u003d new Week(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d new Attendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new AddAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, week, attendance);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AddAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                (AddAttendanceCommand) parser.parseCommand(AddAttendanceCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_WEEK + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                        + PREFIX_PARTICIPATION_SCORE + \"80 \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseCommand_deleteAttendance() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week week \u003d new Week(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new DeleteAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, week);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        DeleteAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                (DeleteAttendanceCommand) parser.parseCommand(DeleteAttendanceCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_WEEK + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void parseCommand_findAttendance() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        Week week \u003d new Week(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        FindAttendanceCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new FindAttendanceCommand(INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, INDEX_FIRST_ITEM, week);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        FindAttendanceCommand command \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                (FindAttendanceCommand) parser.parseCommand(FindAttendanceCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_CLASS_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_LESSON_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                        + PREFIX_WEEK + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_unlink() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UnlinkCommand expectedCommand \u003d new UnlinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UnlinkCommand command \u003d (UnlinkCommand) parser.parseCommand(UnlinkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + PREFIX_CLASS_INDEX + INDEX_SECOND_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UnlinkCommand altCommand \u003d (UnlinkCommand) parser.parseCommand(UnlinkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + PREFIX_CLASS_INDEX + INDEX_SECOND_ITEM.getOneBased());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, altCommand);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_link() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        LinkCommand expectedCommand \u003d new LinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        LinkCommand command \u003d (LinkCommand) parser.parseCommand(LinkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + PREFIX_CLASS_INDEX + INDEX_SECOND_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        LinkCommand altCommand \u003d (LinkCommand) parser.parseCommand(LinkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                + PREFIX_STUDENT_INDEX + INDEX_FIRST_ITEM.getOneBased() + \" \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                + PREFIX_CLASS_INDEX + INDEX_SECOND_ITEM.getOneBased());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertEquals(expectedCommand, altCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parseCommand_viewHistory() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(parser.parseCommand(ViewHistoryCommand.COMMAND_WORD) instanceof ViewHistoryCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + NON_EMPTY_STRING) instanceof ExitCommand);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + NON_EMPTY_STRING) instanceof HelpCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void parseCommand_reset() throws Exception {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD) instanceof ResetCommand);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(parser.parseCommand(ResetCommand.COMMAND_WORD + NON_EMPTY_STRING) instanceof ResetCommand);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 84,
      "dextertanyj": 52,
      "ruixuantan": 16,
      "ypinhsuan": 78,
      "junlong4321": 42,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnlinkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.UnlinkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UnlinkCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private UnlinkCommandParser parser \u003d new UnlinkCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_validArgs_returnsUnlinkCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2 s/1\", new UnlinkCommand(INDEX_SECOND_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple class indexes -\u003e last class index accepted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" c/2 s/1 c/3\", new UnlinkCommand(INDEX_THIRD_ITEM, INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple student indexes -\u003e last student accepted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseSuccess(parser, \" s/1 c/2 s/3\", new UnlinkCommand(INDEX_SECOND_ITEM, INDEX_THIRD_ITEM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_missingStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_missingClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/a c/2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1 c/a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_emptyStudentIndex_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/ c/1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_emptyClassIndex_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" s/1 c/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertParseFailure(parser, \" a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                UnlinkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULE_CLASS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_STUDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.RedoStateException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.UndoStateException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.DuplicateModuleClassException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.ModuleClassNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.TutorsPetBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(new TutorsPet(), new TutorsPet(modelManager.getTutorsPet()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        userPrefs.setTutorsPetFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        userPrefs.setTutorsPetFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPetFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTutorsPetFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPetFilePath_validPath_setsTutorsPetFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Path path \u003d Paths.get(\"tutors/pet/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        modelManager.setTutorsPetFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(path, modelManager.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit_nullMessage_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.commit(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit_removesFutureStates() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.canRedo());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(modelManager.canRedo());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canUndo_hasPreviousState_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.canUndo());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canUndo_noPreviousState_returnsFalse() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(modelManager.canUndo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_hasPreviousState_returnsCommitMessage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_1, modelManager.undo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_preservesFutureState() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_noPreviousState_throwsUndoStateException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UndoStateException.class, () -\u003e modelManager.undo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canRedo_hasNextState_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.canRedo());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canRedo_noNextState_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(modelManager.canRedo());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_hasNextState_returnsCommitMessage() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_1, modelManager.redo());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_preservesRedoneState() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, modelManager.undo());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, modelManager.redo());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.canUndo());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, modelManager.undo());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_noNextState_throwsRedoStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(RedoStateException.class, () -\u003e modelManager.redo());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasStudent(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasStudent_studentNotInModelManager_returnsFalse() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasStudent_studentInModelManager_returnsTrue() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteStudent(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent_studentNotInModelManager_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e modelManager.deleteStudent(ALICE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent_studentInModelManager_deletesStudent() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addStudent(BENSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.deleteStudent(ALICE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.deleteStudent(BENSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedModelManager.addModuleClass(new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids().build());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModuleClass(null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_moduleClassNotInModelManager_returnsFalse() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(modelManager.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_moduleClassInModelManager_returnsTrue() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(modelManager.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void deleteModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteModuleClass(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void deleteModuleClass_moduleClassNotInModelManager_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, () -\u003e modelManager.deleteModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void deleteModuleClass_moduleClassInModelManager_deletesModuleClass() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.deleteModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Model expectedModelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.addModuleClass(null));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_duplicateModuleClassInModelManager_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e modelManager.addModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_moduleClassWithSameIdentityFieldsInModelManager_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e modelManager.addModuleClass(editedCs2103t));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullTargetModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setModuleClass(null, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullEditedModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setModuleClass(CS2103T_TUTORIAL, null));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_targetModuleClassNotInModelManager_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, ()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e modelManager.setModuleClass(CS2103T_TUTORIAL, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredStudentList().remove(0));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getFilteredModuleClassList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleClassList().remove(0));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteAllStudents() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addStudent(BENSON);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.addModuleClass(CS2100_LAB);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modelManager.deleteAllStudents();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(modelManager.hasStudent(BENSON));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(modelManager.hasModuleClass(new ModuleClass(CS2103T_TUTORIAL.getName())));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(modelManager.hasModuleClass(new ModuleClass(CS2100_LAB.getName())));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllModuleClasses() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        modelManager.addStudent(ALICE);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        modelManager.addStudent(BENSON);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        modelManager.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        modelManager.addModuleClass(CS2100_LAB);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        modelManager.deleteAllModuleClasses();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(modelManager.hasStudent(ALICE));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(modelManager.hasStudent(BENSON));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(modelManager.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(modelManager.hasModuleClass(CS2100_LAB));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tutorsPet \u003d new TutorsPetBuilder().withStudent(ALICE).withStudent(BENSON)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withModuleClass(CS2103T_TUTORIAL).withModuleClass(CS2100_LAB).build();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet differentTutorsPet \u003d new TutorsPet();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        modelManager \u003d new ModelManager(tutorsPet, userPrefs);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tutorsPet, userPrefs);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different tutorsPet -\u003e returns false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTutorsPet, userPrefs)));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different filteredStudentList -\u003e returns false"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.updateFilteredStudentList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorsPet, userPrefs)));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        modelManager.updateFilteredStudentList(PREDICATE_SHOW_ALL_STUDENTS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different filteredModuleClassList -\u003e returns false"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        keywords \u003d CS2103T_TUTORIAL.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.updateFilteredModuleClassList(new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorsPet, userPrefs)));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        modelManager.updateFilteredModuleClassList(PREDICATE_SHOW_ALL_MODULE_CLASS);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        differentUserPrefs.setTutorsPetFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorsPet, differentUserPrefs)));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 13,
      "dextertanyj": 165,
      "ruixuantan": 39,
      "ypinhsuan": 29,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StateRecordsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPetTest.COMMIT_MESSAGE_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class StateRecordsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StateRecords(0, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StateRecords stateRecords \u003d new StateRecords(1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(COMMIT_MESSAGE_1, COMMIT_MESSAGE_2, COMMIT_MESSAGE_3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same records and index -\u003e return true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StateRecords stateRecordsCopy \u003d new StateRecords(1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(COMMIT_MESSAGE_1, COMMIT_MESSAGE_2, COMMIT_MESSAGE_3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(stateRecords.equals(stateRecordsCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(stateRecords.equals(stateRecords));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(stateRecords.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(stateRecords.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different index -\u003e return false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        stateRecordsCopy \u003d new StateRecords(0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(COMMIT_MESSAGE_1, COMMIT_MESSAGE_2, COMMIT_MESSAGE_3));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(stateRecords.equals(stateRecordsCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different records -\u003e return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        stateRecordsCopy \u003d new StateRecords(1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(COMMIT_MESSAGE_1, COMMIT_MESSAGE_2, COMMIT_MESSAGE_1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(stateRecords.equals(stateRecordsCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TutorsPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.GEORGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.DuplicateModuleClassException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.ModuleClassNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.TutorsPetBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.TypicalModuleClass;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.TypicalStudent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TutorsPetTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final TutorsPet tutorsPet \u003d new TutorsPet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorsPet.getStudentList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorsPet.getModuleClassList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.resetData(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void resetData_withValidReadOnlyTutorsPet_replacesData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet newData \u003d getTypicalTutorsPet();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPet.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(newData, tutorsPet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    //// student-related tests"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void resetData_withDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // Two students with the same identity fields"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cStudent\u003e newStudents \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e defaultModuleClasses \u003d TypicalModuleClass.getTypicalModuleClasses();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetStub newData \u003d new TutorsPetStub(newStudents, defaultModuleClasses);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e tutorsPet.resetData(newData));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void hasStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.hasStudent(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void hasStudent_studentNotInTutorsPet_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(tutorsPet.hasStudent(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void hasStudent_studentInTutorsPet_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPet.addStudent(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(tutorsPet.hasStudent(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void hasStudent_studentWithSameIdentityFieldsInTutorsPet_returnsTrue() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPet.addStudent(ALICE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(tutorsPet.hasStudent(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tutorsPet.getStudentList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.deleteStudent(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteStudent_studentInTutorsPet_removesStudentAndUuid() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addStudent(ALICE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addStudent(BENSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.deleteStudent(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // manually remove UUID"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Set\u003cUUID\u003e modifiedUuids \u003d new HashSet\u003c\u003e(CS2103T_TUTORIAL.getStudentUuids());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modifiedUuids.remove(ALICE.getUuid());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedTutorial \u003d new ModuleClass(CS2103T_TUTORIAL.getName(), modifiedUuids,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                CS2103T_TUTORIAL.getLessons());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TutorsPet expectedTutorsPet \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new TutorsPetBuilder().withStudent(BENSON).withModuleClass(modifiedTutorial).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedTutorsPet, tutorsPet);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllStudents() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.addStudent(ALICE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.addStudent(BENSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.addModuleClass(CS2100_LAB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.deleteAllStudents();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(tutorsPet.hasStudent(ALICE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(tutorsPet.hasStudent(BENSON));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(tutorsPet.hasModuleClass(new ModuleClass(CS2103T_TUTORIAL.getName())));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(tutorsPet.hasModuleClass(new ModuleClass(CS2100_LAB.getName())));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    //// moduleClass-related tests"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void resetData_withDuplicateModuleClasses_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // Two moduleClasses with the same identity fields"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass editedCS2103T \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids().build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cStudent\u003e defaultStudents \u003d TypicalStudent.getTypicalStudents();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e newModuleClasses \u003d Arrays.asList(CS2103T_TUTORIAL, editedCS2103T);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetStub newData \u003d new TutorsPetStub(defaultStudents, newModuleClasses);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e tutorsPet.resetData(newData));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.hasModuleClass(null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_moduleClassNotInTutorsPet_returnsFalse() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(tutorsPet.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_moduleClassInTutorsPet_returnsTrue() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(tutorsPet.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasModuleClass_moduleClassWithSameIdentityFieldsInTutorsPet_returnsTrue() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass editedModuleClass \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids().build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(tutorsPet.hasModuleClass(editedModuleClass));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.addModuleClass(null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_duplicateModuleClassInTutorsPet_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e tutorsPet.addModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass_moduleClassWithSameIdentityFieldsInTutorsPet_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e tutorsPet.addModuleClass(editedCs2103t));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullTargetModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.setModuleClass(null, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullEditedModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.setModuleClass(CS2103T_TUTORIAL, null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_targetModuleClassNotInTutorsPet_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, ()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e tutorsPet.setModuleClass(CS2103T_TUTORIAL, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteModuleClass_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorsPet.deleteModuleClass(null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteModuleClass_moduleClassNotInTutorsPet_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, () -\u003e tutorsPet.deleteModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void deleteModuleClass_moduleClassInTutorsPet_deletesModuleClass() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.deleteModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet expectedTutorsPet \u003d new TutorsPet();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedTutorsPet, tutorsPet);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getModuleClassList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tutorsPet.getModuleClassList().remove(0));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllModuleClasses() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addStudent(ALICE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addStudent(BENSON);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPet.addModuleClass(CS2100_LAB);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        tutorsPet.deleteAllModuleClasses();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(tutorsPet.hasStudent(ALICE));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(tutorsPet.hasStudent(BENSON));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(tutorsPet.hasModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(tutorsPet.hasModuleClass(CS2100_LAB));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.resetData(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same students and classes -\u003e returns true"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tutorsPetCopy \u003d new TutorsPet();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetCopy.resetData(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(tutorsPet.equals(tutorsPetCopy));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(tutorsPet.equals(tutorsPet));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(tutorsPet.equals(null));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(tutorsPet.equals(5));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different students -\u003e returns false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tutorsPetDifferentStudents \u003d new TutorsPet();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetDifferentStudents.resetData(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPetDifferentStudents.deleteStudent(GEORGE); // GEORGE is not linked to any ModuleClasses."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(tutorsPet.getModuleClassList().equals(tutorsPetDifferentStudents.getModuleClassList()));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(tutorsPet.equals(tutorsPetDifferentStudents));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different classes -\u003e returns false"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tutorsPetDifferentClasses \u003d new TutorsPet();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPetDifferentClasses.resetData(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        ModuleClass toDeleteClass \u003d tutorsPetDifferentClasses.getModuleClassList().get(0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        tutorsPetDifferentClasses.deleteModuleClass(toDeleteClass);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(tutorsPet.getStudentList().equals(tutorsPetDifferentClasses.getStudentList()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(tutorsPet.equals(tutorsPetDifferentClasses));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * A stub ReadOnlyTutorsPet whose students list can violate interface constraints."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static class TutorsPetStub implements ReadOnlyTutorsPet {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private final ObservableList\u003cModuleClass\u003e classes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPetStub(Collection\u003cStudent\u003e students, Collection\u003cModuleClass\u003e classes) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            this.students.setAll(students);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            this.classes.setAll(classes);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            return students;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public ObservableList\u003cModuleClass\u003e getModuleClassList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return classes;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 21,
      "ruixuantan": 48,
      "dextertanyj": 140,
      "ypinhsuan": 37,
      "junlong4321": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setTutorsPetFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTutorsPetFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTutorsPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.model.VersionedTutorsPet.INITIAL_COMMIT_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.RedoStateException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.exception.UndoStateException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class VersionedTutorsPetTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMIT_MESSAGE_1 \u003d \"Commit Message 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMIT_MESSAGE_2 \u003d \"Commit Message 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String COMMIT_MESSAGE_3 \u003d \"Commit Message 3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private VersionedTutorsPet versionedTutorsPet \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit_nullCommitMessage_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e versionedTutorsPet.commit(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit_removesFutureStates() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.canRedo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.canRedo());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canUndo_hasPreviousState_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.canUndo());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canUndo_newVersionedTutorsPet_returnsFalse() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.canUndo());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_hasPreviousState_returnsCommitMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_1, versionedTutorsPet.undo());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_preservesFutureState() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.canRedo());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void undo_noPreviousState_throwsUndoStateException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UndoStateException.class, () -\u003e versionedTutorsPet.undo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canRedo_hasNextState_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.canRedo());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void canRedo_noNextState_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.canRedo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_hasNextState_returnsCommitMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_1, versionedTutorsPet.redo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_preservesRedoneState() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, versionedTutorsPet.undo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, versionedTutorsPet.redo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMIT_MESSAGE_2, versionedTutorsPet.undo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void redo_noNextState_throwsRedoStateException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(RedoStateException.class, () -\u003e versionedTutorsPet.redo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void viewStateRecords_initialState() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new StateRecords(0, Collections.singletonList(INITIAL_COMMIT_MESSAGE)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                versionedTutorsPet.viewStateRecords());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void viewStateRecords_latestState() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new StateRecords(1, Arrays.asList(INITIAL_COMMIT_MESSAGE, COMMIT_MESSAGE_1)),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                versionedTutorsPet.viewStateRecords());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void viewStateRecords_earliestState() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new StateRecords(0, Arrays.asList(INITIAL_COMMIT_MESSAGE, COMMIT_MESSAGE_1)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                versionedTutorsPet.viewStateRecords());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void viewStateRecords_intermediateState() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new StateRecords(1, Arrays.asList(INITIAL_COMMIT_MESSAGE, COMMIT_MESSAGE_1, COMMIT_MESSAGE_2)),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                versionedTutorsPet.viewStateRecords());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same state -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        VersionedTutorsPet versionedTutorsPetCopy \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.undo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPetCopy.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPetCopy.undo();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.equals(versionedTutorsPetCopy));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(versionedTutorsPet.equals(versionedTutorsPet));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.equals(null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.equals(5));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different state pointer -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPetCopy.redo();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.equals(versionedTutorsPetCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different state history -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        VersionedTutorsPet versionedTutorsPetDifferentState \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet.commit(COMMIT_MESSAGE_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPetDifferentState.commit(COMMIT_MESSAGE_2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.equals(versionedTutorsPetDifferentState));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different current state -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPet \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        VersionedTutorsPet versionedTutorsPetDifferentCurrentState \u003d new VersionedTutorsPet(getTypicalTutorsPet());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        versionedTutorsPetDifferentCurrentState.addStudent(AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(versionedTutorsPet.equals(versionedTutorsPetDifferentCurrentState));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/AttendanceRecordListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_ALICE_51_BENSON_33;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_ALICE_80;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.getTypicalAttendanceRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.AttendanceNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.InvalidWeekException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceRecordListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final AttendanceRecordList recordList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecordList(new NumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Week VALID_WEEK \u003d new Week(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Week INVALID_WEEK \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            new Week(Index.fromOneBased(VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4 + 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_emptyAttendanceRecordMap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(recordList.getAttendanceRecordList().size() \u003d\u003d 7);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (AttendanceRecord record: recordList.getAttendanceRecordList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            assertTrue(record.equals(RECORD_EMPTY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recordList.getAttendance(null, VALID_WEEK));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_invalidWeek_throwsInvalidWeekException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(InvalidWeekException.class, () -\u003e recordList.getAttendance("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                ALICE, INVALID_WEEK));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_nonExistingStudent_throwsAttendanceNotFoundException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(AttendanceNotFoundException.class, () -\u003e recordList.getAttendance(ALICE, VALID_WEEK));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_existingStudent_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d createAliceRecordList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Attendance attendance \u003d attendanceRecordList.getAttendance(ALICE, VALID_WEEK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(new Attendance(VALID_PARTICIPATION_SCORE_80), attendance);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendanceRecord_invalidWeek_throwsInvalidWeekException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(InvalidWeekException.class, () -\u003e recordList.getAttendanceRecord(INVALID_WEEK));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendanceRecord_validWeek_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d createAliceRecordList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d attendanceRecordList.getAttendanceRecord(VALID_WEEK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(RECORD_ALICE_80, attendanceRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recordList.hasAttendance(null, VALID_WEEK));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_nullWeek_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recordList.hasAttendance(ALICE, null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_invalidWeek_throwsInvalidWeekException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertThrows(InvalidWeekException.class, () -\u003e recordList.hasAttendance(ALICE, INVALID_WEEK));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_existingStudent_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d createAliceRecordList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(attendanceRecordList.hasAttendance(ALICE, VALID_WEEK));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_nonExistingStudent_returnsFalse() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(recordList.hasAttendance(ALICE, VALID_WEEK));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList attendanceRecordList \u003d new AttendanceRecordList(getTypicalAttendanceRecord());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(attendanceRecordList.equals(attendanceRecordList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(recordList.equals(recordList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(attendanceRecordList.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(recordList.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(attendanceRecordList.equals(attendanceRecordList.getAttendanceRecordList()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same size, same attendance records -\u003e return true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cAttendanceRecord\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(RECORD_EMPTY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(RECORD_ALICE_80);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.add(RECORD_ALICE_51_BENSON_33);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList sameSizeAndRecord \u003d new AttendanceRecordList(list);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(attendanceRecordList.equals(sameSizeAndRecord));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different size, same attendance records -\u003e return false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(RECORD_EMPTY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList differentSizeSameRecord \u003d new AttendanceRecordList(list);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(attendanceRecordList.equals(differentSizeSameRecord));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same size, different attendance records -\u003e return false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.remove(list.size() - 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.remove(list.size() - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(RECORD_EMPTY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList sameSizeDifferentRecord \u003d new AttendanceRecordList(list);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(attendanceRecordList.equals(sameSizeDifferentRecord));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        //different size, different attendance records -\u003e return false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        list.add(RECORD_ALICE_51_BENSON_33);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecordList differentAttendanceRecordList \u003d new AttendanceRecordList(list);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(attendanceRecordList.equals(differentAttendanceRecordList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates an {@code AttendanceRecordList} with {@code RECORD_ALICE_80} at the first, valid week."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * The rest of the 6 elements are empty {@code AttendanceRecords}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private AttendanceRecordList createAliceRecordList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        List\u003cAttendanceRecord\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        list.add(RECORD_ALICE_80);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            list.add(RECORD_EMPTY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AttendanceRecordList(list);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 26,
      "ruixuantan": 122,
      "dextertanyj": 5,
      "junlong4321": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/AttendanceRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_ALICE_80;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.exceptions.AttendanceNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.testutil.AttendanceRecordBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceRecordTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private final AttendanceRecord attendanceRecord \u003d new AttendanceRecord();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_emptyAttendanceRecord() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(attendanceRecord.getAttendanceRecord().isEmpty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_nonEmptyAttendanceRecord() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        HashMap\u003cUUID, Attendance\u003e hashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UUID key \u003d ALICE.getUuid();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Attendance value \u003d new Attendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        hashMap.put(key, value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecord record \u003d new AttendanceRecord(hashMap);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(record.getAttendanceRecord().containsKey(key));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(value, record.getAttendanceRecord().get(key));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_nullUuid_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attendanceRecord.getAttendance(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_emptyAttendanceRecord_throwsAttendanceNotFoundException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(AttendanceNotFoundException.class, () -\u003e attendanceRecord.getAttendance(ALICE.getUuid()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void getAttendance_nonExistingUuid_throwsAttendanceNotFoundException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(AttendanceNotFoundException.class, () -\u003e attendanceRecord.getAttendance(ALICE.getUuid()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_attendanceInAttendanceRecord_returnsTrue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        HashMap\u003cUUID, Attendance\u003e records \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UUID studentUuid \u003d ALICE.getUuid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d new Attendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        records.put(studentUuid, attendance);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d new AttendanceRecord(records);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(attendanceRecord.hasAttendance(ALICE.getUuid()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void hasAttendance_attendanceNotInAttendanceRecord_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        HashMap\u003cUUID, Attendance\u003e records \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        UUID studentUuid \u003d ALICE.getUuid();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        Attendance attendance \u003d new Attendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        records.put(studentUuid, attendance);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d new AttendanceRecord(records);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertFalse(attendanceRecord.hasAttendance(BENSON.getUuid()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(RECORD_ALICE_80.equals(RECORD_ALICE_80));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(RECORD_EMPTY.equals(RECORD_EMPTY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(RECORD_ALICE_80.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(RECORD_EMPTY.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(RECORD_ALICE_80.equals(RECORD_ALICE_80.getAttendanceRecord()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same attendance record -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d new AttendanceRecordBuilder()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEntry(ALICE.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_80)).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(RECORD_ALICE_80.equals(attendanceRecord));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different attendance record -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecord attendanceRecordWrongUuid \u003d new AttendanceRecordBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEntry(BENSON.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_80)).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(RECORD_ALICE_80.equals(attendanceRecordWrongUuid));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        AttendanceRecord attendanceRecordWrongAttendance \u003d new AttendanceRecordBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEntry(ALICE.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_33)).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(RECORD_ALICE_80.equals(attendanceRecordWrongAttendance));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 20,
      "ruixuantan": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/AttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "class AttendanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Attendance ATTENDANCE_ONE \u003d new Attendance(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_invalidAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        int invalidParticipationScore \u003d 1000;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidParticipationScore));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void isValidParticipationScore() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid score"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Attendance.isValidParticipationScore(Attendance.LOWER_BOUND - 1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Attendance.isValidParticipationScore(Attendance.UPPER_BOUND + 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Attendance.isValidParticipationScore(-1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // valid score"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Attendance.isValidParticipationScore(Attendance.LOWER_BOUND));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Attendance.isValidParticipationScore(Attendance.UPPER_BOUND));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Attendance.isValidParticipationScore(10));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(ATTENDANCE_ONE.equals(ATTENDANCE_ONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(ATTENDANCE_ONE.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(ATTENDANCE_ONE.equals(ATTENDANCE_ONE.getParticipationScore()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same participationScore -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(ATTENDANCE_ONE.equals(new Attendance(ATTENDANCE_ONE.getParticipationScore())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different participationScore -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(ATTENDANCE_ONE.equals(new Attendance(ATTENDANCE_ONE.getParticipationScore() + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attendance/WeekTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "class WeekTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Week WEEK_ONE \u003d new Week(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_invalidWeek_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Index invalidWeek \u003d Index.fromOneBased(Week.UPPER_BOUND + 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Week(invalidWeek));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void isValidWeek() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid weeks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Week.isValidWeek(Index.fromOneBased(Week.UPPER_BOUND + 1)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // valid weeks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Week.isValidWeek(Index.fromOneBased(Week.LOWER_BOUND)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Week.isValidWeek(Index.fromOneBased(Week.UPPER_BOUND)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Week.isValidWeek(Index.fromOneBased(10)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(WEEK_ONE.equals(WEEK_ONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(WEEK_ONE.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(WEEK_ONE.equals(WEEK_ONE.getZeroBasedWeekIndex()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same week -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(WEEK_ONE.equals(new Week("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Index.fromZeroBased(WEEK_ONE.getZeroBasedWeekIndex()))));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different week -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(WEEK_ONE.equals(new Week("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                Index.fromZeroBased(WEEK_ONE.getZeroBasedWeekIndex() + 1))));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/components/name/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.name;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cHasNameStub\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cHasNameStub\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cHasNameStub\u003e firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // one keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cHasNameStub\u003e predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.singletonList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                \"Valid\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Valid\", \"Name\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Valid\", \"Invalid\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Invalid\", \"nAme\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        NameContainsKeywordsPredicate\u003cHasNameStub\u003e predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new NameContainsKeywordsPredicate\u003c\u003e(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate\u003c\u003e(Arrays.asList(\"Invalid\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(new HasNameStub()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static class HasNameStub implements HasName {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        HasNameStub() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            name \u003d new Name(\"Valid Name\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/components/name/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.name;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/components/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.components.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.exceptions.InvalidDayException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateDay_validDayString_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"MONDAY\") \u003d\u003d Day.MONDAY);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"TUESDAY\") \u003d\u003d Day.TUESDAY);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"WEDNESDAY\") \u003d\u003d Day.WEDNESDAY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"THURSDAY\") \u003d\u003d Day.THURSDAY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"FRIDAY\") \u003d\u003d Day.FRIDAY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"SATURDAY\") \u003d\u003d Day.SATURDAY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Day.createDay(\"SUNDAY\") \u003d\u003d Day.SUNDAY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void testCreateDay_invalidDayString_throwsInvalidDayException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(InvalidDayException.class, () -\u003e Day.createDay(\"invalid\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_WED_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_1600_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_1400_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.lesson.Lesson.TIME_FORMATTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final LocalTime VALID_START_TIME \u003d LocalTime.parse(VALID_START_TIME_1400_LESSON_WED_2_TO_4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final LocalTime VALID_END_TIME \u003d LocalTime.parse(VALID_END_TIME_1600_LESSON_WED_2_TO_4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Venue VALID_VENUE \u003d new Venue(VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final NumberOfOccurrences VALID_NUMBER_OF_OCCURRENCES \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new NumberOfOccurrences(1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Attendance VALID_ATTENDANCE \u003d new Attendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final AttendanceRecord VALID_ATTENDANCE_RECORD \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecord(Map.of(UUID.fromString(VALID_UUID_AMY), VALID_ATTENDANCE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final AttendanceRecordList VALID_ATTENDANCE_RECORD_LIST \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new AttendanceRecordList(Collections.singletonList(VALID_ATTENDANCE_RECORD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_newLesson_hasNewAttendanceRecordList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Lesson lesson \u003d new Lesson(VALID_START_TIME, VALID_END_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_DAY_WED_LESSON_WED_2_TO_4, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_START_TIME, lesson.getStartTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_END_TIME, lesson.getEndTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_DAY_WED_LESSON_WED_2_TO_4, lesson.getDay());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_NUMBER_OF_OCCURRENCES, lesson.getNumberOfOccurrences());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_VENUE, lesson.getVenue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new AttendanceRecordList(VALID_NUMBER_OF_OCCURRENCES), lesson.getAttendanceRecordList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_existingAttendanceRecordList_hasCorrectAttendanceRecordList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Lesson lesson \u003d new Lesson(VALID_START_TIME, VALID_END_TIME, VALID_DAY_WED_LESSON_WED_2_TO_4,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE, VALID_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_START_TIME, lesson.getStartTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_END_TIME, lesson.getEndTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_DAY_WED_LESSON_WED_2_TO_4, lesson.getDay());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_NUMBER_OF_OCCURRENCES, lesson.getNumberOfOccurrences());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_VENUE, lesson.getVenue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_RECORD_LIST, lesson.getAttendanceRecordList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_attendanceRecordListMismatch_throwsAssertionError() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new Lesson(VALID_START_TIME, VALID_END_TIME, VALID_DAY_WED_LESSON_WED_2_TO_4,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        new AttendanceRecordList(new NumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES.value + 1))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.isSameLesson(LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Lesson lessonCopy \u003d new LessonBuilder(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.isSameLesson(lessonCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.isSameLesson(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withStartTime(LocalTime.parse(VALID_START_TIME_1400_LESSON_WED_2_TO_4, TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withEndTime(LocalTime.parse(VALID_END_TIME_1600_LESSON_WED_2_TO_4, TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10).withDay(VALID_DAY_WED_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10).withVenue(VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different number of occurrences -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withNumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different attendance record list and same number of occurrences -\u003e return true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cAttendanceRecord\u003e records \u003d new ArrayList\u003c\u003e(Collections.nCopies(13, new AttendanceRecord()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        records.set(0, VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(records))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.isSameLesson(editedLesson));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toString_returnsCorrectFormat() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Lesson lesson \u003d new Lesson(VALID_START_TIME, VALID_END_TIME, VALID_DAY_WED_LESSON_WED_2_TO_4,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE, VALID_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedString \u003d (new StringBuilder()).append(VALID_DAY_WED_LESSON_WED_2_TO_4)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(TIME_FORMATTER.format(VALID_START_TIME))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(\" to \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(TIME_FORMATTER.format(VALID_END_TIME))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(VALID_VENUE.venue)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(\" Number of occurrences: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .append(VALID_NUMBER_OF_OCCURRENCES.value).toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedString, lesson.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.equals(LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Lesson lessonCopy \u003d new LessonBuilder(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(LESSON_FRI_8_TO_10.equals(lessonCopy));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(LESSON_WED_2_TO_4));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withStartTime(LocalTime.parse(VALID_START_TIME_1400_LESSON_WED_2_TO_4, TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withEndTime(LocalTime.parse(VALID_END_TIME_1600_LESSON_WED_2_TO_4, TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10).withDay(VALID_DAY_WED_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10).withVenue(VALID_VENUE_COM1_B111_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different number of occurrences -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                .withNumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES_7_LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different attendance record list and same number of occurrences -\u003e return false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cAttendanceRecord\u003e records \u003d new ArrayList\u003c\u003e(Collections.nCopies(13, new AttendanceRecord()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        records.set(0, VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedLesson \u003d new LessonBuilder(LESSON_FRI_8_TO_10)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withAttendanceRecordList(new AttendanceRecordList(records))"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(LESSON_FRI_8_TO_10.equals(editedLesson));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 87,
      "ypinhsuan": 84,
      "junlong4321": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/NumberOfOccurrencesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class NumberOfOccurrencesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void constructor_invalidNumberOfOccurrences_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new NumberOfOccurrences(NumberOfOccurrences.LOWER_BOUND - 1));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                new NumberOfOccurrences(NumberOfOccurrences.UPPER_BOUND + 1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void isValidNumberOfOccurrences() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // invalid number of occurrences"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(NumberOfOccurrences.isValidNumberOfOccurrences(-1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(NumberOfOccurrences.isValidNumberOfOccurrences(100));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(NumberOfOccurrences.isValidNumberOfOccurrences(NumberOfOccurrences.LOWER_BOUND - 1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(NumberOfOccurrences.isValidNumberOfOccurrences(NumberOfOccurrences.UPPER_BOUND + 1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // valid number of occurrences"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(NumberOfOccurrences.isValidNumberOfOccurrences(NumberOfOccurrences.LOWER_BOUND));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(NumberOfOccurrences.isValidNumberOfOccurrences(14));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(NumberOfOccurrences.isValidNumberOfOccurrences(NumberOfOccurrences.UPPER_BOUND));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        NumberOfOccurrences num1 \u003d new NumberOfOccurrences(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        NumberOfOccurrences num2 \u003d new NumberOfOccurrences(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        NumberOfOccurrences num3 \u003d new NumberOfOccurrences(10);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(num1.equals(num1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(num1.equals(num2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(num1.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(num1.equals(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(num1.equals(num3));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/VenueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class VenueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Venue(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void constructor_invalidVenue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        String invalidVenue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Venue(invalidVenue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void isValidVenue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // null venue"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Venue.isValidVenue(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // blank venue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(Venue.isValidVenue(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(Venue.isValidVenue(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // invalid venues"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(Venue.isValidVenue(\"COM1^\")); // special characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(Venue.isValidVenue(\" COM1\")); // leading space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // valid venues"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"https://zoom/j/95317249?)pwd\u003dUlld2tWY3MwMkRibjQyUkdZZz09\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"Com2\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"0209\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"COM2 0101\")); // alphanumeric with spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Venue venue1 \u003d new Venue(\"com1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Venue venue2 \u003d new Venue(\"com1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Venue venue3 \u003d new Venue(\"com2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(venue1.equals(venue1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(venue1.equals(venue2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(venue1.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(venue1.equals(3));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different venue -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(venue1.equals(venue3));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduleclass/ModuleClassTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2100_LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_THU_10_TO_11;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ModuleClassTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_nameOnly_hasNoStudents() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_CS2100_LAB);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertEquals(0, moduleClass.getStudentUuids().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_withStudents_hasCorrectStudents() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_CS2100_LAB);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d new HashSet\u003c\u003e(Collections.singletonList(ALICE.getUuid()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name, studentUuids, Collections.emptyList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(studentUuids.size(), moduleClass.getStudentUuids().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(moduleClass.getStudentUuids().contains(ALICE.getUuid()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_withStudents_studentsDefensivelyCopied() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_CS2100_LAB);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e studentUuids \u003d new HashSet\u003c\u003e(Collections.singletonList(ALICE.getUuid()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name, studentUuids, Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentUuids.add(BENSON.getUuid());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(moduleClass.getStudentUuids().contains(BENSON.getUuid()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_withLessons_hasCorrectLessons() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_CS2100_LAB);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d Collections.singletonList(LESSON_FRI_8_TO_10);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name, Collections.emptySet(), lessons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(lessons.size(), moduleClass.getLessons().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(moduleClass.getLessons().contains(LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_withLessons_lessonsDefensivelyCopied() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Name name \u003d new Name(VALID_NAME_CS2100_LAB);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(Collections.singletonList(LESSON_WED_2_TO_4));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(name, Collections.emptySet(), lessons);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        lessons.add(LESSON_FRI_8_TO_10);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(moduleClass.getLessons().contains(LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasStudentUuid_studentInModuleClass_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().withStudentUuids(ALICE.getUuid(), BENSON.getUuid()).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(moduleClass.hasStudentUuid(ALICE.getUuid()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasStudentUuid_nullUuid_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleClass.hasStudentUuid(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hasStudentUuid_studentNotInModuleClass_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().withStudentUuids(ALICE.getUuid()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(moduleClass.hasStudentUuid(BENSON.getUuid()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void getStudentUuids_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e moduleClass.getStudentUuids().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void hasLesson_lessonInModuleClass_returnsTrue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().withLessons(LESSON_FRI_8_TO_10, LESSON_WED_2_TO_4).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertTrue(moduleClass.hasLesson(LESSON_FRI_8_TO_10));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void hasLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e moduleClass.hasLesson(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void hasLesson_lessonNotInModuleClass_returnsFalse() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().withLessons(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertFalse(moduleClass.hasLesson(LESSON_WED_2_TO_4));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getLessons_retainsConstructedOrder() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d Arrays.asList(LESSON_FRI_8_TO_10, LESSON_WED_2_TO_4, LESSON_THU_10_TO_11);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClass(new Name(VALID_NAME_CS2100_LAB),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Collections.emptySet(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                lessons);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(lessons, moduleClass.getLessons());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getLessons_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass moduleClass \u003d new ModuleClassBuilder().build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e moduleClass.getLessons().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void isSameModuleClass() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(CS2103T_TUTORIAL.isSameModuleClass(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.isSameModuleClass(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withName(VALID_NAME_CS2100_LAB)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.isSameModuleClass(editedCs2103t));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different students -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(CS2103T_TUTORIAL.isSameModuleClass(editedCs2103t));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different lessons -\u003e return true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withLessons(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(CS2103T_TUTORIAL.isSameModuleClass(editedCs2103t));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass cs2103tCopy \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(CS2103T_TUTORIAL.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(CS2103T_TUTORIAL.equals(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(5));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different moduleClass -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(CS2100_LAB));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withName(VALID_NAME_CS2100_LAB)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(editedCs2103t));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different students -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(editedCs2103t));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different lessons -\u003e return false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withLessons(LESSON_FRI_8_TO_10).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(CS2103T_TUTORIAL.equals(editedCs2103t));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 165,
      "junlong4321": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduleclass/SameModuleClassPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class SameModuleClassPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_sameModuleClass_returnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SameModuleClassPredicate predicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "                new SameModuleClassPredicate(CS2100_TUTORIAL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        assertTrue(predicate.test(CS2100_TUTORIAL));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same identity different students"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass modifiedCs1101sTutorial \u003d new ModuleClassBuilder(CS2100_TUTORIAL)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                .withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(modifiedCs1101sTutorial));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_differentModuleClass_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SameModuleClassPredicate predicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new SameModuleClassPredicate(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(CS2100_LAB));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        predicate \u003d new SameModuleClassPredicate(CS2100_TUTORIAL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(CS2100_LAB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        ModuleClass firstPredicateModuleClass \u003d CS2100_TUTORIAL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass secondPredicateModuleClass \u003d CS2100_LAB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SameModuleClassPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new SameModuleClassPredicate(firstPredicateModuleClass);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SameModuleClassPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new SameModuleClassPredicate(secondPredicateModuleClass);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same ModuleClass -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        SameModuleClassPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new SameModuleClassPredicate(firstPredicateModuleClass);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(5));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different ModuleClass -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 6,
      "dextertanyj": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduleclass/UniqueModuleClassListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.moduleclass;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2100_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.DuplicateModuleClassException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.exceptions.ModuleClassNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.ModuleClassBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class UniqueModuleClassListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private final UniqueModuleClassList uniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void contains_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void contains_moduleClassNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.contains(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void contains_moduleClassInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueModuleClassList.contains(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void contains_moduleClassWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueModuleClassList.contains(editedCs2103t));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void add_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.add(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void add_duplicateModuleClass_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e uniqueModuleClassList.add(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void add_moduleClassWithSameIdentityFieldsInList_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedCs2103t \u003d new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e uniqueModuleClassList.add(editedCs2103t));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullTargetModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.setModuleClass(null, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullEditedModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.setModuleClass(CS2103T_TUTORIAL, null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_targetModuleClassNotInList_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, ()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e uniqueModuleClassList.setModuleClass(CS2103T_TUTORIAL, CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_moduleClassWithSameIdentityFieldsInList_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass editedClass \u003d new ModuleClassBuilder(CS2100_LAB).withStudentUuids(AMY.getUuid()).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, () -\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                uniqueModuleClassList.setModuleClass(CS2103T_TUTORIAL, editedClass));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void remove_nullModuleClass_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.remove(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void remove_moduleClassDoesNotExist_throwsModuleClassNotFoundException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(ModuleClassNotFoundException.class, () -\u003e uniqueModuleClassList.remove(CS2103T_TUTORIAL));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void remove_existingModuleClass_removesModuleClass() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.remove(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeUuid_nullUuid_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.removeUuid(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeUuid_existingUuid_updatesModuleClasses() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UUID uuidToRemove \u003d CS2103T_TUTORIAL.getStudentUuids().iterator().next();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.removeUuid(uuidToRemove);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Set\u003cUUID\u003e modifiedUuids \u003d new HashSet\u003c\u003e(CS2103T_TUTORIAL.getStudentUuids());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        modifiedUuids.remove(uuidToRemove);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        ModuleClass modifiedModuleClass \u003d new ModuleClass(CS2103T_TUTORIAL.getName(), modifiedUuids,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                CS2103T_TUTORIAL.getLessons());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedUniqueModuleClassList.add(modifiedModuleClass);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeUuid_nonExistingUuid_sameModuleClasses() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UUID uuidToRemove \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.removeUuid(uuidToRemove);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        expectedUniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void removeAllStudentUuids() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        uniqueModuleClassList.removeAllStudentUuids();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedUniqueModuleClassList.add(new ModuleClassBuilder(CS2103T_TUTORIAL).withStudentUuids().build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedUniqueModuleClassList.add(new ModuleClassBuilder(CS2100_LAB).withStudentUuids().build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullUniqueModuleClassList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e uniqueModuleClassList.setModuleClass((UniqueModuleClassList) null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_uniqueModuleClassList_replacesOwnListWithProvidedUniqueModuleClassList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedUniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.setModuleClass(expectedUniqueModuleClassList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueModuleClassList.setModuleClass((List\u003cModuleClass\u003e) null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e moduleClassList \u003d Collections.singletonList(CS2100_LAB);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.setModuleClass(moduleClassList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList expectedUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        expectedUniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedUniqueModuleClassList, uniqueModuleClassList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass_listWithDuplicateModuleClasses_throwsDuplicateModuleClassException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cModuleClass\u003e listWithDuplicateModuleClasses \u003d Arrays.asList(CS2103T_TUTORIAL, CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(DuplicateModuleClassException.class, ()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e uniqueModuleClassList.setModuleClass(listWithDuplicateModuleClasses));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            -\u003e uniqueModuleClassList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same internal list -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList uniqueModuleClassListCopy \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassListCopy.add(CS2100_LAB);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueModuleClassList.equals(uniqueModuleClassListCopy));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueModuleClassList.equals(uniqueModuleClassList));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.equals(5));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different internal list -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList otherUniqueModuleClassList \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        otherUniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.equals(otherUniqueModuleClassList));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_sameContents_sameHashCode() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList uniqueModuleClassListCopy \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassListCopy.add(CS2100_LAB);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotSame(uniqueModuleClassListCopy, uniqueModuleClassList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueModuleClassList.hashCode() \u003d\u003d uniqueModuleClassListCopy.hashCode());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_differentContents_differentHashCode() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueModuleClassList uniqueModuleClassListCopy \u003d new UniqueModuleClassList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassListCopy.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotSame(uniqueModuleClassListCopy, uniqueModuleClassList);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.hashCode() \u003d\u003d uniqueModuleClassListCopy.hashCode());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_changeInContents_differentHashCode() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2100_LAB);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int hash \u003d uniqueModuleClassList.hashCode();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueModuleClassList.add(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueModuleClassList.hashCode() \u003d\u003d hash);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 206,
      "ruixuantan": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentInUuidCollectionPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "class StudentInUuidCollectionPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_studentInCollection_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // one student"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(Collections.singleton(ALICE.getUuid()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // multiple students"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new StudentInUuidCollectionPredicate(Arrays.asList(ALICE.getUuid(), BENSON.getUuid()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // duplicate students"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new StudentInUuidCollectionPredicate(Arrays.asList(ALICE.getUuid(), ALICE.getUuid()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(predicate.test(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void test_studentNotInCollection_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // zero students"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate predicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // non-matching student"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        predicate \u003d new StudentInUuidCollectionPredicate(Collections.singleton(BENSON.getUuid()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(predicate.test(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cUUID\u003e firstPredicateStudentUuidList \u003d Collections.singletonList(ALICE.getUuid());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cUUID\u003e secondPredicateStudentUuidList \u003d Arrays.asList(ALICE.getUuid(), BENSON.getUuid());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Set\u003cUUID\u003e secondPredicateStudentUuidSet \u003d new HashSet\u003c\u003e(secondPredicateStudentUuidList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cUUID\u003e thirdPredicateStudentUuidList \u003d Arrays.asList(ALICE.getUuid(), ALICE.getUuid());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(firstPredicateStudentUuidList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate secondPredicateListVersion \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(secondPredicateStudentUuidList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate secondPredicateSetVersion \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(secondPredicateStudentUuidSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate thirdPredicate \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(thirdPredicateStudentUuidList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same students -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        StudentInUuidCollectionPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new StudentInUuidCollectionPredicate(firstPredicateStudentUuidList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same students different collection type -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(secondPredicateListVersion.equals(secondPredicateSetVersion));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // duplicate students -\u003e return true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(firstPredicate.equals(thirdPredicate));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different students -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicateListVersion));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/StudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student student \u003d new StudentBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e student.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void isSameStudent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(ALICE.isSameStudent(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different telegram and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same name, same telegram, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // same name, same telegram, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(ALICE.isSameStudent(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student aliceCopy \u003d new StudentBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        // different student -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // different telegram -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTelegram(VALID_TELEGRAM_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 10,
      "ypinhsuan": 25,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/TelegramTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TelegramTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Telegram(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void constructor_invalidTelegram_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String invalidTelegram \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Telegram(invalidTelegram));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void isValidTelegram() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // null Telegram handle"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Telegram.isValidTelegram(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // invalid Telegram handles"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"tEle\")); // less than 4 characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"te1e-gram\")); // usage of special character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertFalse(Telegram.isValidTelegram(\"Tele Gram\")); // usage of white space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        // valid Telegram handles"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"Tel3g\")); // exactly 5 characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"gR4MYeLe_pK8\")); // special and upper case alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertTrue(Telegram.isValidTelegram(\"alex_merier3471\")); // typical telegram handle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/student/UniqueStudentListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.testutil.StudentBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class UniqueStudentListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private final UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void contains_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void contains_studentNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void contains_studentInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(uniqueStudentList.contains(ALICE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void contains_studentWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertTrue(uniqueStudentList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void add_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void add_duplicateStudent_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_nullTargetStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_nullEditedStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_targetStudentNotInList_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.setStudent(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_editedStudentIsSameStudent_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedUniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_editedStudentHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Student editedAlice \u003d new StudentBuilder(ALICE).withTags(VALID_TAG_AVERAGE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedUniqueStudentList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_editedStudentHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.setStudent(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudent_editedStudentHasNonUniqueIdentity_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void remove_nullStudent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void remove_studentDoesNotExist_throwsStudentNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(StudentNotFoundException.class, () -\u003e uniqueStudentList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void remove_existingStudent_removesStudent() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents_nullUniqueStudentList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent((UniqueStudentList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents_uniqueStudentList_replacesOwnListWithProvidedUniqueStudentList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.setStudent(expectedUniqueStudentList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStudentList.setStudent((List\u003cStudent\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cStudent\u003e studentList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        uniqueStudentList.setStudent(studentList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        UniqueStudentList expectedUniqueStudentList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        expectedUniqueStudentList.add(BOB);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(expectedUniqueStudentList, uniqueStudentList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void setStudents_listWithDuplicateStudents_throwsDuplicateStudentException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        List\u003cStudent\u003e listWithDuplicateStudents \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DuplicateStudentException.class, () -\u003e uniqueStudentList.setStudent(listWithDuplicateStudents));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            -\u003e uniqueStudentList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same internal list -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueStudentList uniqueStudentListCopy \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentListCopy.add(ALICE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueStudentList.equals(uniqueStudentListCopy));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueStudentList.equals(uniqueStudentList));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueStudentList.equals(null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueStudentList.equals(5));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // different internal list -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueStudentList otherStudentClassList \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        otherStudentClassList.add(BENSON);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueStudentList.equals(otherStudentClassList));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_sameContents_sameHashCode() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueStudentList uniqueStudentListCopy \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentListCopy.add(ALICE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotSame(uniqueStudentListCopy, uniqueStudentList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(uniqueStudentList.hashCode() \u003d\u003d uniqueStudentListCopy.hashCode());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_differentContents_differentHashCode() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        UniqueStudentList uniqueStudentListCopy \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentListCopy.add(BENSON);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertNotSame(uniqueStudentListCopy, uniqueStudentList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueStudentList.hashCode() \u003d\u003d uniqueStudentListCopy.hashCode());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void hashCode_changeInContents_differentHashCode() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentList.add(ALICE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int hash \u003d uniqueStudentList.hashCode();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        uniqueStudentList.add(BENSON);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(uniqueStudentList.hashCode() \u003d\u003d hash);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 52,
      "ypinhsuan": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.END_TIME_FIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.INVALID_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.START_TIME_FIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedAttendanceRecordList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class JsonAdaptedLessonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INVALID_TIME \u003d \"1400\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INVALID_DAY \u003d \"wed\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int INVALID_NUMBER_OF_OCCURRENCES \u003d NumberOfOccurrences.UPPER_BOUND + 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INVALID_VENUE \u003d \"!@#$%^\u0026*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final JsonAdaptedAttendanceRecordList INVALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendanceRecordList(Collections.singletonList(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_START_TIME \u003d LESSON_WED_2_TO_4.getStartTime().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_END_TIME \u003d LESSON_WED_2_TO_4.getEndTime().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_DAY \u003d LESSON_WED_2_TO_4.getDay().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final int VALID_NUMBER_OF_OCCURRENCES \u003d LESSON_WED_2_TO_4.getNumberOfOccurrences().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_VENUE \u003d LESSON_WED_2_TO_4.getVenue().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final JsonAdaptedAttendanceRecordList VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendanceRecordList(LESSON_WED_2_TO_4.getAttendanceRecordList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_validLessonDetails_returnsLesson() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(LESSON_WED_2_TO_4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(LESSON_WED_2_TO_4, lesson.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_validIndividualLessonDetails_returnsLesson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(LESSON_WED_2_TO_4, lesson.toModelType());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                INVALID_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_FIELD_MESSAGE_FORMAT, START_TIME_FIELD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                null, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, START_TIME_FIELD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, INVALID_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_FIELD_MESSAGE_FORMAT, END_TIME_FIELD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, null, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, END_TIME_FIELD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, INVALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, null, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidNumberOfOccurrences_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, INVALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d NumberOfOccurrences.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidVenue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, INVALID_VENUE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d Venue.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullVenue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, null,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Venue.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidJsonAdaptedAttendanceRecordList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(VALID_START_TIME, VALID_END_TIME, VALID_DAY,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE, INVALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_INVALID_RECORD,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                lesson::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullJsonAdaptedAttendanceRecordList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, AttendanceRecordList.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_mismatchedJsonAdaptedAttendanceRecordList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_START_TIME, VALID_END_TIME, VALID_DAY, VALID_NUMBER_OF_OCCURRENCES, VALID_VENUE,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(new AttendanceRecordList("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        new NumberOfOccurrences(VALID_NUMBER_OF_OCCURRENCES - 1))));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                String.format(INVALID_FIELD_MESSAGE_FORMAT, AttendanceRecordList.class.getSimpleName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 105,
      "dextertanyj": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleClassTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModuleClass.INVALID_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModuleClass.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.insertAttendanceRecords;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_THU_10_TO_11;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_WED_2_TO_4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalModuleClass.CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.CARL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedAttendanceRecordList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class JsonAdaptedModuleClassTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String INVALID_NAME_VALUE \u003d \"CS3230@Tutorial\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String INVALID_STUDENT_UUID_VALUE \u003d \"584346cb-8886-4518-8282-\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String INVALID_TIME_VALUE \u003d \"1400\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final JsonAdaptedName VALID_CLASS_JSON_ADAPTED_NAME \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedName(CS2103T_TUTORIAL.getName().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cJsonAdaptedUuid\u003e VALID_JSON_ADAPTED_UUIDS \u003d CS2103T_TUTORIAL.getStudentUuids().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .map(JsonAdaptedUuid::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cJsonAdaptedLesson\u003e VALID_JSON_ADAPTED_LESSONS \u003d CS2103T_TUTORIAL.getLessons().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .map(JsonAdaptedLesson::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_validModuleClassDetails_returnsModuleClass() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass(CS2103T_TUTORIAL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(CS2103T_TUTORIAL, moduleClass.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_validIndividualModuleClassDetails_returnsModuleClass() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_CLASS_JSON_ADAPTED_NAME, VALID_JSON_ADAPTED_UUIDS, VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(CS2103T_TUTORIAL, moduleClass.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedName invalidName \u003d new JsonAdaptedName(INVALID_NAME_VALUE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedModuleClass(invalidName, VALID_JSON_ADAPTED_UUIDS, VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedModuleClass(null, VALID_JSON_ADAPTED_UUIDS, VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidStudentUuids_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedUuid\u003e invalidStudentUuids \u003d new ArrayList\u003c\u003e(VALID_JSON_ADAPTED_UUIDS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid invalidJsonAdaptedUuid \u003d new JsonAdaptedUuid(INVALID_STUDENT_UUID_VALUE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        invalidStudentUuids.add(invalidJsonAdaptedUuid);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_FIELD_MESSAGE_FORMAT, JsonAdaptedStudent.STUDENT_UUID_FIELD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass(VALID_CLASS_JSON_ADAPTED_NAME,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                invalidStudentUuids,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_nullStudentUuids_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedUuid\u003e invalidStudentUuids \u003d new ArrayList\u003c\u003e(VALID_JSON_ADAPTED_UUIDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        invalidStudentUuids.add(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_CLASS_JSON_ADAPTED_NAME, invalidStudentUuids, VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedStudent.STUDENT_UUID_FIELD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidLessonStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedLesson\u003e invalidLessons \u003d new ArrayList\u003c\u003e(VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedLesson invalidJsonAdaptedLesson \u003d new JsonAdaptedLesson("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                INVALID_TIME_VALUE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                LESSON_WED_2_TO_4.getEndTime().toString(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                LESSON_WED_2_TO_4.getDay().toString(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                LESSON_WED_2_TO_4.getNumberOfOccurrences().value,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                LESSON_WED_2_TO_4.getVenue().toString(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(LESSON_WED_2_TO_4.getAttendanceRecordList())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        invalidLessons.add(invalidJsonAdaptedLesson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_CLASS_JSON_ADAPTED_NAME, VALID_JSON_ADAPTED_UUIDS, invalidLessons);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                JsonAdaptedLesson.INVALID_FIELD_MESSAGE_FORMAT, JsonAdaptedLesson.START_TIME_FIELD);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullLessons_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedLesson\u003e invalidLessons \u003d new ArrayList\u003c\u003e(VALID_JSON_ADAPTED_LESSONS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        invalidLessons.add(null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_CLASS_JSON_ADAPTED_NAME, VALID_JSON_ADAPTED_UUIDS, invalidLessons);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                MISSING_FIELD_MESSAGE_FORMAT, Lesson.class.getSimpleName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, moduleClass::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidStudentInLesson_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new AttendanceRecord(Map.of(CARL.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_33)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Lesson lessonWithInvalidStudent \u003d insertAttendanceRecords(LESSON_THU_10_TO_11, attendanceRecord);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedLesson\u003e jsonAdaptedLessons \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Collections.singletonList(new JsonAdaptedLesson(lessonWithInvalidStudent));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedModuleClass moduleClass \u003d new JsonAdaptedModuleClass("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_CLASS_JSON_ADAPTED_NAME, VALID_JSON_ADAPTED_UUIDS, jsonAdaptedLessons);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedModuleClass.MESSAGE_INVALID_STUDENTS_IN_LESSON,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                moduleClass::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 51,
      "ruixuantan": 37,
      "junlong4321": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedNameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedName} for testing with {@code VALID_NAME_AMY} as name. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedName VALID_JSON_ADAPTED_NAME \u003d new JsonAdaptedName(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validName_returnsName() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedName validName \u003d new JsonAdaptedName(VALID_NAME_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new Name(VALID_NAME_AMY), validName.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedName invalidName \u003d new JsonAdaptedName(INVALID_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Name.MESSAGE_CONSTRAINTS, invalidName::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedName nullName \u003d new JsonAdaptedName((String) null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Name.MESSAGE_CONSTRAINTS, nullName::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStudentTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.storage.JsonAdaptedUuid.MESSAGE_INVALID_UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class JsonAdaptedStudentTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String VALID_UUID \u003d BENSON.getUuid().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String INVALID_TELEGRAM \u003d \"r@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#Average\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final String INVALID_UUID \u003d \"584346cb-8886-4518-8282-\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final JsonAdaptedName VALID_NAME \u003d new JsonAdaptedName(BENSON.getName().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final String VALID_TELEGRAM \u003d BENSON.getTelegram().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_validIndividualStudentDetails_returnsStudent() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonAdaptedStudent student \u003d new JsonAdaptedStudent("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                VALID_UUID, VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(BENSON, student.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new JsonAdaptedStudent(INVALID_UUID, VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_UUID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_nullUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(null, VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, UUID.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedName invalidName \u003d new JsonAdaptedName(INVALID_NAME);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, invalidName, VALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, null, VALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidTelegram_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, VALID_NAME, INVALID_TELEGRAM, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d Telegram.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullTelegram_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Telegram.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, VALID_NAME, VALID_TELEGRAM, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, VALID_NAME, VALID_TELEGRAM, null, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonAdaptedStudent student \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                new JsonAdaptedStudent(VALID_UUID, VALID_NAME, VALID_TELEGRAM, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, student::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 9,
      "ruixuantan": 20,
      "ypinhsuan": 19,
      "junlong4321": 20,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EXPERIENCED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedTagTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedTag VALID_JSON_ADAPTED_TAG_AVERAGE \u003d new JsonAdaptedTag(VALID_TAG_AVERAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedTag VALID_JSON_ADAPTED_TAG_EXPERIENCED \u003d new JsonAdaptedTag(VALID_TAG_EXPERIENCED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validTag_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Tag validTag \u003d new Tag(VALID_TAG_AVERAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedTag validJsonAdaptedTag \u003d new JsonAdaptedTag(validTag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(validTag, validJsonAdaptedTag.toModelType());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validTagName_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedTag validJsonAdaptedTag \u003d new JsonAdaptedTag(VALID_TAG_AVERAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new Tag(VALID_TAG_AVERAGE), validJsonAdaptedTag.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidTagName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedTag invalidName \u003d new JsonAdaptedTag(INVALID_TAG_DESC);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Tag.MESSAGE_CONSTRAINTS, invalidName::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullTagName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedTag nullTagName \u003d new JsonAdaptedTag((String) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Tag.MESSAGE_CONSTRAINTS, nullTagName::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getTagName_validTagName_returnsTagName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedTag validJsonAdaptedTag \u003d new JsonAdaptedTag(VALID_TAG_AVERAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_TAG_AVERAGE, validJsonAdaptedTag.getTagName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedUuidTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedUuidTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedUuid} for testing with {@code VALID_UUID_AMY} as UUID. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedUuid VALID_JSON_ADAPTED_UUID \u003d new JsonAdaptedUuid(UUID.fromString(VALID_UUID_AMY));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validUuidString_returnsUuid() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid uuid \u003d new JsonAdaptedUuid(VALID_UUID_AMY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(UUID.fromString(VALID_UUID_AMY), uuid.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validUuid_returnsUuid() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid uuid \u003d new JsonAdaptedUuid(UUID.fromString(VALID_UUID_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(UUID.fromString(VALID_UUID_AMY), uuid.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid uuid \u003d new JsonAdaptedUuid(INVALID_STUDENT_UUID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedUuid.MESSAGE_INVALID_UUID, uuid::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid uuid \u003d new JsonAdaptedUuid((String) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedUuid.MESSAGE_NULL_UUID, uuid::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTutorsPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.INVALID_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedAttendanceRecord;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedAttendanceRecordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.attendance.JsonAdaptedStudentAttendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.testutil.TypicalTutorsPet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class JsonSerializableTutorsPetTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorsPetTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path STUDENT_TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorsPetTest\", \"Student\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path CLASS_TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorsPetTest\", \"Class\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Path LESSON_TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorsPetTest\", \"Lesson\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path ATTENDANCE_TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorsPetTest\", \"Attendance\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path TYPICAL_TUTORS_PET_FILE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalTutorsPet.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path INVALID_STUDENT_FILE \u003d STUDENT_TEST_DATA_FOLDER.resolve(\"invalidStudentTutorsPet.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_NAME_AND_TELEGRAM_FILE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            STUDENT_TEST_DATA_FOLDER.resolve(\"duplicateStudentNameAndTelegramTutorsPet.json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_NAME_AND_EMAIL_FILE \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            STUDENT_TEST_DATA_FOLDER.resolve(\"duplicateStudentNameAndEmailTutorsPet.json\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_UUID_FILE \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            STUDENT_TEST_DATA_FOLDER.resolve(\"duplicateStudentUuidTutorsPet.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path INVALID_CLASS_FILE \u003d CLASS_TEST_DATA_FOLDER.resolve(\"invalidClassTutorsPet.json\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path INVALID_STUDENT_UUID_IN_CLASS_FILE_1 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            CLASS_TEST_DATA_FOLDER.resolve(\"invalidStudentUuidInClass1.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path INVALID_STUDENT_UUID_IN_CLASS_FILE_2 \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            CLASS_TEST_DATA_FOLDER.resolve(\"invalidStudentUuidInClass2.json\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path DUPLICATE_CLASS_FILE \u003d CLASS_TEST_DATA_FOLDER.resolve(\"duplicateClassTutorsPet.json\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private static final Path DUPLICATE_STUDENT_UUID_IN_CLASS_FILE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            CLASS_TEST_DATA_FOLDER.resolve(\"duplicateStudentUuidInClass.json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path INVALID_STUDENT_UUID_IN_LESSON_FILE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            CLASS_TEST_DATA_FOLDER.resolve(\"invalidStudentUuidInLesson.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Path DUPLICATE_LESSON_FILE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LESSON_TEST_DATA_FOLDER.resolve(\"duplicateLessonTutorsPet.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Path INVALID_LESSON_FILE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LESSON_TEST_DATA_FOLDER.resolve(\"invalidLessonTutorsPet.json\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private static final Path NULL_LESSON_FILE \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            LESSON_TEST_DATA_FOLDER.resolve(\"nullLessonTutorsPet.json\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path INVALID_PARTICIPATION_VALUE_FILE \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"invalidParticipationValue.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_PARTICIPATION_VALUE_FILE \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullParticipationValue.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path INVALID_STUDENT_UUID_IN_STUDENT_ATTENDANCE_FILE \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"invalidStudentUuidInStudentAttendance.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_STUDENT_UUID_IN_STUDENT_ATTENDANCE_FILE \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullStudentUuidInStudentAttendance.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_STUDENT_ATTENDANCE_FILE \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullStudentAttendance.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path DUPLICATE_RECORD_FILE \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"duplicateRecord.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path DUPLICATE_WEEK_FILE \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"duplicateWeek.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path INCORRECT_WEEK_FILE \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"incorrectWeek.json\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path INVALID_WEEK_FILE \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"invalidWeek.json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path MISSING_WEEK_FILE \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"missingWeek.json\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_WEEK_FILE \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullWeek.json\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_RECORD_FILE \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullRecord.json\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_RECORD_LIST_FILE \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullRecordList.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path EMPTY_RECORD_LIST_FILE \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"emptyRecordList.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final Path NULL_ATTENDANCE_RECORD_LIST_FILE \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            ATTENDANCE_TEST_DATA_FOLDER.resolve(\"nullAttendanceRecordList.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_typicalStudentsAndClassesFile_success() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TUTORS_PET_FILE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet tutorsPetFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet typicalStudentsTutorsPet \u003d TypicalTutorsPet.getTypicalTutorsPet();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(typicalStudentsTutorsPet, tutorsPetFromFile);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void toModelType_invalidStudentFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_FILE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_duplicateStudentsNameAndTelegram_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_NAME_AND_TELEGRAM_FILE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTutorsPet.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_duplicateStudentsNameAndEmail_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_NAME_AND_EMAIL_FILE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTutorsPet.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Ensures that Tutor\u0027s Pet will not be able to boot up if two or more {@code Student}s"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * are found with the same {@code UUID}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_duplicateStudentsUuid_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_UUID_FILE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTutorsPet.MESSAGE_DUPLICATE_STUDENT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidClassFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLASS_FILE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Ensures that Tutor\u0027s Pet will not be able to boot up although Java tries"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * to pad missing {@code UUID} digits in broken {@code UUID}s with zeros."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidStudentUuidInClassFile1_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_UUID_IN_CLASS_FILE_1,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Ensures that Tutor\u0027s Pet will not be able to boot up given an incomplete {@code UUID}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * (e.g \"0c527a3f-8a6f-4c16-b57d-\")."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_invalidStudentUuidInClassFile2_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_UUID_IN_CLASS_FILE_2,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_duplicateClasses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLASS_FILE,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * If Tutor\u0027s Pet encounters duplicate {@code Student UUID}s in a class, it will not load"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * duplicate {@code UUID}s into the model. Tutor\u0027s Pet should still boot up successfully."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void toModelType_duplicateStudentsInClassFile_success() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_STUDENT_UUID_IN_CLASS_FILE,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        TutorsPet tutorsPetFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        TutorsPet typicalStudentsTutorsPet \u003d TypicalTutorsPet.getTypicalTutorsPet();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertEquals(tutorsPetFromFile, typicalStudentsTutorsPet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidStudentUuidInLesson_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_UUID_IN_LESSON_FILE,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedModuleClass.MESSAGE_INVALID_STUDENTS_IN_LESSON,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_invalidLessonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_LESSON_FILE,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Ensures that Tutor\u0027s Pet will not be able to boot up given duplicate {@code Lesson}s."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_duplicateLesson_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_LESSON_FILE,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Ensures that Tutor\u0027s Pet will not be able to boot up when there exists null {@code Lesson}s."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void toModelType_nullLesson_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_LESSON_FILE,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidParticipationValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PARTICIPATION_VALUE_FILE,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Attendance.MESSAGE_CONSTRAINTS, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullParticipationValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_PARTICIPATION_VALUE_FILE,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedStudentAttendance.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Attendance.class.getSimpleName());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidStudentUuidInRecord_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_STUDENT_UUID_IN_STUDENT_ATTENDANCE_FILE,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedStudentAttendance.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedStudent.STUDENT_UUID_FIELD);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedUuid.MESSAGE_INVALID_UUID, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullStudentUuidInRecord_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_STUDENT_UUID_IN_STUDENT_ATTENDANCE_FILE,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedStudentAttendance.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedStudent.STUDENT_UUID_FIELD);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullStudentAttendance_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_STUDENT_ATTENDANCE_FILE,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedAttendanceRecord.MESSAGE_INVALID_ATTENDANCE,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_duplicateRecord_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECORD_FILE,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedAttendanceRecord.MESSAGE_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_duplicateWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_WEEK_FILE,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedAttendanceRecordList.MESSAGE_DUPLICATE_ATTENDANCE_RECORD,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_incorrectWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INCORRECT_WEEK_FILE,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedAttendanceRecordList.MESSAGE_INVALID_RECORD,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(INVALID_WEEK_FILE,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Week.MESSAGE_CONSTRAINTS, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_missingWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(MISSING_WEEK_FILE,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(INVALID_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                AttendanceRecordList.class.getSimpleName());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_WEEK_FILE,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Week.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullRecord_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_RECORD_FILE,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedAttendanceRecordList.MESSAGE_INVALID_RECORD,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullRecordList_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_RECORD_LIST_FILE,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_MISSING_ATTENDANCE_RECORD_LIST, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_emptyRecordList_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(EMPTY_RECORD_LIST_FILE,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_MISSING_ATTENDANCE_RECORD_LIST, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullAttendanceRecordList_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonSerializableTutorsPet dataFromFile \u003d JsonUtil.readJsonFile(NULL_ATTENDANCE_RECORD_LIST_FILE,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonSerializableTutorsPet.class).get();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedLesson.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                AttendanceRecordList.class.getSimpleName());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 181,
      "ruixuantan": 36,
      "ypinhsuan": 9,
      "junlong4321": 95,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTutorsPetStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class JsonTutorsPetStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTutorsPetStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void readTutorsPet_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTutorsPet(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTutorsPet\u003e readTutorsPet(String filePath) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return new JsonTutorsPetStorage(Paths.get(filePath)).readTutorsPet(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertFalse(readTutorsPet(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"notJsonFormatTutorsPet.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void readTutorsPet_invalidStudentTutorsPet_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"invalidStudentTutorsPet.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void readTutorsPet_invalidAndValidStudentTutorsPet_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"invalidAndValidStudentTutorsPet.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void readTutorsPet_invalidStudentUuidTutorsPet_throwDataConversionException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"invalidStudentUuidTutorsPet.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void readTutorsPet_invalidClassTutorsPet_throwDataConversionException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"invalidClassTutorsPet.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public void readTutorsPet_invalidAndValidClassTutorsPet_throwDataConversionException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorsPet(\"invalidAndValidClassTutorsPet.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void readAndSaveTutorsPet_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTutorsPet.json\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet original \u003d getTypicalTutorsPet();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // workaround as storage functionality for ModuleClasses has not been implemented"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        original.setModuleClasses(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonTutorsPetStorage jsonTutorsPetStorage \u003d new JsonTutorsPetStorage(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        jsonTutorsPetStorage.saveTutorsPet(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ReadOnlyTutorsPet readBack \u003d jsonTutorsPetStorage.readTutorsPet(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(original, new TutorsPet(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        original.addStudent(HOON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        original.deleteStudent(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        jsonTutorsPetStorage.saveTutorsPet(original, filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        readBack \u003d jsonTutorsPetStorage.readTutorsPet(filePath).get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(original, new TutorsPet(readBack));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        original.addStudent(IDA);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        jsonTutorsPetStorage.saveTutorsPet(original); // file path not specified"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        readBack \u003d jsonTutorsPetStorage.readTutorsPet().get(); // file path not specified"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(original, new TutorsPet(readBack));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet_nullTutorsPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTutorsPet(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Saves {@code tutorsPet} at the specified {@code filePath}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private void saveTutorsPet(ReadOnlyTutorsPet tutorsPet, String filePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            new JsonTutorsPetStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "                    .saveTutorsPet(tutorsPet, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void saveTutorsPet_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTutorsPet(new TutorsPet(), null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 7,
      "ruixuantan": 1,
      "ypinhsuan": 40,
      "junlong4321": 15,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        userPrefs.setTutorsPetFilePath(Paths.get(\"tutorspet.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 1,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalTutorsPet.getTypicalTutorsPet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        JsonTutorsPetStorage tutorsPetStorage \u003d new JsonTutorsPetStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        storageManager \u003d new StorageManager(tutorsPetStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void tutorsPetReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "         * {@link JsonTutorsPetStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTutorsPetStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        TutorsPet original \u003d getTypicalTutorsPet();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // workaround as storage functionality for ModuleClasses has not been implemented"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        original.setModuleClasses(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        storageManager.saveTutorsPet(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        ReadOnlyTutorsPet retrieved \u003d storageManager.readTutorsPet().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertEquals(original, new TutorsPet(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public void getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        assertNotNull(storageManager.getTutorsPetFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 6,
      "ypinhsuan": 13,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/attendance/JsonAdaptedAttendanceRecordListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_RECORD_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedAttendanceRecordTest.EMPTY_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedAttendanceRecordTest.VALID_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedStudentAttendanceTest.VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendanceRecordListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code JsonAdaptedAttendanceRecordList} for testing with contents as specified in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@link seedu.address.logic.commands.CommandTestUtil#VALID_ATTENDANCE_RECORD_LIST}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedAttendanceRecordList VALID_JSON_ADAPTED_ATTENDANCE_RECORD_LIST \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendanceRecordList(VALID_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validAttendanceRecordList_returnsAttendanceRecordList() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(VALID_ATTENDANCE_RECORD_LIST);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_RECORD_LIST, attendanceRecordList.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validJsonAdaptedAttendanceRecords_returnsAttendanceRecordList() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e records \u003d Arrays.asList(EMPTY_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_ONE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                VALID_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_TWO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(records);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_RECORD_LIST, attendanceRecordList.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_outOfOrderJsonAdaptedAttendanceRecords_returnsAttendanceRecordList() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e records \u003d Arrays.asList(VALID_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_TWO,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                EMPTY_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_ONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(records);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_RECORD_LIST, attendanceRecordList.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_emptyJsonAdaptedAttendanceRecords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e emptyRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d new JsonAdaptedAttendanceRecordList(emptyRecords);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_MISSING_ATTENDANCE_RECORD_LIST,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullJsonAdaptedAttendanceRecords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e nullRecords \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d new JsonAdaptedAttendanceRecordList(nullRecords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_MISSING_ATTENDANCE_RECORD_LIST,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidJsonAdaptedAttendanceRecordInList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedStudentAttendance\u003e studentAttendances \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY, VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e invalidAttendanceRecord \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Collections.singletonList(new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, studentAttendances));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(invalidAttendanceRecord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecord.MESSAGE_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nonconsecutiveWeeksInJsonAdaptedAttendanceRecords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord recordWeekThree \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(new Week(Index.fromOneBased(3)), VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e records \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(VALID_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_TWO, recordWeekThree);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(records);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_INVALID_RECORD,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_nullInJsonAdaptedAttendanceRecords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e nullContainingList \u003d Collections.singletonList(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(nullContainingList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_INVALID_RECORD,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_duplicateWeekInJsonAdaptedAttendanceRecords_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord recordWeekOne \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(new Week(Index.fromOneBased(1)), VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedAttendanceRecord\u003e records \u003d Arrays.asList(EMPTY_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_ONE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                recordWeekOne);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecordList attendanceRecordList \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecordList(records);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecordList.MESSAGE_DUPLICATE_ATTENDANCE_RECORD,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                attendanceRecordList::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/attendance/JsonAdaptedAttendanceRecordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMPTY_ATTENDANCE_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_RECORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_51;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_INDEX_5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_WEEK_VALUE_5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedStudentAttendanceTest.VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedStudentAttendanceTest.VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Week;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendanceRecordTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedAttendanceRecord} for testing representing week 1 and is empty. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedAttendanceRecord EMPTY_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_ONE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendanceRecord(new Week(Index.fromOneBased(1)), EMPTY_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code JsonAdaptedAttendanceRecord} for testing representing week 2"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * and has two valid {@code JsonAdaptedStudentAttendance}s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedAttendanceRecord VALID_JSON_ADAPTED_ATTENDANCE_RECORD_WEEK_TWO \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendanceRecord(new Week(Index.fromOneBased(2)), VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final List\u003cJsonAdaptedStudentAttendance\u003e VALID_JSON_ADAPTED_STUDENT_ATTENDANCES \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            Arrays.asList(VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY, VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_BOB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validAttendanceRecord_returnsAttendanceRecord() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(new Week(VALID_WEEK_INDEX_5), VALID_ATTENDANCE_RECORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_RECORD, record.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_emptyAttendanceRecord_returnsAttendanceRecord() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(new Week(VALID_WEEK_INDEX_5), new AttendanceRecord());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new AttendanceRecord(), record.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validWeek_returnsWeek() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(new Week(VALID_WEEK_INDEX_5), new AttendanceRecord());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new Week(VALID_WEEK_INDEX_5), record.toKeyValuePair().getKey());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validJsonAdaptedStudentAttendances_returnsAttendanceRecord() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, VALID_JSON_ADAPTED_STUDENT_ATTENDANCES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Map\u003cUUID, Attendance\u003e attendanceMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceMap.put(UUID.fromString(VALID_UUID_AMY), new Attendance(VALID_PARTICIPATION_SCORE_33));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceMap.put(UUID.fromString(VALID_UUID_BOB), new Attendance(VALID_PARTICIPATION_SCORE_51));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AttendanceRecord attendanceRecord \u003d record.toKeyValuePair().getValue();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        AttendanceRecord expectedAttendanceRecord \u003d new AttendanceRecord(attendanceMap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedAttendanceRecord, attendanceRecord);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_emptyJsonAdaptedStudentAttendances_returnsAttendanceRecord() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, Collections.emptyList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new AttendanceRecord(), record.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_nullJsonAdaptedStudentAttendances_returnsNewAttendanceRecord() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new AttendanceRecord(), record.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validJsonWeekProperty_returnsWeek() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord records \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, Collections.emptyList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(new Week(VALID_WEEK_INDEX_5), records.toKeyValuePair().getKey());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_duplicateAttendanceRecord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedStudentAttendance\u003e duplicateList \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Arrays.asList(VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY, VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, duplicateList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecord.MESSAGE_DUPLICATE_ATTENDANCE,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                record::toKeyValuePair);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_invalidWeek_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(NumberOfOccurrences.UPPER_BOUND + 1,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        VALID_JSON_ADAPTED_STUDENT_ATTENDANCES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Week.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                record::toKeyValuePair);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord recordWeekZero \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedAttendanceRecord(NumberOfOccurrences.LOWER_BOUND - 1,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                        VALID_JSON_ADAPTED_STUDENT_ATTENDANCES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Week.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                recordWeekZero::toKeyValuePair);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_nullInJsonAdaptedStudentAttendances_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cJsonAdaptedStudentAttendance\u003e nullContainingList \u003d Collections.singletonList(null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendanceRecord record \u003d new JsonAdaptedAttendanceRecord(VALID_WEEK_VALUE_5, nullContainingList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                JsonAdaptedAttendanceRecord.MESSAGE_INVALID_ATTENDANCE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                record::toKeyValuePair);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/attendance/JsonAdaptedAttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_SCORE_101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_SCORE_MINUS_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_33;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedAttendanceTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedAttendance} for testing with participation score of 33. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedAttendance VALID_JSON_ADAPTED_ATTENDANCE_33 \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendance(VALID_PARTICIPATION_SCORE_33);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedAttendance} for testing with participation score of 80. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedAttendance VALID_JSON_ADAPTED_ATTENDANCE_80 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedAttendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getParticipationScore_returnsParticipationScore() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d new JsonAdaptedAttendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_PARTICIPATION_SCORE_80, attendance.getParticipationScore());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validAttendance_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d new JsonAdaptedAttendance(VALID_ATTENDANCE_33);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_33, attendance.toModelType());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_validParticipationScore_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance attendance \u003d new JsonAdaptedAttendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        Attendance expectedAttendance \u003d new Attendance(VALID_PARTICIPATION_SCORE_80);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(expectedAttendance, attendance.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toModelType_invalidParticipationScore_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d Attendance.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance attendanceNegative \u003d new JsonAdaptedAttendance(INVALID_PARTICIPATION_SCORE_MINUS_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attendanceNegative::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance attendanceExceed \u003d new JsonAdaptedAttendance(INVALID_PARTICIPATION_SCORE_101);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attendanceExceed::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/attendance/JsonAdaptedStudentAttendanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.storage.attendance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_SCORE_101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STUDENT_UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_33;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_51;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStudent.STUDENT_UUID_FIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.JsonAdaptedUuidTest.VALID_JSON_ADAPTED_UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.storage.attendance.JsonAdaptedAttendanceTest.VALID_JSON_ADAPTED_ATTENDANCE_33;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.storage.JsonAdaptedUuid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class JsonAdaptedStudentAttendanceTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedStudentAttendance} for testing with AMY as student and participation score of 80. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedStudentAttendance VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_AMY \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedStudentAttendance(UUID.fromString(VALID_UUID_AMY), VALID_ATTENDANCE_33);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /** A {@code JsonAdaptedStudentAttendance} for testing with BOB as student and participation score of 51. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final JsonAdaptedStudentAttendance VALID_JSON_ADAPTED_STUDENT_ATTENDANCE_BOB \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            new JsonAdaptedStudentAttendance(UUID.fromString(VALID_UUID_BOB), VALID_ATTENDANCE_51);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validAttendance_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(UUID.fromString(VALID_UUID_AMY), VALID_ATTENDANCE_33);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_33, studentAttendance.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validUuid_returnsUuid() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(UUID.fromString(VALID_UUID_AMY), VALID_ATTENDANCE_33);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(UUID.fromString(VALID_UUID_AMY), studentAttendance.toKeyValuePair().getKey());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validJsonAdaptedAttendance_returnsAttendance() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(VALID_JSON_ADAPTED_UUID, VALID_JSON_ADAPTED_ATTENDANCE_33);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(VALID_ATTENDANCE_33, studentAttendance.toKeyValuePair().getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_validJsonAdaptedUuid_returnsUuid() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(VALID_JSON_ADAPTED_UUID, VALID_JSON_ADAPTED_ATTENDANCE_33);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(UUID.fromString(VALID_UUID_AMY), studentAttendance.toKeyValuePair().getKey());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_invalidJsonAdaptedUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedUuid invalidJsonAdaptedUuid \u003d new JsonAdaptedUuid(INVALID_STUDENT_UUID);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(invalidJsonAdaptedUuid, VALID_JSON_ADAPTED_ATTENDANCE_33);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedUuid.MESSAGE_INVALID_UUID,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                studentAttendance::toKeyValuePair);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_invalidJsonAdaptedAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedAttendance invalidJsonAdaptedAttendance \u003d new JsonAdaptedAttendance(INVALID_PARTICIPATION_SCORE_101);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(VALID_JSON_ADAPTED_UUID, invalidJsonAdaptedAttendance);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, Attendance.MESSAGE_CONSTRAINTS, studentAttendance::toKeyValuePair);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_nullJsonAdaptedStudentUuid_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(null, VALID_JSON_ADAPTED_ATTENDANCE_33);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedStudentAttendance.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                STUDENT_UUID_FIELD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studentAttendance::toKeyValuePair);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void toKeyValuePair_nullJsonAdaptedAttendance_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedStudentAttendance.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                Attendance.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        JsonAdaptedStudentAttendance studentAttendance \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "                new JsonAdaptedStudentAttendance(VALID_JSON_ADAPTED_UUID, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, studentAttendance::toKeyValuePair);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttendanceRecordBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * A utility class to help with building AttendanceRecord objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class AttendanceRecordBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private HashMap\u003cUUID, Attendance\u003e record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Creates a {@code AttendanceRecordBuilder} with no entries."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecordBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        record \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Initializes the {@code AttendanceRecordBuilder} with the data of {@code recordToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecordBuilder(AttendanceRecord recordToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        record \u003d new HashMap\u003c\u003e(recordToCopy.getAttendanceRecord());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Inserts a new {@code UUID} and {@code Attendance} into the {@code AttendanceRecord} we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecordBuilder withEntry(UUID uuid, Attendance attendance) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        record.put(uuid, attendance);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public AttendanceRecord build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new AttendanceRecord(record);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditLessonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " * A utility class to help with building EditLessonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class EditLessonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private EditLessonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder(EditLessonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.descriptor \u003d new EditLessonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns an {@code EditLessonDescriptor} with fields containing {@code lesson}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder(Lesson lesson) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setStartTime(lesson.getStartTime());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setEndTime(lesson.getEndTime());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setDay(lesson.getDay());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setVenue(lesson.getVenue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code startTime} of the {@code EditLessonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setStartTime(LocalTime.parse(startTime, Lesson.TIME_FORMATTER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code endTime} of the {@code EditLessonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setEndTime(LocalTime.parse(endTime, Lesson.TIME_FORMATTER));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code Day} of the {@code EditLessonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder withDay(String day) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setDay(Day.createDay(day));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code Venue} of the {@code EditLessonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptorBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setVenue(new Venue(venue));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditLessonDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleClassDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": " * A utility class to help with building EditModuleClassDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class EditModuleClassDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    private EditModuleClassDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        descriptor \u003d new EditModuleClassDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassDescriptorBuilder(EditModuleClassDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        this.descriptor \u003d new EditModuleClassDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns an {@code EditModuleClassDescriptor} with fields containing {@code moduleClass}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassDescriptorBuilder(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        descriptor \u003d new EditModuleClassCommand.EditModuleClassDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        descriptor.setName(moduleClass.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Sets the {@code Name} of the {@code EditModuleClassDescriptor} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public EditModuleClassDescriptor build() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 41,
      "dextertanyj": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditStudentDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand.EditStudentDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class to help with building EditStudentDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class EditStudentDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private EditStudentCommand.EditStudentDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor \u003d new EditStudentDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder(EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.descriptor \u003d new EditStudentDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns an {@code EditStudentDescriptor} with fields containing {@code student}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder(Student student) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor \u003d new EditStudentCommand.EditStudentDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setName(student.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setTelegram(student.getTelegram());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setEmail(student.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setTags(student.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code Telegram} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public EditStudentDescriptorBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.setTelegram(new Telegram(telegram));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code Email} of the {@code EditStudentDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditStudentDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public EditStudentDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 2,
      "ruixuantan": 5,
      "ypinhsuan": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.lesson.Lesson.TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecordList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.NumberOfOccurrences;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"08:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"10:00\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final Day DEFAULT_DAY \u003d Day.TUESDAY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final int DEFAULT_NUMBER_OF_OCCURRENCES \u003d 13;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final String DEFAULT_VENUE \u003d \"COM1-0211\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private NumberOfOccurrences numberOfOccurrences;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private AttendanceRecordList attendanceRecordList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a {@code LessonBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        startTime \u003d LocalTime.parse(DEFAULT_START_TIME, TIME_FORMATTER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        endTime \u003d LocalTime.parse(DEFAULT_END_TIME, TIME_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        day \u003d DEFAULT_DAY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        numberOfOccurrences \u003d new NumberOfOccurrences(DEFAULT_NUMBER_OF_OCCURRENCES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceRecordList \u003d new AttendanceRecordList(numberOfOccurrences);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        startTime \u003d lessonToCopy.getStartTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        endTime \u003d lessonToCopy.getEndTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        day \u003d lessonToCopy.getDay();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        numberOfOccurrences \u003d lessonToCopy.getNumberOfOccurrences();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        venue \u003d lessonToCopy.getVenue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        attendanceRecordList \u003d lessonToCopy.getAttendanceRecordList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code startTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder withStartTime(LocalTime startTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code endTime} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder withEndTime(LocalTime endTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code day} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder withDay(Day day) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code numberOfOccurrences} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Resets the {@code attendanceRecordList} of the {@code Lesson} to an empty {@code AttendanceRecordList} with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * length matching the given {@code numberOfOccurrences}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder withNumberOfOccurrences(int numberOfOccurrences) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.numberOfOccurrences \u003d new NumberOfOccurrences(numberOfOccurrences);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendanceRecordList \u003d new AttendanceRecordList(this.numberOfOccurrences);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code venue} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public LessonBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the {@code attendanceRecordList} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Resets the {@code numberOfOccurrences} of the {@code Lesson} to match that of"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * the given {@code attendanceRecordList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public LessonBuilder withAttendanceRecordList(AttendanceRecordList attendanceRecordList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.numberOfOccurrences \u003d new NumberOfOccurrences(attendanceRecordList.getAttendanceRecordList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.attendanceRecordList \u003d attendanceRecordList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new Lesson(startTime, endTime, day, numberOfOccurrences, venue, attendanceRecordList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Inserts the given {@code records} into the given {@code lesson} and fills subsequent occurrences with empty"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * {@code AttendanceRecord}s."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static Lesson insertAttendanceRecords(Lesson lesson, AttendanceRecord... records) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        int recurrences \u003d lesson.getNumberOfOccurrences().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        List\u003cAttendanceRecord\u003e recordList \u003d new ArrayList\u003c\u003e(Collections.nCopies(recurrences, new AttendanceRecord()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (int i \u003d 0; i \u003c records.length; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            recordList.set(i, records[i]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new LessonBuilder(lesson).withAttendanceRecordList(new AttendanceRecordList(recordList)).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 36,
      "ypinhsuan": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASS_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_OCCURRENCES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.logic.commands.EditLessonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " * A utility class for Lesson."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junlong4321"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "public class LessonUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns an add lesson command string for adding the {@code lesson}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static String getAddLessonCommand(Index moduleClassIndex, Lesson lesson) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return AddLessonCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + PREFIX_CLASS_INDEX + moduleClassIndex.getOneBased() + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                + getLessonDetails(lesson);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns the part of the command string for the given {@code lesson}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static String getLessonDetails(Lesson lesson) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_DAY + lesson.getDay().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_START_TIME + lesson.getStartTime().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_END_TIME + lesson.getEndTime().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_VENUE + lesson.getVenue().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_NUMBER_OF_OCCURRENCES + lesson.getNumberOfOccurrences().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns the part of command string for the given {@code EditLessonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static String getEditLessonDescriptorDetails(EditLessonCommand.EditLessonDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.getStartTime().ifPresent(startTime -\u003e sb.append(PREFIX_START_TIME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .append(startTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.getEndTime().ifPresent(endTime -\u003e sb.append(PREFIX_END_TIME)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                .append(endTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.getDay().ifPresent(day -\u003e sb.append(PREFIX_DAY).append(day.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.getVenue().ifPresent(venue -\u003e sb.append(PREFIX_VENUE).append(venue.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 16,
      "junlong4321": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ReadOnlyTutorsPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.StateRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public Path getTutorsPetFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setTutorsPetFilePath(Path tutorsPetFilePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setTutorsPet(ReadOnlyTutorsPet newData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ReadOnlyTutorsPet getTutorsPet() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void commit(String commitMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public StateRecords viewStateRecords() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteStudent(Student target) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllStudents() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public boolean hasModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void setModuleClass(ModuleClass target, ModuleClass editedModuleClass) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteModuleClass(ModuleClass target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public void deleteAllModuleClasses() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ObservableList\u003cStudent\u003e getFilteredStudentList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void updateFilteredStudentList(Predicate\u003cStudent\u003e predicate) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ObservableList\u003cModuleClass\u003e getFilteredModuleClassList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void updateFilteredModuleClassList(Predicate\u003cModuleClass\u003e predicate) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 14,
      "dextertanyj": 141,
      "ruixuantan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleClassBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A utility class to help with building ModuleClass objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class ModuleClassBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"CS1101 Tutorial\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private Set\u003cUUID\u003e studentUuids;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private List\u003cLesson\u003e lessons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Creates a {@code ModuleClassBuilder} with the default {@code Name} and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * empty {@code studentUuids} and {@code lessons} list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClassBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        studentUuids \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        lessons \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Initializes the ModuleClassBuilder with the data of {@code moduleClassToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClassBuilder(ModuleClass moduleClassToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        name \u003d moduleClassToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        studentUuids \u003d new HashSet\u003c\u003e(moduleClassToCopy.getStudentUuids());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        lessons \u003d moduleClassToCopy.getLessons();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the {@code Name} of the {@code ModuleClass} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClassBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the {@code Set\u003cUUID\u003e} of the {@code ModuleClass} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Overwrites any previous content of the {@code Set\u003cUUID\u003e}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public ModuleClassBuilder withStudentUuids(UUID... studentUuids) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.studentUuids \u003d new HashSet\u003c\u003e(Arrays.asList(studentUuids));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Sets the {@code List\u003cLesson\u003e} of the {@code ModuleClass} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Overwrites any previous content of the {@code List\u003cLesson\u003e}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClassBuilder withLessons(Lesson... lessons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        this.lessons \u003d Arrays.asList(lessons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public ModuleClass build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ModuleClass(name, studentUuids, lessons);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 69,
      "junlong4321": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleClassUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "samlsm"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.logic.commands.AddModuleClassCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import seedu.address.logic.commands.EditModuleClassCommand.EditModuleClassDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "samlsm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": " * A utility class for ModuleClass."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "samlsm"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "samlsm"
        },
        "content": "public class ModuleClassUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns an add class command string for adding the {@code moduleClass}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String getAddModuleClassCommand(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return AddModuleClassCommand.COMMAND_WORD + \" \" + getModuleDetails(moduleClass);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns the part of the command string for the given {@code moduleClass}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static String getModuleDetails(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        sb.append(PREFIX_NAME + moduleClass.getName().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleClassDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static String getEditModuleClassDescriptorDetails(EditModuleClassDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Returns a new {@code ModuleClass} based on the given {@code moduleClass} but with the specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * {@code targetLesson} replaced."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static ModuleClass manualReplaceLessonToModuleClass(ModuleClass moduleClass,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                                                                Lesson targetLesson, Lesson modifiedLesson) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        List\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e(moduleClass.getLessons());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            if (lesson.isSameLesson(targetLesson)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "                lessons.set(lessons.indexOf(lesson), modifiedLesson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return new ModuleClass(moduleClass.getName(), moduleClass.getStudentUuids(), lessons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "samlsm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 20,
      "dextertanyj": 15,
      "junlong4321": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 1,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.name.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.student.Telegram;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class to help with building Student objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DEFAULT_UUID \u003d \"edbf256e-ea32-4853-8591-5df758873b11\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Generated Student\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DEFAULT_TELEGRAM \u003d \"generated_student\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"generated_student@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    private UUID uuid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private Telegram telegram;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Creates a {@code StudentBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        uuid \u003d UUID.fromString(DEFAULT_UUID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        telegram \u003d new Telegram(DEFAULT_TELEGRAM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tags \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Initializes the StudentBuilder with the data of {@code studentToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentBuilder(Student studentToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        uuid \u003d studentToCopy.getUuid();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        name \u003d studentToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        telegram \u003d studentToCopy.getTelegram();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        email \u003d studentToCopy.getEmail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(studentToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     * Sets the {@code UUID} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public StudentBuilder withUuid(String uuid) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        this.uuid \u003d UUID.fromString(uuid);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junlong4321"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code Name} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Student} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Sets the {@code Telegram} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public StudentBuilder withTelegram(String telegram) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        this.telegram \u003d new Telegram(telegram);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Sets the {@code Email} of the {@code Student} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public StudentBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public Student build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new Student(uuid, name, telegram, email, tags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 4,
      "ruixuantan": 7,
      "ypinhsuan": 68,
      "junlong4321": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StudentUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TELEGRAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.AddStudentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.logic.commands.EditStudentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.components.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class for Student."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class StudentUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns an add student command string for adding the {@code student}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static String getAddStudentCommand(Student student) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return AddStudentCommand.COMMAND_WORD + \" \" + getStudentDetails(student);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the part of command string for the given {@code student}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static String getStudentDetails(Student student) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        sb.append(PREFIX_NAME + student.getName().fullName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        sb.append(PREFIX_TELEGRAM + student.getTelegram().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        sb.append(PREFIX_EMAIL + student.getEmail().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        student.getTags().stream().forEach("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the part of command string for the given {@code EditStudentDescriptor}\u0027s details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static String getEditStudentDescriptorDetails(EditStudentCommand.EditStudentDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        descriptor.getTelegram().ifPresent(telegram -\u003e sb.append(PREFIX_TELEGRAM).append(telegram.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 3,
      "dextertanyj": 1,
      "ypinhsuan": 15,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the middle index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the last index of the student in the {@code model}\u0027s student list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredStudentList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Returns the student in the {@code model}\u0027s student list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static Student getStudent(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return model.getFilteredStudentList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ypinhsuan": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorsPetBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class to help with building TutorsPet objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " *     {@code TutorsPet tp \u003d new TutorsPetBuilder().withStudent(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TutorsPetBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private TutorsPet tutorsPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public TutorsPetBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPet \u003d new TutorsPet();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public TutorsPetBuilder(TutorsPet tutorsPet) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        this.tutorsPet \u003d tutorsPet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     * Adds a new {@code Student} to the {@code TutorsPet} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public TutorsPetBuilder withStudent(Student student) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        tutorsPet.addStudent(student);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Adds a new {@code ModuleClass} to the {@code TutorsPet} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public TutorsPetBuilder withModuleClass(ModuleClass moduleClass) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        tutorsPet.addModuleClass(moduleClass);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public TutorsPet build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "        return tutorsPet;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 9,
      "ypinhsuan": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAttendanceRecord.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_33;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_51;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_SCORE_80;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.model.attendance.AttendanceRecord;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "public class TypicalAttendanceRecord {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final AttendanceRecord RECORD_EMPTY \u003d new AttendanceRecordBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code AttendanceRecord} for testing with a single entry, Alice with a score of 80."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final AttendanceRecord RECORD_ALICE_80 \u003d new AttendanceRecordBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withEntry(ALICE.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_80)).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code AttendanceRecord} for testing with two entries:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - Alice with score of 51"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * - Benson with score of 33"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final AttendanceRecord RECORD_ALICE_51_BENSON_33 \u003d new AttendanceRecordBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withEntry(ALICE.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_51))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withEntry(BENSON.getUuid(), new Attendance(VALID_PARTICIPATION_SCORE_33)).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    private TypicalAttendanceRecord() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static List\u003cAttendanceRecord\u003e getTypicalAttendanceRecord() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(RECORD_EMPTY, RECORD_ALICE_80, RECORD_ALICE_51_BENSON_33));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 28,
      "dextertanyj": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 3,
      "dextertanyj": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLesson.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.model.lesson.Lesson.TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class containing a list of {@code Lesson} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TypicalLesson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final Lesson LESSON_WED_2_TO_4 \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withStartTime(LocalTime.parse(\"14:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEndTime(LocalTime.parse(\"16:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withDay(Day.WEDNESDAY).withNumberOfOccurrences(7).withVenue(\"COM1-B111\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final Lesson LESSON_FRI_8_TO_10 \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withStartTime(LocalTime.parse(\"08:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEndTime(LocalTime.parse(\"10:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withDay(Day.FRIDAY).withNumberOfOccurrences(13).withVenue(\"S17-0302\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static final Lesson LESSON_THU_10_TO_11 \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withStartTime(LocalTime.parse(\"10:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEndTime(LocalTime.parse(\"11:00\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withDay(Day.THURSDAY).withNumberOfOccurrences(10).withVenue(\"AS6-0211\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static final Lesson ONLINE_LESSON_TUE_1030_1130 \u003d new LessonBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withStartTime(LocalTime.parse(\"10:30\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withEndTime(LocalTime.parse(\"11:30\", TIME_FORMATTER))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withDay(Day.TUESDAY).withNumberOfOccurrences(3)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withVenue(\"https://zoom/j/95317249?)pwd\u003dUlld2tWY3MwMkRibjQyUkdZZz09\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private TypicalLesson() {} // prevents instantiation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessons() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "                LESSON_WED_2_TO_4, LESSON_FRI_8_TO_10, LESSON_THU_10_TO_11, ONLINE_LESSON_TUE_1030_1130));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 8,
      "ypinhsuan": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModuleClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2100_LAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "samlsm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2100_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103T_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.LessonBuilder.insertAttendanceRecords;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_ALICE_51_BENSON_33;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalAttendanceRecord.RECORD_ALICE_80;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_FRI_8_TO_10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.LESSON_THU_10_TO_11;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.testutil.TypicalLesson.ONLINE_LESSON_TUE_1030_1130;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "import static seedu.address.testutil.TypicalStudent.BENSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TypicalModuleClass {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code ModuleClass} for testing with ALICE and BENSON as students and THU_10_TO_11 lesson."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final ModuleClass CS2103T_TUTORIAL \u003d new ModuleClassBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withName(VALID_NAME_CS2103T_TUTORIAL)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withStudentUuids(ALICE.getUuid(), BENSON.getUuid())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withLessons(insertAttendanceRecords(LESSON_THU_10_TO_11, RECORD_ALICE_80, RECORD_ALICE_51_BENSON_33))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * A {@code ModuleClass} for testing with no students and the following lessons:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * LESSON_FRI_8_TO_10 and ONLINE_LESSON_TUE_1030_1130."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final ModuleClass CS2100_LAB \u003d new ModuleClassBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(VALID_NAME_CS2100_LAB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withLessons(LESSON_FRI_8_TO_10, ONLINE_LESSON_TUE_1030_1130)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * A {@code ModuleClass} for testing with ALICE as student and no lessons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static final ModuleClass CS2100_TUTORIAL \u003d new ModuleClassBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            .withName(VALID_NAME_CS2100_TUTORIAL).withStudentUuids(ALICE.getUuid()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private TypicalModuleClass() {} // prevents instantiation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static List\u003cModuleClass\u003e getTypicalModuleClasses() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_TUTORIAL, CS2100_LAB, CS2100_TUTORIAL));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 4,
      "dextertanyj": 40,
      "ruixuantan": 6,
      "junlong4321": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalStudent.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AVERAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EXPERIENCED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TELEGRAM_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_UUID_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": " * A utility class containing a list of {@code Student} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "public class TypicalStudent {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student ALICE \u003d new StudentBuilder().withUuid(\"0c527a3f-8a6f-4c16-b57d-563a9c43cf6b\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withTelegram(\"4Lice_P\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withTags(\"Average\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student BENSON \u003d new StudentBuilder().withUuid(\"5c09bbdc-b89c-482a-a4b0-32ede6d679e7\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withEmail(\"johnd@example.com\").withTelegram(\"BeN_10\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withTags(\"PotentialTA\", \"Experienced\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student CARL \u003d new StudentBuilder().withUuid(\"62e9abd0-5456-4979-a9cc-8a0818421c2a\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(\"Carl Kurz\").withTelegram(\"cK2zz\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student DANIEL \u003d new StudentBuilder().withUuid(\"d3593480-6648-4f7a-afa5-6c1b09b52718\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(\"Daniel Meier\").withTelegram(\"danielmeier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"Weak\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student ELLE \u003d new StudentBuilder().withUuid(\"abb96663-589f-4553-bc25-fa93fed7459c\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(\"Elle Meyer\").withTelegram(\"4114_my\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student FIONA \u003d new StudentBuilder().withUuid(\"2be53daa-e18d-4de1-828b-31ad891ff7fc\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(\"Fiona Kunz\").withTelegram(\"kunz_F\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "    public static final Student GEORGE \u003d new StudentBuilder().withUuid(\"48a5bfc5-782a-4861-8b36-9db2833cfd2d\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            .withName(\"George Best\").withTelegram(\"dabest\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // manually added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Student HOON \u003d new StudentBuilder().withUuid(\"bd4f4c43-35d5-4afc-ab83-88cf20314560\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .withName(\"Hoon Meier\").withTelegram(\"hoon_meier\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Student IDA \u003d new StudentBuilder().withUuid(\"7f551343-cadb-4df3-8b50-76394fe84107\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junlong4321"
        },
        "content": "            .withName(\"Ida Mueller\").withTelegram(\"ida_mueller\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    // manually added - student\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Student AMY \u003d new StudentBuilder().withUuid(VALID_UUID_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withName(VALID_NAME_AMY).withTelegram(VALID_TELEGRAM_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final Student BOB \u003d new StudentBuilder().withUuid(VALID_UUID_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withName(VALID_NAME_BOB).withTelegram(VALID_TELEGRAM_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_AVERAGE, VALID_TAG_EXPERIENCED).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // a keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    private TypicalStudent() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ypinhsuan"
        },
        "content": "    public static List\u003cStudent\u003e getTypicalStudents() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 9,
      "dextertanyj": 12,
      "ypinhsuan": 18,
      "junlong4321": 11,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTutorsPet.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.TutorsPet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.moduleclass.ModuleClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class TypicalTutorsPet {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code TutorsPet} with all the typical students and classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static TutorsPet getTypicalTutorsPet() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tp \u003d new TutorsPet();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (Student student : TypicalStudent.getTypicalStudents()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            tp.addStudent(student);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (ModuleClass moduleClass : TypicalModuleClass.getTypicalModuleClasses()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            tp.addModuleClass(moduleClass);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     * Returns a {@code TutorsPet} with no predefined links between typical students and classes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public static TutorsPet getNoLinkTutorsPet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        TutorsPet tp \u003d new TutorsPet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (Student student : TypicalStudent.getTypicalStudents()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            tp.addStudent(student);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        for (ModuleClass moduleClass : TypicalModuleClass.getTypicalModuleClasses()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "            tp.addModuleClass(new ModuleClassBuilder(moduleClass).withStudentUuids().build());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     * Returns a {@code TutorsPet} with only typical classes, without students and their uuids."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public static TutorsPet getOnlyModuleClassTutorsPet() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        TutorsPet tp \u003d new TutorsPet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        for (ModuleClass moduleClass : TypicalModuleClass.getTypicalModuleClasses()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            tp.addModuleClass(new ModuleClassBuilder(moduleClass).withStudentUuids().build());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "samlsm"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     * Returns a {@code TutorsPet} with only typical students, without classes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "samlsm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    public static TutorsPet getOnlyStudentsTutorsPet() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        TutorsPet tp \u003d new TutorsPet();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        for (Student student : TypicalStudent.getTypicalStudents()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "samlsm"
        },
        "content": "            tp.addStudent(student);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "samlsm"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "samlsm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "samlsm": 11,
      "dextertanyj": 36,
      "ruixuantan": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandHistoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String CACHE \u003d \"Cache\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String PREVIOUS \u003d \"Previous\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String COMMAND_1 \u003d \"Command 1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private static final String COMMAND_2 \u003d \"Command 2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void constructor_cleanState() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        CommandHistory commandHistoryTest \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistoryTest.hasPrevious());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistoryTest.hasNext());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistoryTest.hasCached());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addHistory_null_throwNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e commandHistory.addHistory(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addHistory_validString_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(PREVIOUS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(commandHistory.hasPrevious());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(PREVIOUS, commandHistory.getPrevious(CACHE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void addHistory_validString_resetsCache() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // setup previous history and cache"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(PREVIOUS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(CACHE, commandHistory.getCached());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistory.hasCached());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getPrevious_nullString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e commandHistory.getPrevious(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getPrevious_noPrevious_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e commandHistory.getPrevious(CACHE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getPrevious_hasPrevious_returnsPreviousAndDecrementsPointer() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(PREVIOUS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(PREVIOUS, commandHistory.getPrevious(CACHE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistory.hasPrevious());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getPrevious_outsideStack_storesCache() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // setup previous history"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(PREVIOUS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistory.hasNext());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(CACHE, commandHistory.getCached());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getNext_noNext_throwsIndexOutOfBoundsException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e commandHistory.getNext());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getNext_hasNext_returnsNextAndIncrementsPointer() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // setup previous history"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertTrue(commandHistory.hasNext(), \"Test precondition error: no next command was found.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(COMMAND_2, commandHistory.getNext());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistory.hasNext());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getNext_retainsCache() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // setup previous history"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getNext();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertEquals(CACHE, commandHistory.getCached());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getCache_noCache_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e commandHistory.getCached());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    public void getCache_hasCache_restoresPointerToAboveStack() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        // setup previous history"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.addHistory(COMMAND_1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getPrevious(CACHE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        commandHistory.getCached();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "        assertFalse(commandHistory.hasNext());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dextertanyj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dextertanyj": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/stylesheet/StylesheetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "package seedu.address.ui.stylesheet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "import seedu.address.ui.stylesheet.exceptions.StylesheetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "class StylesheetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void lightThemeExists() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Stylesheet.LIGHT.getStylesheet();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (StylesheetException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void alternateThemeExists() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Stylesheet.ALTERNATE.getStylesheet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (StylesheetException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void darkThemeExists() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Stylesheet.DARK.getStylesheet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (StylesheetException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    public void extensionsExists() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            Stylesheet.EXTENSION.getStylesheet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        } catch (StylesheetException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ruixuantan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ruixuantan": 46
    }
  }
]
