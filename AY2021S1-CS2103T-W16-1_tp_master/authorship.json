[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-1/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Recretary is a tool that helps Executive Personal Secretaries manage their day-to-day tasks and take care of their executive\u0027s busy meeting schedule. The aim is to reduce the burden and the workload of the Executive Personal Secretaries.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested in using Recretary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested about developing Recretary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 11,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "### Koh Zhe Hao"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003cimg src\u003d\"images/koh-zhe-hao.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "[[github](http://github.com/koh-zhe-hao)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "[[portfolio](team/koh-zhe-hao.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Responsibilities: General work and Update contacts implementation to contain new class Company"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "### Liu Chuyue"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "\u003cimg src\u003d\"images/ramenmen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "[[github](http://github.com/ramenmen)] [[portfolio](team/liu-chuyue.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* Responsibilities: General work and Implementing new Meeting class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "### Adithya Narayan Rangarajan Sreenivasan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "\u003cimg src\u003d\"images/adithyanarayan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[[github](http://github.com/AdithyaNarayan)] [[portfolio](team/adi.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* Responsibilities: UI and Frontend"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* In charge of `UI`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* JavaFX expert"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "### Tan Xuan Zhi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "\u003cimg src\u003d\"images/xxzz-tt.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "[[github](https://github.com/xxzz-tt)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "[[portfolio](team/tan-xuan-zhi.md)]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* Responsibilities: Implement commands relating to model class Meeting"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "### Zhao Huan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cimg src\u003d\"images/zhaohuanqdcn.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "[[github](http://github.com/zhaohuanqdcn)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "[[portfolio](team/zhao-huan.md)]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* Responsibilities: Implement commands relating to model class Meeting and Implement meeting list "
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 6,
      "zhaohuanqdcn": 5,
      "ramenmen": 4,
      "AdithyaNarayan": 6,
      "-": 34,
      "xxzz-tt": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Target user profile**:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Potential Users (who prefer CLI/typing):"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Coders"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Authors/Bloggers/Journalists"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Personal Secretaries**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Potential Users (who need address book):"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Business managers"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Personal Secretaries**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * HR admins"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Salespersons"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Common in both: "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * **Executive Personal Secretary**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Job Focus: "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Arrange conference calls and meetings"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Manage clients"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Send email correspondence"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Make travel arrangements"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Value proposition**: "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Minimise the workload"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Easier to manage"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Automate monotonous and repetitive tasks"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Decrease human errors"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Reduce typos and spelling mistakes"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Optimise meeting timings and location"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Reminders for important tasks/events"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | update existing meetings | make sure the details are up to date.| "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | delete specified meetings if they are cancelled.| |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | view all upcoming meetings in a specific order.| |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | add a meeting to the schedule.| |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | search for a certain contact I am looking for| |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | view a list of all my contacts at any time.| |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | create new contact in my contact list.| |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    first-time user | enter my and my employer\u0027s details| |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    meeting planner | search for meetings with some criteria.| |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent meeting planner | receive reminders from the app that to remind my employer for an upcoming meeting | make sure my employer can be on time for their meetings.| "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent meeting planner | attach a location and time of the meeting as additional information| |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |     expert user | delete some unwanted contacts in my contact list.| |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `*`  |    frequent user | update each of my contacts whenever there is a change in their particulars/ details.||"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | easily reschedule agenda items if plans change.| |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |     expert user | edit my agenda list to add or delete some details.| |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    copy typist | get my notes automatically corrected for spelling/grammar mistakes.| |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | plan a route based on meeting locations and times.| |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    first time user | find the list of all features that the app has | know what specific task can I complete by using this app.| "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    user | see a list of tasks that requires the most priority | pay attention to them first.| "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    regular user | sync/export contacts/calendar| |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | receive reminders for tasks that are due soon  |  complete them in time.| "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | assimilate a map in the app to keep track of all frequently visited locations  |  plan the travel routine wisely that takes time taken to travel from one place to another place into consideration.| "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | send emails directly from the app by choosing the necessary recipients from the contact list.| |"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    relatively new user | input slightly variated input that the app can understand and interpret  |  learn while doing.| "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    first time user | import existing calendar/agendas/locations |  save my time on data migration.| "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    first time user | learn how to use the app  |  actually use the app to solve the tasks that I have.| "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | auto-fill the necessary details into a pre-defined template and batch send emails  |  save the time taken to individually send emails for the meeting.| "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |     expert user | create shortcuts for certain tasks |  save time on frequently performed tasks.| "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    new or returning user | sync my tasks from other platforms to the task list |  save time instead of entering them manually.| "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    long-time user | archive unused data | I am not distracted by irrelevant or old items.| "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    user ready to start using the app | clear all current data |  get rid of data I added when experimenting with the app.| "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    busy user | see my daily tasks at the start of the day  |  better organize my time.| "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | add tasks to my task list.| |"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | view a list of all the tasks I have to accomplish and their deadlines | I am up to date with my work.| "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | search for tasks by name or deadline in the task list.| |"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | delete tasks from my task list.| |"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | update the details of a task in my task list.| |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    relatively new user | be reminded of the key features  |  speed up my workflows.| "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | use an email template to send personalised emails to notify other companies for a meeting | save time on crafting the email one-by-one.| "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    meeting planner | resolve meetings conflict | make sure no two meetings will happen at the same time.| "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    meeting planner | give priority to certain meetings | make sure these important meetings will take place under the best possible circumstances.| "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent user | use built-in shortcuts  |  accelerate my workflow.| "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    frequent meeting planner | import and export the existing calendar  |  save time on entering this information manually.| "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* *`  |    relatively new user | be prompted to change my invalid input  |  get it correctly from then on.| "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* * *`  |    copy typist | transcribe/type a document into a note | save them for future use.| "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* * *`  |    busy user | see a weekly digest on weekend | have a sense of what happened during the week.| "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* * *`  |    receiver of meeting emails | see my meetings automatically fetched and updated from the email | I don\u0027t have to manually create a meeting when it is proposed by a third-party.| "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "| `* * *`  |    potential user exploring the app | see the app populated with sample data,  |  easily see how the app will look like when it is in use.| "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "(For all use cases below, the **System** is the `Recretary` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC01 - Add a person**  "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**  "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to add a new contact with the relevant details."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System indicates that the addition is successful."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. System detects an error in the data."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System requests for the correct data."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a2. User enters new data."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 2."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC02 - Add a meeting and its participants**  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to add a new meeting with the location, title and date."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System requests for the participant lists."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. User enters the participant\u0027s name (must be one of the contacts)."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "4. System indicates that the addition is successful."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "5. User repeats step 3 until all participants are added."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. System detects an error in the data."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System requests for the correct data."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a2. User enters new data."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 2."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 3a. Contact is not in System."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 3a1. System requests for the correct contact."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 3a2. User enters new contact name."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 4."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC03 - List all contacts or all meetings**  "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to list all contacts/ meetings"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System shows the full list of contacts/ meetings"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2a. The requested list is empty."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC04 - Edit a contact**  "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all contacts (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to edit a contact with its index and new details."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System indicates that the update is successful."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b2. User enters the correct index and new details."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2c. User did not enter new details."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c1. System indicates the error and requests for the correct details."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c2. User enters the specific index and correct details."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2c1-2c2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC05 - Edit a meeting**  "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all meetings (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to edit a meeting with its index and new details."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System indicates that the update is successful."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2b2. User enters the correct index and new details."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2c. User did not enter new details."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c1. System indicates the error and requests for the correct details."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2c2. User enters the specific index and correct details."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2c1-2c2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": " "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2d. User requests to edit participant list."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d1. System shows current list of participants. "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d2. User enters the index of the participant he/she wants to remove."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2d3. System shows the updated list of participants."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2d1-2d2 are repeated until the user finishes editing.  "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC06 - Find a contact or a meeting**  "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to search for a contact/meeting with a keyword."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. System shows the list of contacts/ meetings with matching keywords."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. No contact/ meeting matched the keyword method."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 1a1. System shows a message indicating no matching records were found."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC07 - Delete a contact or a meeting**  "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1. User requests to \u003cins\u003e list all contacts/ meetings (UC03)\u003c/ins\u003e."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2. User requests to remove a contact/ meeting from the list with its index."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "3. System shows a success message "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 2b. User enters a negative integer as index."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2a1. System indicates the error and requests for a non-negative index as index."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * 2a2. User enters the correct index."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Steps 2b1-2b2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case resumes from step 3."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Use case: UC08 - Delete all contacts or meetings**  "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "1.  User requests to delete all contacts/ meetings."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "2.  System indicates that the deletion is successful."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "**Extensions**: "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* 1a. No contact/ meeting has been added."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "1.  Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "4.  Should be portable. The executable must be one-click run."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "5.  The data must be saved onto the hard disk and must be transferrable. In case of unexpected shutdown, the data must be preserved. The data should be human readable."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "6.  Each new update should be backwords-compatable with the data from the previous versions so that it will be easy for users to port over."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "7.  The app must speeden the workflow of the secretary and not be of hinderance.  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **API**: Application Programming Interface"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **UML**: Unified Modeling Language"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **GUI**: Graphic User Interface"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **MSS**: Main Success Scenario (aka Main Flow of Events)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Java FX**: Standard GUI library for Java SE"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ":information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27,
      "zhaohuanqdcn": 29,
      "ramenmen": 49,
      "AdithyaNarayan": 4,
      "-": 331,
      "xxzz-tt": 159
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Recretary is a **desktop app for managing contacts and meetings, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Recretary can get your contact management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* First Run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Contact \u0026 Meeting Management"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Adding a person/ meeting : `add \u003ccontact | meeting\u003e`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Listing all persons/ meetings: `list \u003ccontact | meeting\u003e` "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Editing a person/ meeting: `edit \u003ccontact | meeting\u003e` "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Locating persons/ meetings: `find \u003ccontact | meeting\u003e` "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Deleting a person/ meeting: `delete \u003ccontact | meeting\u003e`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * General"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Clearing all entries : `clear`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Viewing help : `help`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * Exiting the program : `exit`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        * FAQ"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Command summary"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "## First Run"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "1. Download the latest `recretary.jar` from [here](https://github.com/AY2021S1-CS2103T-W16-1/tp/releases)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your Recretary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "   * **`list meeting`** : Lists all meetings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "   * **`add_contact`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 c/ABC PTE LTD` : Adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "   * **`delete contact`**`3` : Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "   * **`clear`** : Deletes all data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "### Contact \u0026 Meeting management"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "#### Adding a person: `add`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Adds a person or meeting to the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `add \u003ccontact | meeting\u003e`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `add_contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COMPANY [r/COMPANY_ROLE] [t/TAG]…​`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `add_contact n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 c/ABC Holdings Pte. Ltd`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `add_contact n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Mansion p/1234567 r/CEO c/DEF Company`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Adds a meeting into the meeting schedule "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `add meeting d/DATETIME dur/DURATION t/TITLE [l/LOCATION]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Add participants into the meeting with this format:  "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "E.g.  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Recretary: Enter the next participant’s name, or type end/ to finish inputting participants.`  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`User: john doe`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Recretary: Here is a list of your contacts that match ‘john doe’`  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 1. John doe, abc company \u003c/code\u003e  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 2. John doe, def company \u003c/code\u003e  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`User: 2`  "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Recretary: added John doe, def company to participants list.`  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Enter the next participant’s name, or type end/ to finish inputting participants.`  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`User: end/`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Only people in your contacts can be added as participants."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* add meeting d/2020-12-31 14:00 dur/60 t/abc company meeting l/John street, block 123, #01-01"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Listing all persons : `list`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `list \u003ccontact | meeting\u003e`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `list contact`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Shows a list of all meetings in the address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `list meeting`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "### Editing an item : `edit`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `edit \u003ccontact | meeting\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Edits an existing person in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `edit contact INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [c/COMPANY] [t/TAG] [r/COMPANY_ROLE]…`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "*  `edit contact 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Edits an existing meeting in the meeting schedule."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `edit meeting INDEX [d/DATETIME] [t/TITLE] [l/LOCATION] [p/]...`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Edit participants in a meeting with this format:  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "E.g.   "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Recretary: Here is the current list of participants.`  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 1. John doe, abc company \u003c/code\u003e  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 2. John doe, def company \u003c/code\u003e  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Enter the next participant’s index to delete, or type end/ to finish removing participants.`  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`User: 1`  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Recretary: Here is the current list of participants.`  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "\u003ccode\u003e \u0026nbsp; 1. John doe, def company \u003c/code\u003e  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`Enter the next participant’s index to delete, or type end/ to finish removing participants.`  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`User: end/`  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Edits the meeting at the specified `INDEX`. The index refers to the index number shown in the displayed meeting list. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `edit meeting 1 d/10-11-2020 14:00 l/clementi` Edits the datetime and location of the 1st meeting to be "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`10/11/2020 1400` and `clementi` respectively."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "### Locating persons by name: `find`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `find \u003ccontact | meeting\u003e`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Find contacts/ meetings whose names contain any of the given keywords."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `find meeting KEYWORD [MORE_KEYWORDS]` or"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`find contact KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `find contact John` returns `john chan` and `John Doe`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `find meeting abc def` returns `abc meeting`, `def meeting`\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person : `delete`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `delete \u003ccontact | meeting\u003e \u003cINDEX | all\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `delete \u003ccontact | meeting\u003e all`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Clears all entries from the address book/meeting schedule."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `delete \u003ccontact | meeting\u003e INDEX`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Deletes the specified person from the address book. "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: delete contact INDEX"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `delete contact 2` deletes the 2nd contact in the address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* `find contact Betsy` followed by `delete contact 1` deletes the 1st contact in the results of the `find` command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Format: `delete meeting INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Deletes the meeting at the specified `INDEX`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* The index refers to the index number shown in the displayed meeting list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* Use `list meeting` to check the index of the meeting to be deleted, followed by `delete meeting 2` to delete the 2nd meeting in the address book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "### General"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "#### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "#### Exiting the program : `exit`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "#### Saving the data"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Recretary data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "**Add** | `add_contact n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS c/COMPANY [r/COMPANY_ROLE] [t/TAG]…` \u003cbr\u003e e.g., `add_contact n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd a/XYZ Company r/manager t/friend t/colleague` \u003cbr\u003e `add meeting d/DATETIME dur/DURATION t/TITLE [l/LOCATION]` \u003cbr\u003e e.g., `add meeting d/2020-12-31 14:00 dur/60 t/abc company meeting l/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "**Delete** | `delete contact INDEX`\u003cbr\u003e e.g., `delete contact 3` \u003cbr\u003e `delete meeting INDEX`\u003cbr\u003e e.g., `delete meeting 5`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "**Edit** | `edit contact INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [c/COMPANY] [r/COMPANY_ROLE] [t/TAG]…`\u003cbr\u003e e.g.,`edit contact 2 n/James Lee e/jameslee@example.com` \u003cbr\u003e `edit meeting INDEX [d/DATETIME] [dur/DURATION] [t/TITLE] [l/LOCATION]`\u003cbr\u003e e.g.,`edit contact 1 dur/90 l/COM2 LT17`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "**Find** | `find contact KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find contact James Jake` \u003cbr\u003e `find meeting KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find meeting recretary stakeholders`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "**List** | `list contact` \u003cbr\u003e `list meeting`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 139,
      "-": 142
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "title: Recretary"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "**Recretary is a tool that helps Executive Personal Secretaries manage their day-to-day tasks and take care of their executive\u0027s busy meeting schedule. The aim is to reduce the burden and the workload of the Executive Personal Secretaries.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested in using Recretary, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* If you are interested about developing Recretary, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdithyaNarayan"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "AdithyaNarayan": 7,
      "-": 12
    }
  },
  {
    "path": "docs/team/koh-zhe-hao.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "title: Koh Zhe Hao\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 46
    }
  },
  {
    "path": "docs/team/liu-chuyue.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 46
    }
  },
  {
    "path": "docs/team/tan-xuan-zhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "title: Tan Xuan Zhi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xxzz-tt"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "xxzz-tt": 46
    }
  },
  {
    "path": "docs/team/zhao-huan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "title: Zhao Huan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhaohuanqdcn"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "zhaohuanqdcn": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_contact\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_ROLE + \"COMPANY ROLE]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY + \"KFC \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + PREFIX_COMPANY_ROLE + \"CEO\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Creates an AddContactCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddContactCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof AddContactCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddContactCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 14,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            + \"[\" + PREFIX_COMPANY_ROLE + \"COMPANY ROLE]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Company updatedCompany \u003d editPersonDescriptor.getCompany().orElse(personToEdit.getCompany());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e updatedCompanyRoles \u003d editPersonDescriptor.getCompanyRoles()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .orElse(personToEdit.getCompanyRoles());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedCompany, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                updatedCompanyRoles);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        private Set\u003cCompanyRole\u003e companyRoles;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            setCompanyRoles(toCopy.companyRoles);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, company, address, tags, companyRoles);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public void setCompanyRoles(Set\u003cCompanyRole\u003e companyRoles) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.companyRoles \u003d (companyRoles !\u003d null) ? new HashSet\u003c\u003e(companyRoles) : null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        public Optional\u003cSet\u003cCompanyRole\u003e\u003e getCompanyRoles() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return (companyRoles !\u003d null) ? Optional.of(Collections.unmodifiableSet(companyRoles)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    \u0026\u0026 getCompanyRoles().equals(e.getCompanyRoles());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 37,
      "-": 222
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddContactCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Parses input arguments and creates a new AddContactCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandParser implements Parser\u003cAddContactCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddContactCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * and returns an AddContactCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public AddContactCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_COMPANY,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_COMPANY, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e companyRoleList \u003d ParserUtil.parseCompanyRoles(argMultimap.getAllValues(PREFIX_COMPANY_ROLE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person person \u003d new Person(name, phone, email, company, address, tagList, companyRoleList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new AddContactCommand(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 18,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        case AddContactCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return new AddContactCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 4,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final Prefix PREFIX_COMPANY_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        PREFIX_COMPANY, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            editPersonDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        parseCompanyRolesForEdit(argMultimap.getAllValues(PREFIX_COMPANY_ROLE))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .ifPresent(editPersonDescriptor::setCompanyRoles);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Optional\u003cSet\u003cCompanyRole\u003e\u003e parseCompanyRolesForEdit(Collection\u003cString\u003e companyRoles) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assert companyRoles !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (companyRoles.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Collection\u003cString\u003e companyRoleSet \u003d companyRoles.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyRoles.contains(\"\") ? Collections.emptySet() : companyRoles;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Optional.of(ParserUtil.parseCompanyRoles(companyRoleSet));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 23,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses a {@code String company} into an {@code Company}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws ParseException if the given {@code String company} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses a {@code String companyRole} into a {@code CompanyRole}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws ParseException if the given {@code companyRole} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static CompanyRole parseCompanyRole(String companyRole) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRole);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String trimmedCompanyRole \u003d companyRole.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!CompanyRole.isValidCompanyRoleName(trimmedCompanyRole)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new ParseException(CompanyRole.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CompanyRole(trimmedCompanyRole);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e companyRoles} into a {@code Set\u003cCompanyRole\u003e}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Set\u003cCompanyRole\u003e parseCompanyRoles(Collection\u003cString\u003e companyRoles) throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRoles);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Set\u003cCompanyRole\u003e companyRoleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        for (String companyRoleName : companyRoles) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            companyRoleSet.add(parseCompanyRole(companyRoleName));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleSet;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 45,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantee: immutable"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The date and time should be of the format dd/mm/yy hhmm. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            + \"For example, 12/3/20 1545\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private static DateTimeFormatter dateInputFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private static DateTimeFormatter dateOutputFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy h.mma\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final LocalDateTime value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs an {@code DateTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        value \u003d dateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static DateTimeFormatter getDateInputFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateInputFormat;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static DateTimeFormatter getDateOutputFormat() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateOutputFormat;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.format(dateOutputFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s duration."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(long)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long MAX_MINUTES \u003d 59;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Number of minutes should not be more than \" + MAX_MINUTES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final long hours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final long minutes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Duration}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param hours The number of hours."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param minutes The number of minutes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Duration(long hours, long minutes) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(hours, minutes);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidDuration(minutes), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.hours \u003d hours;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.minutes \u003d minutes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given number of minutes is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidDuration(long minutes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return minutes \u003c\u003d MAX_MINUTES;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String temp \u003d hours + \"hours\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (minutes \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return temp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return temp + \" \" + minutes + \"minutes\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 hours \u003d\u003d ((Duration) other).hours \u0026\u0026 minutes \u003d\u003d ((Duration) other).minutes); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Objects.hash(hours, minutes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s location."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final Set\u003cPerson\u003e participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Create Meeting with Location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Meeting(Title title, Duration duration, DateTime dateTime, Location location, Set\u003cPerson\u003e participants) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(title, duration, dateTime, location, participants);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Create Meeting without Location."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Meeting(Title title, Duration duration, DateTime dateTime, Set\u003cPerson\u003e participants) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(title, duration, dateTime, participants);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns an immutable person set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Set\u003cPerson\u003e getParticipants() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Collections.unmodifiableSet(participants);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if both meetings of the same title have at least one other identity field that is the same."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * This defines a weaker notion of equality between two meetings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean isSameMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 (otherMeeting.getDateTime().equals(getDateTime()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if both meetings have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * This defines a stronger notion of equality between two meetings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getDuration().equals(getDuration())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 otherMeeting.getParticipants().equals(getParticipants());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Objects.hash(title, dateTime, duration, location, participants);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Date and Time: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getDateTime())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .append(\" Participants: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        getParticipants().forEach(builder::append);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Represents a Meeting\u0027s title."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            \"Titles can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * @param title A valid Title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Tests that a {@code Meetings}\u0027s {@code Title} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean test(Meeting meeting) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(meeting.getTitle().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A list of meetings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * As such, adding and updating of meetings uses Meeting#isSameMeeting(Meeting) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the meeting being added or updated is unique in terms of identity in the UniqueMeetingList. However,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the removal of a meeting uses Meeting#equals(Object) so as to ensure that the meeting with exactly"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * @see Meeting#isSameMeeting(Meeting)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Signals that the operation will result in duplicate Meetings (Meetings are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        super(\"Operation would result in duplicate meetings\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Company.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class Company {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company name should  not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public final String companyName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Company(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        checkArgument(isValidCompany(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        companyName \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return test.trim().length() \u003e 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyName.equals(((Company) other).companyName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final Set\u003cCompanyRole\u003e companyRoles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Company company, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                  Set\u003cCompanyRole\u003e companyRoles) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireAllNonNull(name, phone, email, company, address, tags, companyRoles);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoles.addAll(companyRoles);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns an immutable company role set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public Set\u003cCompanyRole\u003e getCompanyRoles() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Collections.unmodifiableSet(companyRoles);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 otherPerson.getCompanyRoles().equals(getCompanyRoles());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, company, companyRoles);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .append(\" Company: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .append(getCompany())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        builder.append(\" Company roles: \");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        getCompanyRoles().forEach(builder::append);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 28,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/role/CompanyRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.role;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCompanyRoleName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class CompanyRole {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company role names should be alphabetic\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public final String companyRoleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code CompanyRole}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @param companyRoleName A valid company role name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CompanyRole (String companyRoleName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        requireNonNull(companyRoleName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        checkArgument(isValidCompanyRoleName(companyRoleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoleName \u003d companyRoleName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static boolean isValidCompanyRoleName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                || (other instanceof CompanyRole // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                \u0026\u0026 companyRoleName.equals(((CompanyRole) other).companyRoleName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return \u0027[\u0027 + companyRoleName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"KFC\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"friends\"), getCompanyRoleSet(\"CEO\", \"Boss\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"KFC\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), getCompanyRoleSet(\"CTO\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"NUS\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"neighbours\"), getCompanyRoleSet(\"worker\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"NTU\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"family\"), getCompanyRoleSet(\"cleaner\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"SMU\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"classmates\"), getCompanyRoleSet(\"contractor\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new Company(\"McDonald\u0027s\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                getTagSet(\"colleagues\"), getCompanyRoleSet(\"secretary\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static Set\u003cCompanyRole\u003e getCompanyRoleSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .map(CompanyRole::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Returns a persons set containing the list of persons given."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static Set\u003cPerson\u003e getParticipantSet(Person... persons) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return Arrays.stream(persons)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 22,
      "ramenmen": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCompanyRole.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Jackson-friendly version of {@link CompanyRole}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "class JsonAdaptedCompanyRole {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String companyRoleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompanyRole} with the given {@code companyRoleName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public JsonAdaptedCompanyRole(String companyRoleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.companyRoleName \u003d companyRoleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts a given {@code CompanyRole} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public JsonAdaptedCompanyRole(CompanyRole source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        companyRoleName \u003d source.companyRoleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return companyRoleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Converts this Jackson-friendly adapted companyRole object into the model\u0027s {@code CompanyRole} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted companyRole."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public CompanyRole toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!CompanyRole.isValidCompanyRoleName(companyRoleName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(CompanyRole.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new CompanyRole(companyRoleName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private final List\u003cJsonAdaptedCompanyRole\u003e roles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"company\") String company,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                    @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                                     @JsonProperty(\"roles\") List\u003cJsonAdaptedCompanyRole\u003e roles) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (roles !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            this.roles.addAll(roles);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d source.getCompany().companyName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles.addAll(source.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .map(JsonAdaptedCompanyRole::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final List\u003cCompanyRole\u003e personCompanyRoles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        for (JsonAdaptedCompanyRole role : roles) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            personCompanyRoles.add(role.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        final Set\u003cCompanyRole\u003e modelRoles \u003d new HashSet\u003c\u003e(personCompanyRoles);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelCompany, modelAddress, modelTags, modelRoles);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 31,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private FlowPane roles;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company.setText(person.getCompany().companyName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        person.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .sorted(Comparator.comparing(companyRole -\u003e companyRole.companyRoleName))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .forEach(companyRole -\u003e roles.getChildren().add(new Label(companyRole.companyRoleName)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"roles\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "      \u003cLabel fx:id\u003d\"company\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$company\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String addCommand \u003d AddContactCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().withRoles().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddContactCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandSuccess(new AddContactCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertCommandFailure(new AddContactCommand(personInList), model, AddContactCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddContactCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddContactCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        CommandResult commandResult \u003d new AddContactCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(String.format(AddContactCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addContactCommand \u003d new AddContactCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(CommandException.class, AddContactCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addContactCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addAliceCommand \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addBobCommand \u003d new AddContactCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand addAliceCommandCopy \u003d new AddContactCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 10,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALID_COMPANY_AMY \u003d \"KFC\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String VALID_COMPANY_BOB \u003d \"MCD\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_TITLE_DISCUSSION \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_TITLE_ROUNDTABLE \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Duration VALID_DURATION_DISCUSSION \u003d new Duration(1, 20);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Duration VALID_DURATION_ROUNDTABLE \u003d new Duration(2, 20);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final LocalDateTime VALID_DATETIME_DISCUSSION \u003d LocalDateTime.parse(\"12/2/12 1201\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yy HHmm\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final LocalDateTime VALID_DATETIME_ROUNDTABLE \u003d LocalDateTime.parse(\"12/2/12 1101\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/yy HHmm\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_LOCATION_DISCUSSION \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String VALID_LOCATION_ROUNDTABLE \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Person VALID_PARTICIPANT_ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Person VALID_PARTICIPANT_BOB \u003d new PersonBuilder().withName(\"Bob Pauline\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"\"; // cannot be empty"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 9,
      "ramenmen": 22,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // different company -\u003e return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 5,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddContactCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class AddContactCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private AddContactCommandParser parser \u003d new AddContactCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + COMPANY_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        new AddContactCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + ADDRESS_DESC_BOB + COMPANY_DESC_BOB, new AddContactCommand(expectedPerson));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + INVALID_COMPANY_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + COMPANY_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                + ADDRESS_DESC_BOB + COMPANY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 35,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        AddContactCommand command \u003d (AddContactCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertEquals(new AddContactCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 3,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidDuration_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        long invalidDuration \u003d Duration.MAX_MINUTES + 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(0, invalidDuration));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidDuration() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid minutes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Duration.isValidDuration(Duration.MAX_MINUTES + 1)); // minutes is more than the max minutes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid minutes - less than or equal to max minutes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(29));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Duration.isValidDuration(Duration.MAX_MINUTES));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // long location"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/MeetingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATETIME_ROUNDTABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPANT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE_ROUNDTABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.ROUNDTABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting meeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e meeting.getParticipants().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.isSameMeeting(DISCUSSION));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDateTime(VALID_DATETIME_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withTitle(VALID_TITLE_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same title, same dateTime, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDuration(VALID_DURATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.isSameMeeting(editedDiscussion));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting discussionCopy \u003d new MeetingBuilder(DISCUSSION).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.equals(discussionCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(DISCUSSION.equals(DISCUSSION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(ROUNDTABLE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withTitle(VALID_TITLE_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDuration(VALID_DURATION_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withDateTime(VALID_DATETIME_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different participants -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withParticipants(VALID_PARTICIPANT_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(DISCUSSION.equals(editedDiscussion));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/TitleContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                new TitleContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // Keywords match location, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(predicate.test(new MeetingBuilder().withTitle(\"Alice\").withLocation(\"Main Street\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/TitleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"discussion*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"discuss project\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2nd project meeting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Meet David\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(Title.isValidTitle(\"second project meeting for computing project work module\")); // long title"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ROUNDTABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPANT_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.DISCUSSION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.ROUNDTABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class UniqueMeetingListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertFalse(uniqueMeetingList.contains(DISCUSSION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(DISCUSSION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void contains_meetingWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertTrue(uniqueMeetingList.contains(editedDiscussion));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void add_duplicateMeeting_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(DISCUSSION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_nullTargetMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, DISCUSSION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_nullEditedMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_targetMeetingNotInList_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, DISCUSSION));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingIsSameMeeting_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, DISCUSSION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        Meeting editedDiscussion \u003d new MeetingBuilder(DISCUSSION).withLocation(VALID_LOCATION_ROUNDTABLE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "                .withParticipants(VALID_PARTICIPANT_ALICE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, editedDiscussion);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(editedDiscussion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeeting(DISCUSSION, ROUNDTABLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeeting_editedMeetingHasNonUniqueIdentity_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(DISCUSSION, ROUNDTABLE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_meetingDoesNotExist_throwsMeetingNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(DISCUSSION));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void remove_existingMeeting_removesMeeting() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.remove(DISCUSSION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_nullUniqueMeetingList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvidedUniqueMeetingList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeetings(expectedUniqueMeetingList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.add(DISCUSSION);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cMeeting\u003e meetingList \u003d Collections.singletonList(ROUNDTABLE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        uniqueMeetingList.setMeetings(meetingList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        UniqueMeetingList expectedUniqueMeetingList \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        expectedUniqueMeetingList.add(ROUNDTABLE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertEquals(expectedUniqueMeetingList, uniqueMeetingList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void setMeetings_listWithDuplicateMeetings_throwsDuplicateMeetingException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        List\u003cMeeting\u003e listWithDuplicateMeetings \u003d Arrays.asList(DISCUSSION, DISCUSSION);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicateMeetings));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            -\u003e uniqueMeetingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/model/role/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "package seedu.address.model.role;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "public class RoleTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CompanyRole(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String invalidRoleName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CompanyRole(invalidRoleName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CompanyRole.isValidCompanyRoleName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String INVALID_COMPANY_ROLE \u003d \"123\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final String VALID_COMPANY \u003d BENSON.getCompany().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private static final List\u003cJsonAdaptedCompanyRole\u003e VALID_ROLES \u003d BENSON.getCompanyRoles().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .map(JsonAdaptedCompanyRole::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_COMPANY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                null, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_nullCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                VALID_ADDRESS, VALID_TAGS, VALID_ROLES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        invalidTags, VALID_ROLES);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public void toModelType_invalidCompanyRoles_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        List\u003cJsonAdaptedCompanyRole\u003e invalidRoles \u003d new ArrayList\u003c\u003e(VALID_ROLES);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        invalidRoles.add(new JsonAdaptedCompanyRole(INVALID_COMPANY_ROLE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_COMPANY, VALID_ADDRESS,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                        VALID_TAGS, invalidRoles);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 46,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompany(person.getCompany());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompanyRoles(person.getCompanyRoles());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sets the {@code Company} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditPersonDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cCompanyRole\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public EditPersonDescriptorBuilder withCompanyRoles(String... roles) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        Set\u003cCompanyRole\u003e roleSet \u003d Stream.of(roles).map(CompanyRole::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.setCompanyRoles(roleSet);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 22,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A utility class to help with building Meeting objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long DEFAULT_HOURS \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final long DEFAULT_MINUTES \u003d 30;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final LocalDateTime DEFAULT_DATETIME \u003d LocalDateTime"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .parse(\"12/2/12 1201\", DateTime.getDateInputFormat());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private Set\u003cPerson\u003e participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Creates a {@code MeetingBuilder} with the default details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        duration \u003d new Duration(DEFAULT_HOURS, DEFAULT_MINUTES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        participants \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Initializes the MeetingBuilder with the data of {@code meetingToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        title \u003d meetingToCopy.getTitle();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        duration \u003d meetingToCopy.getDuration();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        dateTime \u003d meetingToCopy.getDateTime();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        location \u003d meetingToCopy.getLocation();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        participants \u003d new HashSet\u003c\u003e(meetingToCopy.getParticipants());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Title} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Parses the {@code participants} into a {@code Set\u003cTag\u003e} and set it to the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withParticipants(Person ... participants) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.participants \u003d SampleDataUtil.getParticipantSet(participants);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Location} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withLocation(String address) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.location \u003d new Location(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code Duration} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public MeetingBuilder withDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return new Meeting(title, duration, dateTime, location, participants);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.person.Company;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    private Set\u003cCompanyRole\u003e roles;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        company \u003d personToCopy.getCompany();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        roles \u003d new HashSet\u003c\u003e(personToCopy.getCompanyRoles());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Parses the {@code roles} into a {@code Set\u003cCompanyRole\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public PersonBuilder withRoles(String ... roles) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.roles \u003d SampleDataUtil.getCompanyRoleSet(roles);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     * Sets the {@code Company} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    public PersonBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return new Person(name, phone, email, company, address, tags, roles);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 26,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY_ROLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import seedu.address.model.role.CompanyRole;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        return AddContactCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        sb.append(PREFIX_COMPANY + person.getCompany().companyName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        person.getCompanyRoles().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            s -\u003e sb.append(PREFIX_COMPANY_ROLE + s.companyRoleName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.companyName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                sb.append(PREFIX_TAG).append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        if (descriptor.getCompanyRoles().isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            Set\u003cCompanyRole\u003e roles \u003d descriptor.getCompanyRoles().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            if (roles.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                sb.append(PREFIX_COMPANY_ROLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "                roles.forEach(s -\u003e sb.append(PREFIX_COMPANY_ROLE).append(s.companyRoleName).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 19,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "import seedu.address.model.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " * A utility class containing a list of {@code Meeting} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ramenmen"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Meeting DISCUSSION \u003d new MeetingBuilder().withTitle(\"disscussion\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withLocation(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDateTime(LocalDateTime.parse(\"12/2/12 1201\", DateTime.getDateInputFormat()))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDuration(new Duration(1, 20))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withParticipants(ALICE).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static final Meeting ROUNDTABLE \u003d new MeetingBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withLocation(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDateTime(LocalDateTime.parse(\"12/1/12 1221\", DateTime.getDateInputFormat()))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withDuration(new Duration(1, 30))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "            .withParticipants(ALICE, BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    private TypicalMeetings() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ramenmen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeetings() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCUSSION, ROUNDTABLE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ramenmen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ramenmen": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(\"KFC\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withRoles(\"CEO\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(\"KFC\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withRoles(\"CEO\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withCompany(\"KFC\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withCompany(\"KFC\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"werner@example.com\").withCompany(\"KFC\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"lydia@example.com\").withCompany(\"KFC\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"anna@example.com\").withCompany(\"KFC\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withCompany(\"KFC\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withEmail(\"hans@example.com\").withCompany(\"KFC\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(VALID_COMPANY_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KOH-ZHE-HAO"
        },
        "content": "            .withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KOH-ZHE-HAO": 17,
      "-": 67
    }
  }
]
