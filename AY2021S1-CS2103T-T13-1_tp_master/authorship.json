[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This is a desktop application to generate statistics on Covid-19.\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * As an application to store Covid-19 data and compute it in various ways"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * Generate meaningful representations of Covid-19 data quickly and efficiently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The project is intended for use by healthcare officials who are required to manage large amounts of Covid-19 related data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  * It is **written in OOP fashion** and comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* It is named `VirusTracker` because it is developed to track Covid-19 statistics with the intention of being able to be extended to other pandemics."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* For the detailed documentation of this project, see the **[VirusTracker Product Website](https://ay2021s1-cs2103t-t13-1.github.io/tp/)**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "siangernlow": 9,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "About Us"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "You can reach us at the email `seer@comp.nus.edu.sg`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "### Shulong"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cimg src\u003d\"images/DreamerDragon.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/DreamerDragon)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Qirui"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cimg src\u003d\"images/hhdqirui.jpg\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/hhdqirui)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Siang Ern"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "\u003cimg src\u003d\"images/siangernlow.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](http://github.com/siangernlow)] [[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Pin Xian"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "\u003cimg src\u003d\"images/hopinxian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/hopinxian)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "[[portfolio](team/hopinxian.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Han Ming"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[[github](https://github.com/KohHanMing)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "DreamerDragon": 1,
      "siangernlow": 14,
      "-": 41
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* is a healthcare official involved in the Covid-19 pandemic"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* has a need to generate statistics based on input data of the pandemic"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Value proposition**: produce useful statistics quickly and efficiently"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "(For all user stories below, the **user** is a healthcare official, unless stated otherwise)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of people currently stored in VirusTracker|  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of locations currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user | generate a list of visits currently stored in VirusTracker|    "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user with access to visits data from SafeEntry app   | add visit data to a list | generate desired lists and track contacts with the infected cases|"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user with access to the visit list| delete all visits by date | remove all the outdated visits inside the list |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user setting up SafeEntry checkpoints | identify locations with high risk of infection | know which places need these checkpoints the most |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user publishing daily reports | generate daily statistics quickly and easily|                                                         |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user managing infected patient | update people\u0027s infection status | keep the current epidemic situation up to date |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "| `* * *`  | user managing quarantined people | update people\u0027s quarantine status | be aware of a person\u0027s quarantine status |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user managing infected people | update people\u0027s infection status | be aware of a person\u0027s infection status |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user | add location data to a list | generate information about which location needs to be disinfected |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user worried about virus outbreaks | generate locations that infected people have been to | disinfect those locations |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "| `* * *`  | user worried about virus outbreaks | generate people that have been in contact with infected people | quarantine them for safety measures |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "(For all use cases below, the **System** is the `VirusTracker` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC01 - Add a visit**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1.  User chooses to add a visit."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2.  System requests for details of the visit. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "3.  User enters the required details."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4.  System adds the new visit."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5. System displays the updated visits list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "      "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 3a. System detects error in the entered data."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a1. System prompts user for correct data."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a2. User enters new data.  "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* *a. At any time, User wishes to cancel the command."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * a1. System acknowledges and returns user to main page."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC02 - Delete visits**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User chooses to clear the visit history."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System requests for details."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. User enters the required information."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. System deletes the visits based on the information entered."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5. System displays the updated visits list.  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "   "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "      "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "       "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 3a. System detects error in the entered data."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a1. System prompts user for correct data."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 3a2. User enters new data.  "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case resumes at step 4."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "       "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* *a. At any time, User wishes to cancel the command."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * a1. System acknowledges and returns user to main page."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "         "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC03 - Add a location**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1.  User adds a location."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2.  System adds the new location."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "3.  System displays the updated locations list."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. System detects error in the entered data."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 3a1. System prompts user for correct data."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    * 3a2. User enters new data.  "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Steps 3a1-3a2 are repeated until the data entered are correct.  "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC06: View all infected people**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to list all infected people"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System shows a list of all infected people."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2b. There are no infected people."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 2b1. Go to 2a."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC8: View locations that infected people have been to**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User requests to list locations that infected people have been to."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System shows a list of locations that infected people have been to.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends.    "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**UC9: View people in contact with an infected person**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "1. User requests to list people in contact with an infected person."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "2. System shows a list of people in contact with an infected person.  "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Use case ends.   "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC10: View high-risk locations**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to list locations with high risk of infection."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System shows a list of locations with high risk.  "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**UC11: View daily statistics**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to view statistics for that day."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System shows the statistics for that day."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 2a. There is not enough information to produce statistics for that day.  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**UC12: Update infection status**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to update the infection status of a person."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System requests for details of the person to be updated."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. User enters the person\u0027s details."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. System toggles the person\u0027s infection status.  "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 4a. System is unable to find the person specified by the user.     "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 4a1. System requests for correct details of the person."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 4a2. User enters the new details.  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Steps 4a1 - 4a2 are repeated until the person specified by the user exists.  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case resumes from step 4."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* *a. At any time, user choose to cancel the update.  "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**UC13: Update quarantine status**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "1. User requests to update the quarantine status of a person."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. System requests for details of the person to be updated."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. User enters the person\u0027s details."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. System toggles the person\u0027s quarantine status."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* 4a. System is unable to find the person specified by the user.     "
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 4a1. System requests for correct details of the person."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * 4a2. User enters the new details.  "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Steps 4a1 - 4a2 are repeated until the person specified by the user exists.  "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  Use case resumes from step 4."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "  "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* *a. At any time, user choose to cancel the update.    "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    Use case ends.  "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2.  Should be able to hold up to 1000 items for each type of list without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3.  Should be able to switch between different types of data and manipulate them efficiently and quickly."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* **Visits**: A visit event occurs whenever a `Person` enters a `Location`. The `Date` of this visit is also recorded."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 49,
      "DreamerDragon": 19,
      "siangernlow": 111,
      "hhdqirui": 19,
      "-": 341
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker is a **desktop app for generating statistics for Covid-19, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker can help you generate various statistics on the pandemic quickly and easily with a few simple commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "## **Table of Contents**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Adding data: `add`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Clearing the current list: `clear`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Deleting data: `delete`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Editing data: `edit`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Finding data: `find`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Listing data: `list`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    * Viewing help: `help`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Command Summary"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "2. Download the latest `virustracker.jar` from [here](https://github.com/AY2021S1-CS2103T-T13-4/tp/releases). \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   _Note: VirusTracker is still a work-in-progress and official releases are not available yet._"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`list l/people`** : Lists all people."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a person named `John Doe` to the VirusTracker."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd element shown in the current list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "   * **`clear`** : Deletes all entries from VirusTracker."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "### Adding a person: `add`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Adds a person to VirusTracker."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS q/QUARANTINE_STATUS [t/TAG]…​`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 q/true`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 q/false t/criminal`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Listing all people :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Shows a list of all persons in VirusTracker."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/people`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Editing a person : `edit`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Edits an existing person in VirusTracker."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [q/QUARANTINE_STATUS] [t/TAG]…​`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person’s tags by typing `t/` without"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    specifying any tags after it."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Locating persons by name: `find`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case-insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` returns `john` and `John Doe`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person : `delete`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Deletes the specified person from the people list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* `list` followed by `delete 2` deletes the 2nd person in the people list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "### Clearing all entries : `clear`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Clears all entries from VirusTracker."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "VirusTracker data saves in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "### Adding a visit: "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Adds a visit by the personId, location of visit and date of visit"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Format: `add personId location date`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* The visit is added to the visits list to track close contacts, especially for the infected people"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* PersonId refers to the id stored in the people list which is available before using this app"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* location refers to the particular location the person with the personId visits"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* date refers to the particular date the person has visited the location"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "### Deleting visits by date: "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Deletes all visits before the date"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "Format: `delete date`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* Date corresponds to the dates that exist in the visits list, otherwise it will be invalid"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": "* All the visits before and including the date will be removed from the visits list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DreamerDragon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "### Adding a location: \u0027addLocation\u0027"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Adds a location to VirusTracker."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `addLocation n/NAME a/ADDRESS`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Locations have an address and a name."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Locations are identified by their name."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* No duplicate locations are allowed in the VirusTracker."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `addLocation n/Vivocity a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* `addLocation n/Betsy Crowe\u0027s House a/Newgate Prison`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "### Listing all locations visited by a person: `listAllLocationsVisited` `[coming in v1.2]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Shows a list of locations visited by a specified person in the past 2 weeks. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format: `listAllLcationsVisited INDEX`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Locations listed were visited by the person of the index given."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* The result given is a filtered list of locations that the person visited in the past 2 weeks."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* This function can be used to identify locations needing to be disinfected after being visited by an infected person."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "### Listing all people in contact with a person: `listAllPersonsInContact` `[coming in v1.2]`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Shows a list of people who have been in the same location as a person in the past 2 weeks. The purpose is to identify people who need to be quarantined for contact with an infectious person."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Format `listAllPersonsInContact PERSONID`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Persons listed were in contact with the person of the index given."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* Two people are in contact when they visit the same location on the same day."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* The result given is a filtered list of persons that the person was in contact with in the past 2 weeks."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* This function can be used to identify people needing to be quarantined after being in contact with an infected person."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "### Archiving data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain the feature here}_"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Listing high risk locations"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Lists the top ten locations with highest risk of Covid infection."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/highrisk`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Risk is treated as the number of infected people entering the location."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The list is presented in order of highest risk to lowest."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* If there are less than ten locations that are infected, all locations will"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  be shown."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "### Listing daily statistics"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Shows the general overview of statistics related to Covid-19 for the day."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "Format: `list l/stats`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* Statistics include high risk locations, number of infection cases, number of people"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "  currently infected, and more."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* The statistics generated by this command provides a brief summary of the pandemic. You may view a specific aspect"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "of the stats in more detail by using the other `list` commands above."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS q/QUARANTINE_STATUS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [q/QUARANTINE_STATUS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**List** | `list l/KEYWORD` \u003cbr\u003e e.g., `list l/people`, `list l/stats`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "**addLocation** | `addLocation n/Vivocity a/John street, block 123, #01-01`"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 41,
      "DreamerDragon": 20,
      "siangernlow": 58,
      "-": 147
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "title: VirusTracker"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T13-1/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T13-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T13-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "**VirusTracker is a desktop application to generate Covid-19 related statistics.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "siangernlow": 5,
      "-": 15
    }
  },
  {
    "path": "docs/team/hopinxian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "title: Ho Pin Xian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "## Project: VirusTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **New Feature**: Added the ability to add locations to VirusTracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  * Justification: This feature allows users to add locations to the VirusTracker. Visits depends on locations. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **New Feature**: Added a quarantine status property to Persons within the VirusTracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " "
      }
    ],
    "authorContributionMap": {
      "hopinxian": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonLocationBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.LocationBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookStorage locationBookStorage \u003d new JsonLocationBookStorage(userPrefs.getLocationBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, locationBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyAddressBook initialPersonData;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cReadOnlyLocationBook\u003e locationBookOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook initialLocationData;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialPersonData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationBookOptional \u003d storage.readLocationBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (!locationBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample LocationBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d locationBookOptional.orElseGet(SampleDataUtil::getSampleLocationBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty LocationBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d new LocationBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty LocationBook\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            initialLocationData \u003d new LocationBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new ModelManager(initialPersonData, initialLocationData, userPrefs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 28,
      "-": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the LocationBook."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see seedu.address.model.Model#getLocationBook()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyLocationBook getLocationBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 location book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 13,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            storage.saveLocationBook(model.getLocationBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getLocationBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return model.getLocationBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 12,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \" QUARANTINE_STATUS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PREFIX_INFECTION + \"INFECTION STATUS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \"false \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + PREFIX_INFECTION + \"true \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "siangernlow": 3,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddLocationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Adds a location to the virus tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addLocation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a location to the virus tracker. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_NAME + \"School of Computing \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_ADDRESS + \"NUS School of Computing COM1 13 Computing Dr, 117417 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Add location command not implemented yet\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New location added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"This location already exists in the virus tracker.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Location toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates an AddLocationCommand to add the specified {@code Location}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddLocationCommand(Location location) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        toAdd \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (model.hasLocation(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model.addLocation(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof AddLocationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddLocationCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + \"[\" + PREFIX_QUARANTINE_STATUS + \"QUARANTINE STATUS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"[\" + PREFIX_INFECTION + \"INFECTION STATUS] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus updatedQuarantineStatus \u003d editPersonDescriptor.getQuarantineStatus()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .orElse(personToEdit.getQuarantineStatus());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        InfectionStatus updatedInfectionStatus \u003d editPersonDescriptor.getInfectionStatus()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                                            .orElse(personToEdit.getInfectionStatus());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                updatedQuarantineStatus, updatedInfectionStatus, updatedTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        private InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            setQuarantineStatus(toCopy.quarantineStatus);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            setInfectionStatus(toCopy.infectionStatus);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setQuarantineStatus(QuarantineStatus quarantineStatus) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Optional\u003cQuarantineStatus\u003e getQuarantineStatus() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.ofNullable(quarantineStatus);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public void setInfectionStatus(InfectionStatus infectionStatus) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        public Optional\u003cInfectionStatus\u003e getInfectionStatus() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return Optional.ofNullable(infectionStatus);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    \u0026\u0026 getQuarantineStatus().equals(e.getQuarantineStatus())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    \u0026\u0026 getInfectionStatus().equals(e.getInfectionStatus())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 18,
      "siangernlow": 16,
      "-": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INFECTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_QUARANTINED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.parser.ListType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Displays a list which items are the given list type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \": Lists information based on a given type.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \"Parameters: l/LIST_TYPE (must be either people, locations, visits,\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            + \" infected or quarantined)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" people\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_PEOPLE \u003d \"Listed all people\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_LOCATIONS \u003d \"Listed all locations\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_VISITS \u003d \"Listed all visits\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_INFECTED \u003d \"Listed all infected people\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL_QUARANTINED \u003d \"Listed all quarantined people\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INVALID_LIST_TYPE \u003d \"There is no such list type.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final ListType listType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public ListCommand(ListType listType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_PEOPLE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_PEOPLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_LOCATIONS:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_LOCATIONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        case ALL_VISITS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_VISITS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case ALL_INFECTED:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_INFECTED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case ALL_QUARANTINED:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new CommandException(INVALID_LIST_TYPE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof ListCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 listType.equals(((ListCommand) other).listType)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siangernlow": 27,
      "hhdqirui": 10,
      "-": 21,
      "KohHanMing": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatus \u003d ParserUtil.parseQuarantineStatus("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                argMultimap.getValue(PREFIX_QUARANTINE_STATUS).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        InfectionStatus infectionStatus \u003d ParserUtil.parseInfectionStatus("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                argMultimap.getValue(PREFIX_INFECTION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, quarantineStatus, infectionStatus, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "siangernlow": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddLocationCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.AddLocationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Parses input arguments and creates a new AddLocationCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandParser implements Parser\u003cAddLocationCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLocationCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and returns an AddLocationCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public AddLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d new Location(name, address);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new AddLocationCommand(location);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.AddLocationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        case AddLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new AddLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "-": 75,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Prefix PREFIX_QUARANTINE_STATUS \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Prefix PREFIX_INFECTION \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final Prefix PREFIX_LIST \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "siangernlow": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        PREFIX_QUARANTINE_STATUS, PREFIX_INFECTION, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUARANTINE_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            editPersonDescriptor.setQuarantineStatus(ParserUtil.parseQuarantineStatus("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    argMultimap.getValue(PREFIX_QUARANTINE_STATUS).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INFECTION).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            editPersonDescriptor.setInfectionStatus("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    ParserUtil.parseInfectionStatus(argMultimap.getValue(PREFIX_INFECTION).get())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7,
      "siangernlow": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isEmpty() || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType listType \u003d ParserUtil.parseListType(argMultimap.getValue(PREFIX_LIST).get());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new ListCommand(listType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 26,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public enum ListType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    ALL_PEOPLE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    ALL_LOCATIONS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    ALL_VISITS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    ALL_INFECTED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    ALL_QUARANTINED"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 1,
      "hhdqirui": 2,
      "KohHanMing": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Parses a {@code String quarantineStatus} into a {@code QuarantineStatus}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws ParseException if the given {@code quarantineStatus} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static QuarantineStatus parseQuarantineStatus(String quarantineStatus) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(quarantineStatus);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String trimmedQuarantineStatus \u003d quarantineStatus.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!QuarantineStatus.isValidQuarantineStatus(trimmedQuarantineStatus)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new ParseException(QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new QuarantineStatus(trimmedQuarantineStatus);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses a {@code String infectionStatus} into an {@code InfectionStatus}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @throws ParseException if the given {@code infectionStatus} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static InfectionStatus parseInfectionStatus(String infectionStatus) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(infectionStatus);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String trimmedInfectionStatus \u003d infectionStatus.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!InfectionStatus.isValidInfectionStatus(trimmedInfectionStatus)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return new InfectionStatus(trimmedInfectionStatus);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Parses the given {@code listType} and returns the enum representing it."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param listType The type of list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return The enum representing the {@code listType}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @throws ParseException When invalid type is given"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static ListType parseListType(String listType) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        requireNonNull(listType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String trimmedListType \u003d listType.trim().toLowerCase();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        switch (trimmedListType) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"people\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"locations\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        case \"visits\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            return ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case \"infected\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        case \"quarantined\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "            return ListType.ALL_QUARANTINED;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "siangernlow": 29,
      "hhdqirui": 4,
      "-": 124,
      "KohHanMing": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Represents a Location which a Person can Visit."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return !test.isEmpty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 6,
      "KohHanMing": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.UniqueLocationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Wraps all data at the location-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Duplicates are not allowed (by .isSameLocation comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBook implements ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final UniqueLocationList locations;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a LocationBook using the Locations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook(ReadOnlyLocationBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the contents of the location list with {@code locations}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locations.setLocations(locations);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Resets the existing data of this {@code LocationBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData(ReadOnlyLocationBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        setLocations(newData.getLocationList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// location-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the location book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.contains(location);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a location to the location book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must not already exist in the location book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addLocation(Location l) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.add(l);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the given location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the location book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * location in the location book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(editedLocation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.setLocation(target, editedLocation);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Removes {@code key} from this {@code LocationBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code key} must exist in the location book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void removeLocation(Location key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.asUnmodifiableObservableList().size() + \" locations\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof LocationBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locations.equals(((LocationBook) other).locations));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locations.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_INFECTED \u003d person -\u003e person.getInfectionStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_QUARANTINED \u003d person -\u003e person.getQuarantineStatus().getStatusAsBoolean();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if a location with the same identity as {@code location} exists in the virus tracker."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    boolean hasLocation(Location location);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setLocationBookFilePath(Path locationBookFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void setLocationBook(ReadOnlyLocationBook locationBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ReadOnlyLocationBook getLocationBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds the given location."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code location} must not already exist in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void addLocation(Location location);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 30,
      "hhdqirui": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final LocationBook locationBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "    private final FilteredList\u003cLocation\u003e filteredLocations;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyLocationBook locationBook,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(addressBook, locationBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + \" and location book: \" + locationBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook \u003d new LocationBook(locationBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        filteredLocations \u003d new FilteredList\u003c\u003e(this.locationBook.getLocationList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this(new AddressBook(), new LocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return userPrefs.getLocationBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBookFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userPrefs.setLocationBookFilePath(locationBookFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBook(ReadOnlyLocationBook locationBook) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook.resetData(locationBook);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook.hasLocation(location);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void addLocation(Location location) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(location);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS); // needs to be updated to persons when doing list command"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locationBook.equals(other.locationBook)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 46,
      "-": 147,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Unmodifiable view of a location book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an unmodifiable view of the locations list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This list will not contain any duplicate locations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    ObservableList\u003cLocation\u003e getLocationList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path locationBookFilePath \u003d Paths.get(\"data\", \"locationbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        setLocationBookFilePath(newUserPrefs.getLocationBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBookFilePath \u003d locationBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 locationBookFilePath.equals(o.locationBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, locationBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(\"\\nLocal person data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(\"\\nLocal location data file location : \" + locationBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a Location in the location book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location(Name name, Address address) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(name, address);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if both locations have the same name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This defines a weaker notion of equality between two locations."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean isSameLocation(Location otherLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (otherLocation \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return otherLocation !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getName().equals(getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if both locations have the same identity and data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * This defines a stronger notion of equality between two locations."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!(other instanceof Location)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location otherLocation \u003d (Location) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return otherLocation.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherLocation.getAddress().equals(getAddress());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Objects.hash(name, address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(getAddress());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/UniqueLocationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A list of locations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A location is considered unique by comparing using {@code Location#isSameLocation(Location)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * updating of locations uses Location#isSameLocation(Location) for equality so as to ensure that the location being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueLocationList. However, the removal of a location uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Location#equals(Object) so as to ensure that the location with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * @see Location#isSameLocation(Location)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class UniqueLocationList implements Iterable\u003cLocation\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final ObservableList\u003cLocation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if the list contains an equivalent location as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean contains(Location toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameLocation);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a location to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add(Location toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the location {@code target} in the list with {@code editedLocation}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location identity of {@code editedLocation} must not be the same as another existing location in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation(Location target, Location editedLocation) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(target, editedLocation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!target.isSameLocation(editedLocation) \u0026\u0026 contains(editedLocation)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.set(index, editedLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Removes the equivalent location from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * The location must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove(Location toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new LocationNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(UniqueLocationList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Replaces the contents of this list with {@code locations}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * {@code locations} must not contain duplicate locations."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(locations);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!locationsAreUnique(locations)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DuplicateLocationException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        internalList.setAll(locations);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public ObservableList\u003cLocation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Iterator\u003cLocation\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof UniqueLocationList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLocationList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns true if {@code locations} contains only unique locations."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private boolean locationsAreUnique(List\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (int i \u003d 0; i \u003c locations.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c locations.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                if (locations.get(i).isSameLocation(locations.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/DuplicateLocationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation will result in duplicate Locations (Locations are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class DuplicateLocationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public DuplicateLocationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        super(\"Operation would result in duplicate locations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/location/exceptions/LocationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Signals that the operation is unable to find the specified location."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/InfectionStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Represents a Person\u0027s infection status in the tracker."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " * Guarantees: is valid as declared in {@link #isValidInfectionStatus(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfectionStatus {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The infection status of a person can only be true or false.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * The infection status can only be specified as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * true or false, case-insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)(true|false)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private boolean isInfected;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Constructs an {@code InfectionStatus}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param infectionStatus A valid infection status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        requireNonNull(infectionStatus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        checkArgument(isValidInfectionStatus(infectionStatus), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        isInfected \u003d Boolean.parseBoolean(infectionStatus);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns true if a given string is a valid infection status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static boolean isValidInfectionStatus(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return Pattern.matches(VALIDATION_REGEX, test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns the boolean format of the infection status"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * @return a boolean indicating whether the person is infected or not"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean getStatusAsBoolean() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return isInfected;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Returns the String format of the infection status"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return A String either containing true or false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String getStatusAsString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.valueOf(isInfected);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return String.valueOf(isInfected);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                || (other instanceof InfectionStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 isInfected \u003d\u003d ((InfectionStatus) other).isInfected); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return Boolean.valueOf(isInfected).hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 68,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, QuarantineStatus quarantineStatus,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                  InfectionStatus infectionStatus, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireAllNonNull(name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public QuarantineStatus getQuarantineStatus() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return quarantineStatus;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public InfectionStatus getInfectionStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return infectionStatus;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 otherPerson.getQuarantineStatus().equals(getQuarantineStatus())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                \u0026\u0026 otherPerson.getInfectionStatus().equals(getInfectionStatus())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return Objects.hash(name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(\" Quarantine Status: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .append(getQuarantineStatus())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .append(\" Infected: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .append(getInfectionStatus())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 13,
      "siangernlow": 9,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/QuarantineStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a Person\u0027s quarantine status in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuarantineStatus(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class QuarantineStatus {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            \"Quarantine status should either be true or false, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code QuarantineStatus}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param quarantineStatus A valid quarantine status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public QuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(quarantineStatus);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        checkArgument(isValidQuarantineStatus(quarantineStatus), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        value \u003d quarantineStatus.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns if a given string is a valid quarantine status."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static boolean isValidQuarantineStatus(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return test.toLowerCase().equals(\"true\") || test.toLowerCase().equals(\"false\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * Returns the quarantine status in format of boolean"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     * @return the boolean format of quarantine status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public boolean getStatusAsBoolean() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        return value.equals(\"true\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                || (other instanceof QuarantineStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                \u0026\u0026 value.equals(((QuarantineStatus) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 51,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} and {@code LocationBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new QuarantineStatus(\"true\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"false\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new QuarantineStatus(\"true\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"false\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new QuarantineStatus(\"false\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"false\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new QuarantineStatus(\"false\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"true\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new QuarantineStatus(\"false\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"true\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new QuarantineStatus(\"false\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new InfectionStatus(\"true\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static Location[] getSampleLocations() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Name(\"School of Computing\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"NUS School of Computing COM1 13 Computing Dr, 117417\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new Location(new Name(\"VivoCity\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    new Address(\"1 HarbourFront Walk, Singapore 098585\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static ReadOnlyLocationBook getSampleLocationBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook sampleLb \u003d new LocationBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location sampleLocation : getSampleLocations()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            sampleLb.addLocation(sampleLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return sampleLb;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 31,
      "siangernlow": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLocation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Jackson-friendly version of {@link Location}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonAdaptedLocation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Location\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code JsonAdaptedLocation} with the given location details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonAdaptedLocation(@JsonProperty(\"name\") String name, @JsonProperty(\"address\") String address) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts a given {@code Location} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonAdaptedLocation(Location source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts this Jackson-friendly adapted location object into the model\u0027s {@code Location} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted location."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location(modelName, modelAddress);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final String quarantineStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private final String infectionStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            @JsonProperty(\"quarantineStatus\") String quarantineStatus,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            @JsonProperty(\"infectionStatus\") String infectionStatus,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.quarantineStatus \u003d quarantineStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infectionStatus \u003d infectionStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d source.getQuarantineStatus().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d source.getInfectionStatus().getStatusAsString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (quarantineStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, QuarantineStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!QuarantineStatus.isValidQuarantineStatus(quarantineStatus)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new IllegalValueException(QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final QuarantineStatus modelQuarantineStatus \u003d new QuarantineStatus(quarantineStatus);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (infectionStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InfectionStatus.class.getSimpleName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        if (!InfectionStatus.isValidInfectionStatus(infectionStatus)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            throw new IllegalValueException(InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        final InfectionStatus modelInfectionStatus \u003d new InfectionStatus(infectionStatus);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelQuarantineStatus,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                modelInfectionStatus, modelTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 16,
      "siangernlow": 15,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLocationBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A class to access LocationBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonLocationBookStorage implements LocationBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLocationBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonLocationBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return readLocationBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Similar to {@link #readLocationBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Optional\u003cJsonSerializableLocationBook\u003e jsonLocationBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                filePath, JsonSerializableLocationBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        if (!jsonLocationBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return Optional.of(jsonLocationBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveLocationBook(locationBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Similar to {@link #saveLocationBook(ReadOnlyLocationBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(locationBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLocationBook(locationBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLocationBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * An Immutable LocationBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "@JsonRootName(value \u003d \"locationbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "class JsonSerializableLocationBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LOCATION \u003d \"Locations list contains duplicate location(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final List\u003cJsonAdaptedLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given locations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializableLocationBook(@JsonProperty(\"locations\") List\u003cJsonAdaptedLocation\u003e locations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locations.addAll(locations);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts a given {@code ReadOnlyLocationBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLocationBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public JsonSerializableLocationBook(ReadOnlyLocationBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locations.addAll(source.getLocationList().stream().map(JsonAdaptedLocation::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Converts this location book into the model\u0027s {@code LocationBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (JsonAdaptedLocation jsonAdaptedLocation : locations) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            Location location \u003d jsonAdaptedLocation.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            if (locationBook.hasLocation(location)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LOCATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationBook.addLocation(location);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LocationBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Represents a storage for {@link seedu.address.model.LocationBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface LocationBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns LocationBook data as a {@link ReadOnlyLocationBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see #getLocationBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves the given {@link ReadOnlyLocationBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @param locationBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * @see #saveLocationBook(ReadOnlyLocationBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public interface Storage extends AddressBookStorage, LocationBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Path getLocationBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private LocationBookStorage locationBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code LocationBookStorage}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, LocationBookStorage locationBookStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBookStorage \u003d locationBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LocationBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookStorage.getLocationBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return readLocationBook(locationBookStorage.getLocationBookFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Optional\u003cReadOnlyLocationBook\u003e readLocationBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBookStorage.readLocationBook(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        saveLocationBook(locationBook, locationBookStorage.getLocationBookFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBookStorage.saveLocationBook(locationBook, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 35,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Label quarantineStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private Label infectionStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus.setText(\"Quarantine Status: \" + person.getQuarantineStatus().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus.setText(\"Infected: \" + person.getInfectionStatus().getStatusAsString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "siangernlow": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "      \u003cLabel fx:id\u003d\"quarantineStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quarantineStatus\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "      \u003cLabel fx:id\u003d\"infectionStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$infectionStatus\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 1,
      "siangernlow": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.storage.JsonLocationBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonLocationBookStorage(temporaryFolder.resolve(\"locationBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, locationBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String clearCommand \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonLocationBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionLocationBook.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, locationBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + ADDRESS_DESC_AMY + QUARANTINE_STATUS_DESC_AMY + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class JsonLocationBookIoExceptionThrowingStub extends JsonLocationBookStorage {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private JsonLocationBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void saveLocationBook(ReadOnlyLocationBook locationBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 25,
      "siangernlow": 4,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setLocationBook(ReadOnlyLocationBook locationBook) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 32,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddLocationCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLocationCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_locationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelStubAcceptingLocationAdded modelStub \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommandTest.ModelStubAcceptingLocationAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location validLocation \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        CommandResult commandResult \u003d new AddLocationCommand(validLocation).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(String.format(AddLocationCommand.MESSAGE_SUCCESS, validLocation),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(Arrays.asList(validLocation), modelStub.locationsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void execute_duplicateLocation_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location validLocation \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addLocationCommand \u003d new AddLocationCommand(validLocation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommandTest.ModelStub modelStub \u003d new AddLocationCommandTest.ModelStubWithLocation(validLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(CommandException.class, AddLocationCommand.MESSAGE_DUPLICATE_LOCATION, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                addLocationCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location alice \u003d new LocationBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location bob \u003d new LocationBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addAliceCommand \u003d new AddLocationCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addBobCommand \u003d new AddLocationCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand addAliceCommandCopy \u003d new AddLocationCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public Path getLocationBookFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setLocationBookFilePath(Path locationBookFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void setLocationBook(ReadOnlyLocationBook newData) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A Model stub that contains a single location."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private class ModelStubWithLocation extends AddLocationCommandTest.ModelStub {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final Location location;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelStubWithLocation(Location location) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return this.location.isSameLocation(location);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A Model stub that always accept the location being added."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private class ModelStubAcceptingLocationAdded extends AddLocationCommandTest.ModelStub {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        final ArrayList\u003cLocation\u003e locationsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public boolean hasLocation(Location location) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return locationsAdded.stream().anyMatch(location::isSameLocation);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public void addLocation(Location location) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            locationsAdded.add(location);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ReadOnlyLocationBook getLocationBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return new LocationBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 228
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_QUARANTINE_STATUS_AMY \u003d \"true\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String VALID_QUARANTINE_STATUS_BOB \u003d \"false\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALID_INFECTION_STATUS_AMY \u003d \"false\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String VALID_INFECTION_STATUS_BOB \u003d \"true\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String QUARANTINE_STATUS_DESC_AMY \u003d \" \" + PREFIX_QUARANTINE_STATUS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String QUARANTINE_STATUS_DESC_BOB \u003d \" \" + PREFIX_QUARANTINE_STATUS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INFECTION_DESC_AMY \u003d \" \" + PREFIX_INFECTION + VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INFECTION_DESC_BOB \u003d \" \" + PREFIX_INFECTION + VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String INVALID_QUARANTINE_STATUS_DESC \u003d \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            + PREFIX_QUARANTINE_STATUS + \"quarantined\"; // only booleans allowed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String INVALID_INFECTION_DESC \u003d \" \" + PREFIX_INFECTION + \"nope\"; // only true or false allowed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).withInfectionStatus(VALID_INFECTION_STATUS_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withInfectionStatus(VALID_INFECTION_STATUS_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 12,
      "siangernlow": 6,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new LocationBook(model.getLocationBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different quarantine status -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different infection status -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 5,
      "siangernlow": 5,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KohHanMing"
        },
        "content": "import seedu.address.logic.parser.ListType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType PEOPLE_LIST \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType LOCATIONS_LIST \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType VISITS_LIST \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType INFECTED_LIST \u003d ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType QUARANTINED_LIST \u003d ListType.ALL_QUARANTINED;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getLocationBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_personsListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(PEOPLE_LIST),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_PEOPLE, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_personsListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(PEOPLE_LIST),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_PEOPLE, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_locationsList_showsSameList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(LOCATIONS_LIST),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_LOCATIONS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void execute_visitsList_showsSameList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertCommandSuccess(new ListCommand(VISITS_LIST),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_VISITS, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void execute_infectedList_showsSameList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Model expectedModel_infectd \u003d expectedModel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        expectedModel_infectd.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_INFECTED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertCommandSuccess(new ListCommand(INFECTED_LIST),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_INFECTED, expectedModel_infectd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void execute_quarantinedList_showsSameList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        Model expectedModel_quarantined \u003d expectedModel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        expectedModel_quarantined.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_QUARANTINED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertCommandSuccess(new ListCommand(QUARANTINED_LIST),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS_ALL_QUARANTINED, expectedModel_quarantined);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand listPersonsCommand \u003d new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(listPersonsCommand.equals(listPersonsCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand listPersonsCommandCopy \u003d new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(listPersonsCommand.equals(listPersonsCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand differentListCommand \u003d new ListCommand(LOCATIONS_LIST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(differentListCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(listPersonsCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 3,
      "siangernlow": 45,
      "hhdqirui": 18,
      "-": 33,
      "KohHanMing": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFECTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUARANTINE_STATUS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple quarantine statuses - last quarantine status accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + QUARANTINE_STATUS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + ADDRESS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + INFECTION_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing quarantine status prefix"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + VALID_QUARANTINE_STATUS_BOB + INFECTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // missing infection status prefix"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + VALID_INFECTION_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + VALID_QUARANTINE_STATUS_BOB + VALID_INFECTION_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_INFECTION_DESC + QUARANTINE_STATUS_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid quarantine status"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + INVALID_QUARANTINE_STATUS_DESC + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, QuarantineStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + ADDRESS_DESC_BOB + QUARANTINE_STATUS_DESC_BOB + INFECTION_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 54,
      "siangernlow": 10,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddLocationCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.AddLocationCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class AddLocationCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private AddLocationCommandParser parser \u003d new AddLocationCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location expectedLocation \u003d new LocationBuilder(BOB_LOCATION).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new AddLocationCommand(expectedLocation));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + ADDRESS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.AddLocationCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void parseCommand_addLocation() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location location \u003d new LocationBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        AddLocationCommand command \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                (AddLocationCommand) parser.parseCommand(LocationUtil.getAddLocationCommand(location));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new AddLocationCommand(location), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String commandAndPrefix \u003d ListCommand.COMMAND_WORD + \" \" + PREFIX_LIST;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"people\") instanceof ListCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"locations\") instanceof ListCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(parser.parseCommand(commandAndPrefix + \"visits\") instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 12,
      "siangernlow": 5,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFECTION_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUARANTINE_STATUS_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUARANTINE_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1 X/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUARANTINE_STATUS_DESC,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                QuarantineStatus.MESSAGE_CONSTRAINTS); // invalid quarantine status"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INFECTION_DESC, InfectionStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        + VALID_PHONE_AMY + VALID_INFECTION_STATUS_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + QUARANTINE_STATUS_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).withInfectionStatus(VALID_INFECTION_STATUS_AMY)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // quarantine status"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUARANTINE_STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // infection status"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INFECTION_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withInfectionStatus(VALID_INFECTION_STATUS_AMY).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + TAG_DESC_HUSBAND + INFECTION_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                + INFECTION_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                + QUARANTINE_STATUS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 25,
      "siangernlow": 20,
      "-": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType LOCATIONS_LIST \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType PEOPLE_LIST \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final ListType VISITS_LIST \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    private static final ListType INFECTED_LIST \u003d ListType.ALL_INFECTED;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_people() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"people\", expectedListCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_locations() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(LOCATIONS_LIST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"locations\", expectedListCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_visits() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(VISITS_LIST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"visits\", expectedListCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    public void parseListType_infected() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "                new ListCommand(INFECTED_LIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"infected\", expectedListCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hhdqirui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_prefixMissing_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseFailure(parser, \" people\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parse_validArgs_returnsListCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListCommand expectedListCommand \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                new ListCommand(PEOPLE_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"        people    \", expectedListCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // all upper case"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"PEOPLE\", expectedListCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // mixed case"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_LIST + \"PEopLE\", expectedListCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 66,
      "hhdqirui": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_peopleList_returnsPeopleEnum() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_PEOPLE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"people\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_locationsList_returnsLocationsEnum() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_LOCATIONS;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"locations\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_visitsList_returnsVisitsEnum() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType expectedListType \u003d ListType.ALL_VISITS;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        ListType actualListType \u003d ParserUtil.parseListType(\"visits\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertEquals(expectedListType, actualListType);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void parseListType_invalidListType_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseListType(\"invalid keyword\"));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "siangernlow": 26,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LocationBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final LocationBook locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(Collections.emptyList(), locationBook.getLocationList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e locationBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_withValidReadOnlyLocationBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook newData \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(newData, locationBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void resetData_withDuplicateLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Two locations with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e newLocations \u003d Arrays.asList(ALICE_LOCATION, editedAlice);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookTest.LocationBookStub newData \u003d new LocationBookTest.LocationBookStub(newLocations);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e locationBook.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e locationBook.hasLocation(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationNotInLocationBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(locationBook.hasLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationInLocationBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(locationBook.hasLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationWithSameIdentityFieldsInLocationBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(locationBook.hasLocation(editedAlice));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void getLocationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e locationBook.getLocationList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * A stub ReadOnlyLocationBook whose locations list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static class LocationBookStub implements ReadOnlyLocationBook {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        private final ObservableList\u003cLocation\u003e locations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBookStub(Collection\u003cLocation\u003e locations) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            this.locations.setAll(locations);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        public ObservableList\u003cLocation\u003e getLocationList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            return locations;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.CARL_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.DANIEL_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(new LocationBook(), new LocationBook(modelManager.getLocationBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLocationBookFilePath(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocationBookFilePath_validPath_setsLocationBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager.setLocationBookFilePath(path);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(path, modelManager.getLocationBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasLocation(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationNotInLocationBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.hasLocation(CARL_LOCATION));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void hasLocation_locationInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager.addLocation(CARL_LOCATION);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(modelManager.hasLocation(CARL_LOCATION));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBook \u003d new LocationBookBuilder().withLocation(CARL_LOCATION).withLocation(DANIEL_LOCATION)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook differentLocationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, locationBook, userPrefs);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, locationBook, userPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, locationBook, userPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different locationBook -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentLocationBook, userPrefs)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, locationBook, userPrefs)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, locationBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 43,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void isSameLocation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameLocation(ALICE_LOCATION));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameLocation(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different name, same address -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.isSameLocation(editedAlice));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same name, different address -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.isSameLocation(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location aliceCopy \u003d new LocationBuilder(ALICE_LOCATION).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.equals(aliceCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(ALICE_LOCATION.equals(ALICE_LOCATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(BOB_LOCATION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE_LOCATION.equals(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/location/UniqueLocationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.location;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BOB_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.DuplicateLocationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.exceptions.LocationNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.LocationBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class UniqueLocationListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private final UniqueLocationList uniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(uniqueLocationList.contains(ALICE_LOCATION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(uniqueLocationList.contains(ALICE_LOCATION));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void contains_locationWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(uniqueLocationList.contains(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void add_duplicateLocation_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e uniqueLocationList.add(ALICE_LOCATION));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_nullTargetLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocation(null, ALICE_LOCATION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_nullEditedLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocation(ALICE_LOCATION, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_targetLocationNotInList_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocation(ALICE_LOCATION, ALICE_LOCATION));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationIsSameLocation_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocation(ALICE_LOCATION, ALICE_LOCATION);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Location editedAlice \u003d new LocationBuilder(ALICE_LOCATION).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocation(ALICE_LOCATION, editedAlice);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocation(ALICE_LOCATION, BOB_LOCATION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocation_editedLocationHasNonUniqueIdentity_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocation(ALICE_LOCATION, BOB_LOCATION));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_nullLocation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_locationDoesNotExist_throwsLocationNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(LocationNotFoundException.class, () -\u003e uniqueLocationList.remove(ALICE_LOCATION));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void remove_existingLocation_removesLocation() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.remove(ALICE_LOCATION);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_nullUniqueLocationList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocations((UniqueLocationList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_uniqueLocationList_replacesOwnListWithProvidedUniqueLocationList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocations(expectedUniqueLocationList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLocationList.setLocations((List\u003cLocation\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.add(ALICE_LOCATION);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e locationList \u003d Collections.singletonList(BOB_LOCATION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        uniqueLocationList.setLocations(locationList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        UniqueLocationList expectedUniqueLocationList \u003d new UniqueLocationList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        expectedUniqueLocationList.add(BOB_LOCATION);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(expectedUniqueLocationList, uniqueLocationList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void setLocations_listWithDuplicateLocations_throwsDuplicateLocationException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        List\u003cLocation\u003e listWithDuplicateLocations \u003d Arrays.asList(ALICE_LOCATION, ALICE_LOCATION);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DuplicateLocationException.class, () -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.setLocations(listWithDuplicateLocations));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                uniqueLocationList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/InfectionStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "public class InfectionStatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new InfectionStatus(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void constructor_invalidInfectionStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String invalidInfectionStatus \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new InfectionStatus(invalidInfectionStatus));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void isValidInfectionStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // null infection status"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e InfectionStatus.isValidInfectionStatus(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // invalid infection status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(InfectionStatus.isValidInfectionStatus(\"Nope\")); // true or false only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // valid infection statuses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"true\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"FALSE\")); // Upper case"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertTrue(InfectionStatus.isValidInfectionStatus(\"fAlsE\")); // Mixed case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "siangernlow": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                .withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different quarantine status -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        // different infection status -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withInfectionStatus(VALID_INFECTION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 11,
      "siangernlow": 6,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/QuarantineStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class QuarantineStatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new QuarantineStatus(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void constructor_invalidQuarantineStatus_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String invalidQuarantineStatus \u003d \"quarantined\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new QuarantineStatus(invalidQuarantineStatus));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void isValidQuarantineStatus() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null quarantine status"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e QuarantineStatus.isValidQuarantineStatus(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // invalid quarantine status"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"91\")); // numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"phone\")); // alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(QuarantineStatus.isValidQuarantineStatus(\"9011p041\")); // mix of alphabets and digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // valid quarantine status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"true\")); // boolean true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"True\")); // capitalised true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"false\")); // boolean false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"False\")); // capitalised false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(QuarantineStatus.isValidQuarantineStatus(\"FaLSe\")); // mix of upper and lower cases"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatus \u003d new QuarantineStatus(\"True\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(quarantineStatus.equals(quarantineStatus));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus quarantineStatusCopy \u003d new QuarantineStatus(quarantineStatus.value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertTrue(quarantineStatus.equals(quarantineStatusCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        QuarantineStatus differentQuarantineStatus \u003d new QuarantineStatus(\"false\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(quarantineStatus.equals(differentQuarantineStatus));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLocation.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.BENSON_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonAdaptedLocationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON_LOCATION.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON_LOCATION.getAddress().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_validLocationDetails_returnsLocation() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(BENSON_LOCATION);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(BENSON_LOCATION, location.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedLocation(INVALID_NAME, VALID_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(null, VALID_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedLocation(VALID_NAME, INVALID_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedLocation location \u003d new JsonAdaptedLocation(VALID_NAME, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, location::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String INVALID_QUARANTINE_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String INVALID_INFECTION_STATUS \u003d \"nope\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final String VALID_QUARANTINE_STATUS \u003d BENSON.getQuarantineStatus().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private static final String VALID_INFECTION_STATUS \u003d BENSON.getInfectionStatus().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidQuarantineStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        INVALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d QuarantineStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_nullQuarantineStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                null, VALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, QuarantineStatus.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidInfectionStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_QUARANTINE_STATUS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                        INVALID_INFECTION_STATUS, VALID_TAGS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d InfectionStatus.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public void toModelType_nullInfectionStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                VALID_QUARANTINE_STATUS, null, VALID_TAGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InfectionStatus.class.getSimpleName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                        VALID_QUARANTINE_STATUS, VALID_INFECTION_STATUS, invalidTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 44,
      "siangernlow": 15,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonLocationBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.ALICE_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.HOON_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.IDA_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonLocationBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLocationBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLocationBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLocationBook\u003e readLocationBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new JsonLocationBookStorage(Paths.get(filePath)).readLocationBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertFalse(readLocationBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"notJsonFormatLocationBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_invalidLocationLocationBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"invalidLocationLocationBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readLocationBook_invalidAndValidLocationLocationBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLocationBook(\"invalidAndValidLocationLocationBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void readAndSaveLocationBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempLocationBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook original \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage jsonLocationBookStorage \u003d new JsonLocationBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook readBack \u003d jsonLocationBookStorage.readLocationBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.addLocation(HOON_LOCATION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.removeLocation(ALICE_LOCATION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonLocationBookStorage.readLocationBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        original.addLocation(IDA_LOCATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        jsonLocationBookStorage.saveLocationBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        readBack \u003d jsonLocationBookStorage.readLocationBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook_nullLocationBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Saves {@code locationBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private void saveLocationBook(ReadOnlyLocationBook locationBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            new JsonLocationBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                    .saveLocationBook(locationBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void saveLocationBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLocationBook(new LocationBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableLocationBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.testutil.TypicalLocations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class JsonSerializableLocationBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLocationBookTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path TYPICAL_LOCATIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalLocationsLocationBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path INVALID_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLocationLocationBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private static final Path DUPLICATE_LOCATION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLocationLocationBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_typicalLocationsFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_LOCATIONS_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook locationBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook typicalLocationsLocationBook \u003d TypicalLocations.getTypicalLocationBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(locationBookFromFile, typicalLocationsLocationBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_invalidLocationFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_LOCATION_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void toModelType_duplicateLocations_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonSerializableLocationBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_LOCATION_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                JsonSerializableLocationBook.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableLocationBook.MESSAGE_DUPLICATE_LOCATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.testutil.TypicalLocations.getTypicalLocationBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.ReadOnlyLocationBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        JsonLocationBookStorage locationBookStorage \u003d new JsonLocationBookStorage(getTempFilePath(\"lb\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, locationBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void locationBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * {@link JsonLocationBookStorage} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonLocationBookStorageTest} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook original \u003d getTypicalLocationBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        storageManager.saveLocationBook(original);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        ReadOnlyLocationBook retrieved \u003d storageManager.readLocationBook().get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertEquals(original, new LocationBook(retrieved));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public void getLocationBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        assertNotNull(storageManager.getLocationBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 23,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setQuarantineStatus(person.getQuarantineStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.setInfectionStatus(person.getInfectionStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code QuarantineStatus} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public EditPersonDescriptorBuilder withQuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.setQuarantineStatus(new QuarantineStatus(quarantineStatus));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Sets the {@code InfectionStatus } of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public EditPersonDescriptorBuilder withInfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.setInfectionStatus(new InfectionStatus(infectionStatus));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 10,
      "siangernlow": 9,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building Locationbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " *     {@code LocationBook lb \u003d new LocationBookBuilder().withName(\"Vivocity\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private LocationBook locationBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook \u003d new LocationBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder(LocationBook locationBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.locationBook \u003d locationBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Adds a new {@code Location} to the {@code LocationBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBookBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        locationBook.addLocation(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return locationBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class to help with building Location objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Vivocity\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Creates a {@code LocationBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Initializes the LocationBuilder with the data of {@code locationToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder(Location locationToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        name \u003d locationToCopy.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        address \u003d locationToCopy.getAddress();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Name} of the {@code Location} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder withName(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code Address} of the {@code Location} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public LocationBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Location build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Location(name, address);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LocationUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.logic.commands.AddLocationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class for Location."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class LocationUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns an add location command string for adding the {@code location}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static String getAddLocationCommand(Location location) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return AddLocationCommand.COMMAND_WORD + \" \" + getLocationDetails(location);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns the part of command string for the given {@code location}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static String getLocationDetails(Location location) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_NAME + location.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_ADDRESS + location.getAddress().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import seedu.address.model.person.InfectionStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.person.QuarantineStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final String DEFAULT_QUARANTINE_STATUS \u003d \"false\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public static final String DEFAULT_INFECTION_STATUS \u003d \"false\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private QuarantineStatus quarantineStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    private InfectionStatus infectionStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d new QuarantineStatus(DEFAULT_QUARANTINE_STATUS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d new InfectionStatus(DEFAULT_INFECTION_STATUS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        quarantineStatus \u003d personToCopy.getQuarantineStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        infectionStatus \u003d personToCopy.getInfectionStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Sets the {@code QuarantineStatus} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public PersonBuilder withQuarantineStatus(String quarantineStatus) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        this.quarantineStatus \u003d new QuarantineStatus(quarantineStatus);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * Sets the {@code InfectionStatus} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @param infectionStatus The new infection status."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     * @return The updated PersonBuilder."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    public PersonBuilder withInfectionStatus(String infectionStatus) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        this.infectionStatus \u003d new InfectionStatus(infectionStatus);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "siangernlow"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new Person(name, phone, email, address, quarantineStatus, infectionStatus, tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 14,
      "siangernlow": 16,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INFECTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUARANTINE_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        sb.append(PREFIX_QUARANTINE_STATUS + person.getQuarantineStatus().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        sb.append(PREFIX_INFECTION + person.getInfectionStatus().getStatusAsString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        descriptor.getQuarantineStatus().ifPresent(quarantineStatus -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                sb.append(PREFIX_QUARANTINE_STATUS).append(quarantineStatus.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "        descriptor.getInfectionStatus().ifPresent(infectionStatus -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "                sb.append(PREFIX_INFECTION).append(infectionStatus.getStatusAsString()).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 4,
      "siangernlow": 4,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLocations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.LocationBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import seedu.address.model.location.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " * A utility class containing a list of {@code Location} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hopinxian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "public class TypicalLocations {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location ALICE_LOCATION \u003d new LocationBuilder().withName(\"Alice Pauline House\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location BENSON_LOCATION \u003d new LocationBuilder().withName(\"Benson Meier House\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location CARL_LOCATION \u003d new LocationBuilder().withName(\"Carl Kurz House\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location DANIEL_LOCATION \u003d new LocationBuilder().withName(\"Daniel Meier House\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"10th street\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location ELLE_LOCATION \u003d new LocationBuilder().withName(\"Elle Meyer House\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location FIONA_LOCATION \u003d new LocationBuilder().withName(\"Fiona Kunz House\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location GEORGE_LOCATION \u003d new LocationBuilder().withName(\"George Best House\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location HOON_LOCATION \u003d new LocationBuilder().withName(\"Hoon Meier House\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location IDA_LOCATION \u003d new LocationBuilder().withName(\"Ida Mueller House\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    // Manually added - Location\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location AMY_LOCATION \u003d new LocationBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static final Location BOB_LOCATION \u003d new LocationBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    private TypicalLocations() {} // prevents instantiation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     * Returns a {@code LocationBook} with all the typical locations."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static LocationBook getTypicalLocationBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        LocationBook lb \u003d new LocationBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        for (Location location : getTypicalLocations()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            lb.addLocation(location);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return lb;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hopinxian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    public static List\u003cLocation\u003e getTypicalLocations() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_LOCATION, BENSON_LOCATION, CARL_LOCATION, DANIEL_LOCATION,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "                ELLE_LOCATION, FIONA_LOCATION, GEORGE_LOCATION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INFECTION_STATUS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUARANTINE_STATUS_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withPhone(\"94351253\").withQuarantineStatus(\"true\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"false\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\").withQuarantineStatus(\"true\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withInfectionStatus(\"false\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withInfectionStatus(\"false\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(\"true\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(\"true\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(\"true\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(\"true\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withInfectionStatus(\"false\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withInfectionStatus(\"true\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withQuarantineStatus(VALID_QUARANTINE_STATUS_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withInfectionStatus(VALID_INFECTION_STATUS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "siangernlow"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withInfectionStatus(VALID_INFECTION_STATUS_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hopinxian"
        },
        "content": "            .withQuarantineStatus(VALID_QUARANTINE_STATUS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hopinxian": 9,
      "siangernlow": 15,
      "-": 64
    }
  }
]
