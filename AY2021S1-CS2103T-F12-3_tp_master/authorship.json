[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Cap 5.0 Buddy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-3/tp/actions)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "- Cap 5.0 Buddy is a project developed for a software engineering module (CS2103T) at the National University of Singapore."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - Cap 5.0 Buddy is a desktop application that helps NUS SoC students to keep track of their module details efficiently, optimized for use via a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It helps them centralize key module details and follows their study"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    progress by allowing efficient management of module details."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - Cap 5.0 is morphed from the AddressBook-Level3 project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It is written in OOP fashion. It provides a reasonably well-written code base bigger (around 6 KLoC) than what"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  - It comes with a reasonable level of user and developer documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "- For detailed documentation of this project, see the [Cap 5.0 Buddy Website](https://ay2021s1-cs2103t-f12-3.github.io/tp/)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more details on the project team members, head over to [AboutUs](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/AboutUs.md)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "-------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more information on how to use Cap 5.0 Buddy, head over to [User Guide](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/UserGuide.md)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "For more information on how to develop Cap 5.0 Buddy, head over to [Developer Guide](https://github.com/AY2021S1-CS2103T-F12-3/tp/blob/master/docs/DeveloperGuideCAP5.md)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "-------------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "jonasngs": 30,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "//mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "mainClassName \u003d \u0027tp.cap5buddy.cap5buddy\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 2,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "You can reach us at the following emails:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Jonas Ng: `e0415645@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Li HuanKang:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* David Cai:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Joshua Wong:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Michael:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Cap 5.0 Buddy Team"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Jonas Ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "\u003cimg src\u003d\"images/jonasngs.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[[github](https://github.com/jonasngs)]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[[portfolio](team/jonasng.md)]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Role: Team lead, Integration "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Li Huankang (Matthias)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u003cimg src\u003d\"images/matthiaslhk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[[github](http://github.com/MatthiasLHK)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "[[portfolio](team/matthiaslhk.md)]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Role: Team Lead , Scheduling and tracking"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* Responsibilities: Responsible for overall project coordination and in charge of defining, assigning, and tracking project tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Michael Setia Atmaja"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "\u003cimg src\u003d\"images/michael-setia.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "[[github](http://github.com/michael-setia)] "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "[[portfolio](team/michael-setia.md)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "### David Cai Qifan"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "\u003cimg src\u003d\"images/davidcaiqifan.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[[github](http://github.com/davidcaiqifan)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "[[portfolio](team/davidcaiqifan.md)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### Joshua Wong"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "\u003cimg src\u003d\"images/murtubak.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[[github](http://github.com/murtubak)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "murtubak"
        },
        "content": "[[portfolio](team/joshuawong.md)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "murtubak"
        },
        "content": "* Responsibilities: Code quality"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 4,
      "MatthiasLHK": 6,
      "murtubak": 5,
      "-": 33,
      "jonasngs": 13,
      "davidcaiqifan": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* has a need to manage a number of classes"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Users can keep track of all module details efficiently."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Centralize key module details."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Keep track of study progress effectively."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* Everything can be done in a single app."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App |"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | user                                       | add a new module               | keep track of the module information easily            |"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* * *`  | user                                       | delete a module                | remove modules that are completed                      |"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* *`    | user                                       | find a module by name          | locate details of a module without having to go through the entire list |"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `* *`    | user                                       | add a zoom link to a module    | keep track and retrieve it easily                      |"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "| `*`      | user who is overloading                    | sort modules by name           | locate a module easily                                 |"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "(For all use cases below, the **System** is the `CAP5BUDDY` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Use case: Add a new Module**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User wants to add a new module to track."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "2. User enters the command for adding a module: `add [module name/code]`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. CAP5BUDDY adds the module into storage and display the success message."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Delete a module**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to show all the existing modules."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays a list of the modules."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. User wants to delete a specific module from the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "4. User enters the command for module deletion: `delete [module name/code]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. CAP5BUDDY deletes that module from the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or does not exist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Edit a module**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to show all the existing modules."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays all the modules in a list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "3. User wants to edit a specific module from the list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. User enters the new information for that module."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5. CAP5BUDDY overwrites the existing information of that module."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or does not exist."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 4a. The new information is empty"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 4a1. CAP5BUDDY display an error message."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: View a module**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. User requests to view the list of modules."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. CAP5BUDDY displays all the modules in a list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. User requests to view the information of a specific module from the list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. CAP5BUDDY displays all information related to the specified module."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case ends here."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* 3a. The given index is invalid or null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Use case: Input module Cumulative Average Point(CAP) details**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. User requests to input CAP details(Grade point and Credit) for a module."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "2. CAP5BUDDY saves CAP details under the specified module."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 2a. Input contains invalid CAP details."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a2. User enters the correct data."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 1."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Use case: Calculate Cumulative Average Point(CAP)**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. User requests to calculate CAP"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "2. CAP5BUDDY calculates and displays CAP to user."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 2a. One or more modules do not contain details of grade point or credits."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 2a2. User enters required data."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Steps 2a1-2a2 are repeated until the data requirements are fulfilled.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* 3a. One or more modules contain invalid details of grade point or credits."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * 3a2. User enters valid data."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Steps 2a1-2a2 are repeated until the data requirements are fulfilled.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  Use case resumes at step 2."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Add a task to todo list**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to add a task to the todo list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the type of task to be added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User enters the information regarding the task."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY saves the given task in the todo list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. Format for information about the task is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message and ask the user to use the correct format."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a2. User enters the information with the correct format."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case resumes at step 4"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Delete a task in the todo list**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to delete a task in the todo list."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the task to be deleted."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. CAP5BUDDY shows a prompt message asking if the user really wants to delete the task."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. User clicks the \"YES\" button."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "5. CAP5BUDDY deletes the task from the todo list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 4a. User accidentally clicked the \"NO\" button."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 4a1. The prompt message disappears and CAP5BUDDY does not delete the task."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Sort task in the todo list**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to sort the tasks in the todo list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses the basis for sorting the tasks."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. CAP5BUDDY displays the sorted tasks based on the chosen basis."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Find a task in the todo list**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to find a task in the todo list."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. User chooses whether to find task based on date or keyword."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User enters the date or keyword."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY displays all task based on the user input from step 3."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. User inputs the date with an incorrect format."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. CAP5BUDDY displays an error message and ask the user to use the correct format."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a2. User enters the date with the correct format."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case resumes at step 4"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Use case: Archive a task in the todo list**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "1. User wants to archive a task in the todo list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "2. CAP5BUDDY shows a prompt message asking if the user is sure to archive the task."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "3. User clicks the \"YES\" button."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "4. CAP5BUDDY archives the task."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* 3a. User accidentally clicked the \"NO\" button."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  * 3a1. The prompt message disappears and CAP5BUDDY does not archive the task."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Use Case: View all contact details of a lecturer**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    **MSS**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    1. User requests to view all contact details of a lecturer."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    2. User provides the name of the lecturer."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    3. CAP5BUDDY searches for the specified lecturer from storage."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    4. CAP5BUDDY retrieves all contact details of the lecturer from storage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    4. CAP5BUDDY displays the desired contact details."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    **Extensions**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * 3a. The specified lecturer name does not exist."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "      * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Use Case: View the email of a Lecturer**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to view the email of a lecturer."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the lecturer."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified lecturer from storage."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY retrieves the email of the lecturer from storage."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY displays the desired email address."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 3a. The specified lecturer name does not exist."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Use Case: View the hand phone contact of a peer**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to view the hand phone number of a peer."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the peer."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified peer from storage."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY retrieves the hand phone contact of the peer from storage."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. CAP5BUDDY displays the desired hand phone contact."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* 3a. The specified peer name does not exist."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* 4a. The specified peer does not have a hand phone contact saved."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Use Case: Edit the email of a TA**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  1. User requests to edit the email of a TA."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  2. User provides the name of the TA."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  3. CAP5BUDDY searches for the specified TA from storage."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  4. User provides the new email to replace the existing email."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  5. CAP5BUDDY replaces the email of the TA with the user provided email."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  6. CAP5BUDDY displays the success message."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 3a. The specified TA name does not exist."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * 4a. The provided email address is empty or null."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    *{More to be added}*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: Add grades to CAP5BUDDY**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  1. User requests to add grade to CAP5BUDDY."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  2. CAP5BUDDY retrieves current grades."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  3. CAP5BUDDY saves new grade with previous grades."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 3a. The given grade is invalid."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: View grades for a module**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  1. User requests to view grades for a module."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  2. CAP5BUDDY retrieves current grades."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  3. CAP5BUDDY displays current grades."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 3a. The current list of grades is empty."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use Case: Edit grade in CAP5BUDDY**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  1. User requests to show stored grades in CAP5BUDDY."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  2. CAP5BUDDY shows a list of current grades."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  3. User requests to edit grade at a specific index."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  4. CAP5BUDDY saves new grade with previous grades."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 3a. The given grade is invalid."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * 4a. The provided index of the grade is invalid."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  *{More to be added}*"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Use case: Delete a grade**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   **MSS**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   1. User requests to show stored grades in CAP5BUDDY."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   2. CAP5BUDDY shows a list of current grades."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   3. User chooses the grade to be deleted at a specific index."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   4. CAP5BUDDY deletes the grade from the list."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "murtubak"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   **Extensions**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   * 3a. The provided index of the grade is invalid."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "murtubak"
        },
        "content": "          Use case resumes at step 2."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   *{More to be added}*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Add an event**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User request to create and add a new event into the tracker."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY creates and add the event into the list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 1a. The provide event information is invalid, missing date and time."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "          Use case resumes at step 1."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Edit an event**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to view all existing events."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays the list of all events."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to modify an existing event."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY displays the newly modified event."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The newly inputted information is invalid format or empty."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The requested event does not exist."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Delete an event**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to view all existing events in the list."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all the events."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to remove a specific event from the list."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows a success message and shows the new list."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The event to be removed does not exist."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY displays an error message."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Mark an event as completed**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to show all events."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all tracked events."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to mark a specific event as completed."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows the event as completed."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The event requested does not exist."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The event requested is already marked as completed/"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY does nothing."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Use case: Push the event back**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **MSS**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  1. User requests to show all events."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  2. CAP5BUDDY displays all currently tracked events."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  3. User requests to push the event back."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  4. CAP5BUDDY shows the new date and time of the event."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  **Extensions**"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3a. The requested event does not exist."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * 3b. The new date and time is invalid."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * CAP5BUDDY shows an error message."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3.  A user with not be able to access and modify other users\u0027 data files."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4.  Should be usable by any novice that has never used this program before."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5.  The name of the modules should not exceed 40 characters."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "6.  Should not contain more than 100 modules at 1 time."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Module List**: A list of all modules currently being tracked and stored in the CAP5BUDDY."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 74,
      "MatthiasLHK": 190,
      "murtubak": 77,
      "-": 200,
      "jonasngs": 83,
      "davidcaiqifan": 32
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Setting up the program in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. Ensure that you have Java JDK 11 installed on your OS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. Download the JAR file of the program [_here_](https://github.com/AY2021S1-CS2103T-F12-3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "3. Save the file into a folder name **CAP5.0Buddy** in any directory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "4. Run the JAR file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    a. Double click on the JAR file to execute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    b. Open up Command Prompt in OS, navigate to directory of the JAR file and return"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    java -jar *JARfile_name*.jar"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "5. Refer to our [_User Guide_](UserGuide.md) to start using the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Error fixing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "If you face any issues starting to launch the JAR file, pls refer to the FAQ below."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "1. Unable to run the file due to missing java in OS."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "##example\u003e java -jar cap5.jar"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "\u0027java\u0027 is not recognized as an internal or external command,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "operable program or batch file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Solution:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Install java JDK on your OS, which can be found [_here_](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "2. Unable to run JAR file due to the JAR being compiled in a higher version."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Error: A JNI error has occurred, please check your installation and try again"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Exception in thread \"main\" java.lang.UnsupportedClassVersionError: mattbot/Launcher has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.defineClass1(Native Method)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.defineClass(ClassLoader.java:756)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.defineClass(URLClassLoader.java:468)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.access$100(URLClassLoader.java:74)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader$1.run(URLClassLoader.java:369)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader$1.run(URLClassLoader.java:363)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.security.AccessController.doPrivileged(Native Method)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.net.URLClassLoader.findClass(URLClassLoader.java:362)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.loadClass(ClassLoader.java:418)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at java.lang.ClassLoader.loadClass(ClassLoader.java:351)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:601)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Solution:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Make sure that you have Java JDK 11 installed on your computer. If not, you can uninstall your current java and reinstall from the above link, or [_here_](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)."
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 46,
      "-": 17
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Cap 5.0 Buddy helps NUS SoC students to keep track of their module details efficiently. It helps them centralize key module details and follows their study progress through a Command Line Interface (CLI) that allows efficient management of module details."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": "1. [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "2. [Features](#features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   1. [Adding a module](#adding-a-new-module-add-module)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   2. [Viewing a module](#viewing-a-module-view)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   3. [Adding a zoom link to a module](#adding-a-zoom-link-to-a-module-add-zoom)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   4. [Deleting a module](#deleting-a-module-delete)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "   5. [Editing a module](#editing-a-module--edit-zoom)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "3. [FAQ](#faq)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "4. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. Download the latest `cap5buddy.jar` from [here](https://github.com/AY2021S1-CS2103T-F12-3/tp/releases)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ Cap 5 Buddy application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "   ![Ui](images/OriginalImages/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "### Adding a new module: `add module`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Creates and add a new module to be stored in the system."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  Format: `add module` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * Leaving the **_ZOOM_LINK_** part empty will create a empty module."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   Examples:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * `add module CS2103T https:\\\\link` creates and add the module called CS2103T"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   with the specified link into the system."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "   * `add module CS2103T` creates and add the module CS2103T with no zoom link."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### Viewing a module: `view`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Views a module stored in the system"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " Format: `view` **_`[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Using the keyword all in place of specified module name will display all module details"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * `view cs2103t` views the specified module"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * `view all` views all the modules stored"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "### Adding a zoom link to a module: `add zoom`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Adds a zoom link to an existing module."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Format: `add zoom` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  * Adds a zoom link [ZOOM_LINK] to a module named **_`[MODULE_NAME]`_**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  Example of usage:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "  `add zoom cs2103T https://sample.zoom.us` adds a zoom link `https://sample.zoom.us` to the module named `cs2103T`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "murtubak"
        },
        "content": "### Deleting a module: `delete`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "murtubak"
        },
        "content": "Deletes the module at the specified position from the system"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "murtubak"
        },
        "content": " Format: `delete` **_`[MODULE_POSITION]`_**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "murtubak"
        },
        "content": "  * `delete 1` deletes the module at position `1`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "### Editing a module : `edit zoom`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Edits an existing module in the module list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "Format: `edit zoom` **_`[MODULE_NAME]`_** **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* Edits the zoom link of a module named **_`[MODULE_NAME]`_** to **_`[ZOOM_LINK]`_**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "* `edit zoom CS2030 https://sample.zoom.us` edits the zoom link for a module named `CS2030`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "  to `https://sample.zoom.us`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Q**: How do you add a module into the program?\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**A**: Run the program and wait for the terminal to start up. Next, type in : “add module [CS2103T]” to add a module called CS2103T."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**Q**: How do you view the zoom links of a particular module?\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**A**: When the program has started running, enter the following in the terminal : “view [CS2103T]” to view the zoom link for the module called CS2103T."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------ "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "**Add** | `add module KEYWORD`\u003cbr\u003e e.g., `add module CS2103T [link]`, `add module CS2103T`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "**View** | `view KEYWORD `\u003cbr\u003e e.g., `view cs2101` , `view all`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "murtubak"
        },
        "content": "**Delete** | `delete KEYWORD `\u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "**Edit** | `edit zoom MODULE_NAME ZOOM_LINK`\u003cbr\u003e e.g., `edit zoom CS2103T https://sample.zoom.us`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Add Zoom** | `add zoom MODULE_NAME ZOOM_LINK` \u003cbr\u003e e.g., `add zoom cs2103T https://sample.zoom.us`"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 7,
      "MatthiasLHK": 9,
      "murtubak": 16,
      "-": 71,
      "jonasngs": 8,
      "davidcaiqifan": 14
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "title: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F12-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F12-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "![Ui](images/OriginalImages/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "**Cap 5.0 Buddy is a desktop application that helps NUS SoC students to keep track of their module details efficiently.** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* If you are interested in using Cap 5.0 Buddy, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "* If you are interested about developing Cap 5.0 Buddy, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "jonasngs": 8
    }
  },
  {
    "path": "docs/team/davidcaiqifan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "title: David Cai Qifan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 46
    }
  },
  {
    "path": "docs/team/jonasng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "title: Jonas Ng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "jonasngs": 2
    }
  },
  {
    "path": "docs/team/joshuawong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "title: Joshua Wong\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "murtubak": 1,
      "-": 45
    }
  },
  {
    "path": "docs/team/matthiaslhk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "title: Li Huankang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 46
    }
  },
  {
    "path": "docs/team/michael-setia.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "title: Michael Setia Atmaja\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "## Project: Cap 5.0 Buddy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/Cap5buddy.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.storage.JsonModuleListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.ui.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the cap5buddy program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Cap5buddy {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the main body of the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static void main(String[] args) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        // Start up, create the UI object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Ui userInterface \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        userInterface.startScanner(); // creates the scanner"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        run(userInterface);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static void run(Ui ui) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Path saveDir \u003d Paths.get(\".\\\\data\\\\moduleList.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonModuleListStorage storageList \u003d new JsonModuleListStorage(saveDir);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(storageList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ModuleList moduleList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Optional\u003cModuleList\u003e optionalModuleList \u003d storageList.readModuleList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            if (optionalModuleList.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                moduleList \u003d new ModuleList(new ArrayList\u003cModule\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                moduleList \u003d storageList.readModuleList().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            moduleList \u003d new ModuleList(new ArrayList\u003cModule\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        LogicManager lm \u003d new LogicManager(storage, moduleList, new ContactList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String current \u003d ui.getInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            CommandResult res \u003d lm.execute(current);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            isExit \u003d res.getExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            ui.printResult(res.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28,
      "jonasngs": 8,
      "davidcaiqifan": 27
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Contact(Name name, Email email) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // requireAllNonNull(name, email);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isSameContact(Contact otherPerson) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!(other instanceof Contact)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact otherPerson \u003d (Contact) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 72
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/ContactList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.exceptions.ContactNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.exceptions.DuplicateContactException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ContactList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cContact\u003e contacts;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactList(List\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean hasContact(Contact toCheck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contacts.stream().anyMatch(toCheck::isSameContact);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addContact(Contact toAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (hasContact(toAdd)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            // throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.add(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * person in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void editContact(Contact target, Contact editedContact) throws"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            ContactNotFoundException, DuplicateContactException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int index \u003d contacts.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Invalid Person!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException(error);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!target.isSameContact(editedContact) \u0026\u0026 hasContact(editedContact)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The operation could not be completed as a similar person is already in the contact list!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new DuplicateContactException(error);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.set(index, editedContact);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the contact at the zero based index argument."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param contactID"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Contact getContact(int contactID) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact contact \u003d this.contacts.get(contactID);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return contact;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeContact(Contact toRemove) throws ContactNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (!contacts.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"The contact does not exist!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ContactNotFoundException(error);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Removes the contacts in the contact list at the zero based index argument."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param contactID Zero based index of the contact in the contact list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void removeContact(int contactID) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contacts.remove(contactID);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public List\u003cContact\u003e getContactList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.contacts;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private boolean contactsAreUnique(List\u003cContact\u003e persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                if (persons.get(i).isSameContact(persons.get(j))) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 111
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public final String emailAddress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // requireNonNull(email);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        emailAddress \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return emailAddress;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 49
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "// import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // requireNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        // checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 37
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/exceptions/ContactNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ContactNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ContactNotFoundException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 7
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/contacts/exceptions/DuplicateContactException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.contacts.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class DuplicateContactException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public DuplicateContactException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 7
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    CommandResult execute(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 1,
      "jonasngs": 9
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * The brain of the program, handles parsing and commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    //private ModuleList modlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private ParserManager pm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final StorageManager storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final ModuleList moduleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final ContactList contactList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the constructor of the Manager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public LogicManager(StorageManager storage, ModuleList moduleList, ContactList contactList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        //this.modlist \u003d new ModuleList(new ArrayList\u003cModule\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.pm \u003d new ParserManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.contactList \u003d contactList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the result container with all the relevant information."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput user input of user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return ResultCommand result container."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @throws ParseException invalid command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Command command \u003d pm.parse(userInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        CommandResult result \u003d command.execute(moduleList, contactList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            storage.saveModuleList(moduleList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            System.out.println(ioe.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 28,
      "jonasngs": 12,
      "davidcaiqifan": 15
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/AddContactCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddContactCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a AddContactCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddContactCommand(String name, String email) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList modules, ContactList contacts) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Contact contact \u003d new Contact(this.name, this.email);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        contacts.addContact(contact);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String successMessage \u003d createSuccessMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(successMessage, this.isExit());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a success message when the contact has been successfully added to the contact list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the success message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String createSuccessMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d this.name + \" has been successfully added to your contact list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the sessions has not been terminated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 53
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the AddModuleCommand class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String SUCCESS_MESSAGE \u003d \" has been added successfully!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String link;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Represents the constructor to making the AddModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param info array of tokenised info."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public AddModuleCommand(String modName, String modLink) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d modName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.link \u003d modLink;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Executes the main function of this command, to create a new module."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return ResultCommand ResultCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList modules, ContactList contacts) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        if (this.link \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Module mod \u003d new Module(this.name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            modules.addModule(mod);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            Module mod \u003d new Module(this.name, this.link);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            modules.addModule(mod);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(this.name + SUCCESS_MESSAGE, isExit());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 30,
      "murtubak": 4,
      "jonasngs": 11
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/AddZoomLinkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents the AddZoomLinkCommand class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddZoomLinkCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final int moduleID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String zoomLink;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new AddZoomLinkCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param moduleIndex Zero based index of the module in the list of modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param zoomLink String containing the zoom link to be added to the module."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddZoomLinkCommand(int moduleIndex, String zoomLink) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.moduleID \u003d moduleIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes the command to add a string containing the zoom link to the desired module."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param modules List of modules belonging to the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return ResultCommand ResultCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList modules, ContactList contacts) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (this.moduleID \u003e modules.getListSize() || this.moduleID \u003c\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Invalid module. The module ID you provided is not valid.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new CommandException(error);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int index \u003d this.moduleID - 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Module module \u003d modules.getModuleByIndex(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Module updatedModule \u003d module.addZoomLink(this.zoomLink);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        modules.updateModule(index, updatedModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String successMessage \u003d createSuccessMessage(updatedModule.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(successMessage, isExit());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates a success message when the zoom link has been successfully added to the desired module."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param moduleName String containing the name of the module."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the success message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public String createSuccessMessage(String moduleName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String message \u003d this.zoomLink + \" has been successfully added to \" + moduleName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return False since the sessions has not been terminated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 1,
      "jonasngs": 66
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.exception.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Represents a command to be executed by the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Executes the relevant command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return ResultCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract CommandResult execute(ModuleList modules, ContactList contacts) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return True if the session has been terminated, false otherwise."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 3,
      "jonasngs": 22
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents the command that stores the success or failure message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the constructor of ResultCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param result the message to store."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult(String result, boolean isExit) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the message inside the ResultCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public boolean getExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 27,
      "murtubak": 3,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents the DeleteModuleCommand class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String SUCCESS_MESSAGE_FIRST \u003d \"The module at position \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private static final String SUCCESS_MESSAGE_SECOND \u003d \" has been deleted successfully!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    private final int position;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Represents the constructor to make the DeleteModuleCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param position position of module to delete."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public DeleteModuleCommand(int position) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        this.position \u003d position;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Executes the main function of this command, to remove a module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return ResultCommand ResultCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList modules, ContactList contacts) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        modules.deleteModule(position);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(SUCCESS_MESSAGE_FIRST + position + SUCCESS_MESSAGE_SECOND, isExit());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 34,
      "jonasngs": 3
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Command to edit information about a Module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Name of the original module."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Descriptor for editing the module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Constructs an EditModuleCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param moduleName name of the module that will be edited."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param editModuleDescriptor descriptor for editing the module."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public EditModuleCommand(String moduleName, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.editModuleDescriptor \u003d editModuleDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Executes the command by editing the module based on the descriptor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param moduleList the related moduleList that contains the module that needs to be edited."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return a ResultCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList moduleList, ContactList contacts) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Module moduleToEdit \u003d moduleList.getModule(this.moduleName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        moduleList.setModule(moduleName, editedModule);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String message \u003d createSuccessMessage(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(message, isExit());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates edited version of the original Module."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param moduleToEdit original Module to be edited."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return the edited Module."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String updatedName \u003d editModuleDescriptor.getName().orElse(moduleToEdit.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String updatedZoomLink \u003d editModuleDescriptor.getZoomLink().orElse((moduleToEdit.getLink()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new Module(updatedName, updatedZoomLink);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Creates success message after successfully executing this command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param moduleToEdit the original module."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param editedModule the module after editing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return String that represent a success message followed by the content of the original"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *         module and the content after the module has been edited."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public String createSuccessMessage(Module moduleToEdit, Module editedModule) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String msg \u003d \"\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Module \" + moduleName + \" has been successfully edited!\\n\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Original Module: \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Name     : \" + moduleToEdit.getName() + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Zoom Link: \" + moduleToEdit.getLink() + \"\\n\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"After Edited: \\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Name     : \" + editedModule.getName() + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                + \"Zoom Link: \" + editedModule.getLink() + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return True if the session has been terminated, false otherwise."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         * the new name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         * the new zoomLink."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        private String zoomLink;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         * Constructs an empty EditModuleDescriptor."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            setZoomLink(toCopy.zoomLink);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void setName(String name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public void setZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public Optional\u003cString\u003e getZoomLink() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return Optional.ofNullable(zoomLink);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getZoomLink().equals(e.getZoomLink());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 152,
      "jonasngs": 3
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/ViewModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.contacts.ContactList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Represents the ViewModuleCommand class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class ViewModuleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final String SUCCESS_MESSAGE \u003d \"Module details have been displayed successfully!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    //need a storage system"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ViewModuleCommand(String[] commandArguments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleName \u003d commandArguments[3];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Executes the main function of this command, to view a specified module."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return String success message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandResult execute(ModuleList modules, ContactList contacts) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Module moduleToBeDisplayed \u003d modules.getModule(moduleName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new CommandResult(moduleToBeDisplayed.toString() + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                + SUCCESS_MESSAGE, isExit());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Indicates if the application session has ended."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return False since the sessions has not been terminated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 3,
      "davidcaiqifan": 37
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/commands/exception/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.logic.commands.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 9
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/AddContactParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.commands.AddContactCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddContactParser extends Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses a user input for an AddContactCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return AddContactCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException If the user input could not be parsed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddContactCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Tokenizer tokenizer \u003d new Tokenizer(userInput, PrefixList.CONTACT_NAME_PREFIX, PrefixList.CONTACT_EMAIL_PREFIX);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] parsedArguments \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String contactName \u003d parsedArguments[0];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String contactEmail \u003d parsedArguments[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddContactCommand(contactName, contactEmail);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Missing arguments\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(error);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonasngs": 27
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/AddModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the parser that handles Add Module command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class AddModuleParser extends Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private AddModuleCommand command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the function call that passes info into the Command object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput tokenised information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return Command the respective command type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Command parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Tokenizer token \u003d new Tokenizer(userInput, PrefixList.MODULE_NAME_PREFIX, PrefixList.MODULE_LINK_PREFIX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String[] parsedArguments \u003d token.tokenize();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String modName \u003d parsedArguments[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String modLink \u003d parsedArguments[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return new AddModuleCommand(modName, modLink);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 25,
      "murtubak": 1,
      "jonasngs": 2
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/AddZoomLinkParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.AddZoomLinkCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class AddZoomLinkParser extends Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Parses a user input for a command to add a zoom link."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public AddZoomLinkCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Tokenizer tokenizer \u003d new Tokenizer(userInput,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                PrefixList.MODULE_INDEX_PREFIX, PrefixList.MODULE_LINK_PREFIX);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String[] parsedArguments \u003d tokenizer.tokenize();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            int moduleID \u003d Integer.parseInt(parsedArguments[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String zoomLink \u003d parsedArguments[1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return new AddZoomLinkCommand(moduleID, zoomLink);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"No module ID was provided\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(error);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"Missing arguments\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(error);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 4,
      "jonasngs": 27
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/DeleteModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "murtubak"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "murtubak"
        },
        "content": "import tp.cap5buddy.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "murtubak"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "murtubak"
        },
        "content": " * Represents the parser that handles Delete Module command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "murtubak"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "murtubak"
        },
        "content": "public class DeleteModuleParser extends Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Represents the function call that passes info into the Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param userInput tokenised information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @return Command the respective command type."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        Tokenizer token \u003d new Tokenizer(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        String[] mod \u003d token.getWords();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        int position \u003d Integer.parseInt(mod[4]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        return new DeleteModuleCommand(position);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "murtubak"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "murtubak": 24
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/EditModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import tp.cap5buddy.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "import tp.cap5buddy.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " * Represents the parser that handles Edit Module command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "michael-setia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "public class EditModuleParser extends Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Represents a function that passes the user input into a Command object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param userInput tokenized user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return Command object based on the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        Tokenizer token \u003d new Tokenizer(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String[] mod \u003d token.getWords();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        String moduleName \u003d mod[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (mod.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editModuleDescriptor.setZoomLink(mod[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        if (mod.length \u003e\u003d 3) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            editModuleDescriptor.setName(mod[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return new EditModuleCommand(moduleName, editModuleDescriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 31
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the super class of all Parser commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public abstract class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public abstract Command parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 11,
      "jonasngs": 3
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/ParserManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the manager that handles all parser related actions and requests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String currentInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String nonCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private int count;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the constructor that creates the manager object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public ParserManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.currentInput \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.command \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.nonCommand \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the String of the result after parsing the input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String result message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Command parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.currentInput \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        getCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        getNonCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Parser parser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case \"addmodule\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parser \u003d new AddModuleParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"addzoom\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parser \u003d new AddZoomLinkParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case \"editmodule\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            parser \u003d new EditModuleParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            command \u003d parser.parse(this.nonCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case \"viewmodule\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            parser \u003d new ViewModuleParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            command \u003d parser.parse(this.nonCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case \"deletemodule\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            parser \u003d new DeleteModuleParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            command \u003d parser.parse(this.nonCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"addcontact\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            parser \u003d new AddContactParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(\"Invalid Command\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void getCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String command \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        Scanner sc \u003d new Scanner(this.currentInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            String now \u003d sc.next();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            if (Prefix.isPrefix(now)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                this.count++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "                command +\u003d now;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private void getNonCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String nonCommand \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String[] input \u003d this.currentInput.split(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        int limit \u003d input.length;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (int i \u003d this.count; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            nonCommand +\u003d input[i] + \" \";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.nonCommand \u003d nonCommand;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.count \u003d 0; // to reset the counter"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 4,
      "MatthiasLHK": 71,
      "murtubak": 5,
      "jonasngs": 11,
      "davidcaiqifan": 4
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Checks if the given word contains a prefix."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param word word to check."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return boolean is prefix or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static boolean isPrefix(String word) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        String possiblePrefix \u003d \"\" + word.charAt(0) + word.charAt(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        boolean res \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        switch (possiblePrefix) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        case \"l/\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"i/\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        case \"e/\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        case \"v/\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"c/\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"a/\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        case \"r/\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            res \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        case \"d/\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            res \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "murtubak"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            res \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 34,
      "murtubak": 4,
      "jonasngs": 4,
      "davidcaiqifan": 3
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/PrefixList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class PrefixList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static final Prefix MODULE_NAME_PREFIX \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix MODULE_INDEX_PREFIX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix MODULE_LINK_PREFIX \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public static final Prefix MODULE_NEWNAME_PREFIX \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final Prefix MODULE_VIEW_PREFIX \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public static final Prefix MODULE_DELETE_PREFIX \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix CONTACT_NAME_PREFIX \u003d new Prefix(\"c/\"); // contact name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix CONTACT_EMAIL_PREFIX \u003d new Prefix(\"a/\"); // contact email address"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public static final Prefix CONTACT_INDEX_PREFIX \u003d new Prefix(\"r/\"); // contact index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "michael-setia": 1,
      "MatthiasLHK": 6,
      "murtubak": 1,
      "jonasngs": 5,
      "davidcaiqifan": 1
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/PrefixPosition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the object to holds the information of the prefix and its index position."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class PrefixPosition {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private int prefixIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Creates a new PrefixPosition container."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param startPosition index of the starting character of the prefix."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param prefix the prefix represented."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public PrefixPosition(int startPosition, Prefix prefix) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.prefixIndex \u003d startPosition;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the index for this Prefix."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return int index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public int getPrefixIndex() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.prefixIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the Prefix tagged to this container."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return Prefix prefix stored."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.prefix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 35
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/Tokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import tp.cap5buddy.logic.parser.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the token of each user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Tokenizer {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private static final int SIZE \u003d 6; // updates as the number of prefixes increases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String[] words \u003d new String[SIZE];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final Prefix[] prefixes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Constructs the tokenising object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param prefixes Array of prefixes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Tokenizer(String userInput, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.prefixes \u003d prefixes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Tokenizes a user input based on prefixes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String array containing command arguments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException If the user input could not be parsed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String[] tokenize() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions \u003d findAllPrefixPositions();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return extractArguments(this.userInput, prefixPositions);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return List of prefix positions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException If the input could not be parsed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private List\u003cPrefixPosition\u003e findAllPrefixPositions() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        List\u003cPrefixPosition\u003e prefixPositions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        for (Prefix prefix : this.prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "            PrefixPosition prefixPosition \u003d findPrefixPosition(this.userInput, prefix);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (prefixPosition !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                prefixPositions.add(prefixPosition);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return prefixPositions;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Finds the position of the prefix in the user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param prefix Prefix."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Prefix position."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @throws ParseException If the same prefix is used more than once by the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private PrefixPosition findPrefixPosition(String userInput, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String prefixSearch \u003d \" \" + prefix.getPrefix();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int prefixIndex \u003d userInput.indexOf(prefixSearch);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean hasMultipleSamePrefixes \u003d hasMultipleSamePrefixes(userInput, prefix, prefixIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        if (hasMultipleSamePrefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String error \u003d \"User input has multiple arguments for the same prefix\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            throw new ParseException(error);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return (prefixIndex \u003d\u003d -1 ? null : new PrefixPosition(prefixIndex + 1, prefix));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Determines if the same prefix is used more than once."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param prefix Prefix."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param currentPrefixIndex Index of the current prefix in the user input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private boolean hasMultipleSamePrefixes(String userInput, Prefix prefix, int currentPrefixIndex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int nextPrefixIndex \u003d userInput.indexOf(\" \" + prefix.getPrefix(), currentPrefixIndex + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        boolean hasMultipleSamePrefix \u003d nextPrefixIndex !\u003d -1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return hasMultipleSamePrefix;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Extracts the command arguments using the list of prefix positions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param prefixPositions Prefix positions."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String array containing the command arguments."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String[] extractArguments(String userInput, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String[] results \u003d new String[SIZE];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(userInput.length(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String argument \u003d extractArgument(userInput, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            results[i] \u003d argument;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Extracts the argument of a prefix."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param userInput User input."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param currentPrefixPosition Current index of the prefix."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param nextPrefixPosition Next prefix index."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return String containing the command argument for the current prefix."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private String extractArgument(String userInput,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                                  PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                                  PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        int argumentIndex \u003d currentPrefixPosition.getPrefixIndex() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        String argument \u003d userInput.substring(argumentIndex, nextPrefixPosition.getPrefixIndex());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return argument.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String[] getWords() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.words;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 33,
      "murtubak": 1,
      "jonasngs": 96
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/ViewModuleParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.logic.commands.ViewModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Represents the parser that handles View Module command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class ViewModuleParser extends Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Parses a user input for a command to view a stored module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Tokenizer token \u003d new Tokenizer(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String[] mod \u003d token.getWords();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new ViewModuleCommand(mod);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 22
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/logic/parser/exception/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.logic.parser.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 1,
      "jonasngs": 6
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/modules/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the Module creation class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final String zoomLink;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param zoomLink zoom link attached to module"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Module(String name, String zoomLink) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Represents the module object constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param name name of module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public Module(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.zoomLink \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the module name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String module name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the zoom link of the module."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return String zoom link."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getLink() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return this.zoomLink;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds the zoom link for this module."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param zoomLink zoom link."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Module a new Module with the input zoom link."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Module addZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return new Module(this.getName(), zoomLink);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return String.format(\"The zoom link for %s is %s\", getName(), getLink());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 42,
      "jonasngs": 11,
      "davidcaiqifan": 5
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/modules/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "package tp.cap5buddy.modules;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " * Encapsulates information and methods that relate to a list of modules being tracked."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonasngs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /** List of modules belonging to the user. **/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    private final List\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Creates and initialises a new ModuleList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param modules List of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public ModuleList(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the module matching the input module name from the list of modules."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Module matching the input module name if it exists, null otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Module getModuleByIndex(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        Module module \u003d this.modules.get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Retrieves the module matching the input module name from the list of modules."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param inputModuleName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @return Module matching the input module name if it exists, null otherwise."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public Module getModule(String inputModuleName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        for (Module module : this.modules) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            String moduleName \u003d module.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            if (moduleName.equals(inputModuleName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public List\u003cModule\u003e getModules() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return this.modules;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Adds a module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.modules.add(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Returns the index of the first module with the given name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param inputModuleName the module name."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @return the index of the first module with inputModuleName as its name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public int getModuleIndex(String inputModuleName) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        // Maybe an additional data structured can be implemented to store all the index?"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            String moduleName \u003d module.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            if (moduleName.equals(inputModuleName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * Replaces the first module in the list with the given name with the specified module."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param inputModuleName the name of the module to be replaced."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     * @param newModule the replacement module."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    public void setModule(String inputModuleName, Module newModule) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        int index \u003d getModuleIndex(inputModuleName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "        this.modules.set(index, newModule);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "michael-setia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "michael-setia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * Deletes a module at the stated position starting from 1."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     * @param position the position of the module to delete given by the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    public void deleteModule(int position) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "murtubak"
        },
        "content": "        modules.remove(position - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "murtubak"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "murtubak"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "murtubak"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @return integer size."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return this.modules.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * Updates a module in the list of modules at the given index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param index Zero based index of the module in the list of modules."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     * @param module Updated module to replace the old module in the list of modules."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    public void updateModule(int index, Module module) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "        this.modules.set(index, module);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonasngs"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonasngs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "michael-setia": 30,
      "MatthiasLHK": 7,
      "murtubak": 10,
      "jonasngs": 69,
      "davidcaiqifan": 10
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/JsonAdaptedModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final String zoomLink;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given person details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"name\") String name, @JsonProperty(\"zoomLink\") String zoomLink) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        zoomLink \u003d source.getLink();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Module(name, zoomLink);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 46
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/JsonModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * A class to access CAP5Buddy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonModuleListStorage implements ModuleListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonModuleListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readModuleList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Optional\u003cJsonSerializableModuleList\u003e jsonModuleList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                filePath, JsonSerializableModuleList.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!jsonModuleList.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.of(jsonModuleList.get().toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Similar to {@link #saveModuleList(ModuleList)}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param moduleList"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleList(moduleList), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 74
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/JsonSerializableModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * An Immutable ModuleList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "class JsonSerializableModuleList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleList} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableModuleList(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given {@code ModuleList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableModuleList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public JsonSerializableModuleList(ModuleList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        modules.addAll(source.getModules().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts this module list into the model\u0027s {@code ModuleList} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public ModuleList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        ModuleList moduleList \u003d new ModuleList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            moduleList.addModule(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 57
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/ModuleListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public interface ModuleListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns ModuleList data as a {@link ModuleList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #getModuleListFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the given {@link ModuleList} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param moduleList cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ModuleList moduleList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @see #saveModuleList(ModuleList)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ModuleList moduleList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 47
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public interface Storage extends ModuleListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Path getModuleListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    Optional\u003cModuleList\u003e readModuleList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    void saveModuleList(ModuleList moduleList) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 24
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import tp.cap5buddy.modules.ModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Manages storage of CAP5Buddy data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private ModuleListStorage moduleListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ModuleListStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public StorageManager(ModuleListStorage moduleListStorage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        this.moduleListStorage \u003d moduleListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Path getModuleListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListStorage.getModuleListFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return readModuleList(moduleListStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public Optional\u003cModuleList\u003e readModuleList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return moduleListStorage.readModuleList(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ModuleList moduleList) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        saveModuleList(moduleList, moduleListStorage.getModuleListFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public void saveModuleList(ModuleList moduleList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        moduleListStorage.saveModuleList(moduleList, filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 54
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/ui/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String STARTING_MESSAGE \u003d \"Welcome to Cap 5.0 Buddy!\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final String CLOSING_MESSAGE \u003d \"Program shutting down, hope to see oyu again!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getStart() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return STARTING_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public static String getClose() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return CLOSING_MESSAGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 15
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "package tp.cap5buddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " * Represents the UI object that the user interacts with."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    private static final Scanner SC \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Prints the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void printResult(String result) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        System.out.println(result);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     * Starts the scanning of user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void startScanner() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        printResult(Messages.getStart());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        printResult(Messages.getClose());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "        return SC.nextLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MatthiasLHK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MatthiasLHK": 34
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 44
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 37
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 23
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 83
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 144
    }
  },
  {
    "path": "src/main/java/tp/cap5buddy/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "package tp.cap5buddy.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "davidcaiqifan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "davidcaiqifan": 70
    }
  }
]
